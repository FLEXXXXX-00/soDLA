package nvdla

import chisel3._
import chisel3.experimental._
import chisel3.util._
import scala.math._


class cdmaConfiguration extends cbufConfiguration{
    val CDMA_CBUF_WR_LATENCY = 3
    val NVDLA_HLS_CDMA_CVT_LATENCY = 3
    val CDMA_SBUF_SDATA_BITS = NVDLA_MEMORY_ATOMIC_SIZE*NVDLA_BPE
    val CDMA_SBUF_DEPTH = 256
    val CDMA_SBUF_NUMBER = 16
    val CDMA_SBUF_RD_LATENCY = 2
    val CDMA_SBUF_WR_LATENCY = 3

    val CDMA_CVT_CELL_LATENCY = NVDLA_HLS_CDMA_CVT_LATENCY
    val CDMA_CVT_LATENCY = CDMA_CVT_CELL_LATENCY + 3
    val CDMA_STATUS_LATENCY = (CDMA_CBUF_WR_LATENCY + CDMA_CVT_LATENCY)

    val SBUF_WINOGRAD = if(NVDLA_WINOGRAD_ENABLE) 1 else 0

    //DorisL-S----------------
    val NVDLA_CDMA_BPE = NVDLA_BPE
    val NVDLA_CDMA_DMAIF_BW = NVDLA_MEMIF_WIDTH
    val NVDLA_CDMA_MEM_MASK_BIT = (NVDLA_CDMA_DMAIF_BW/NVDLA_CDMA_BPE/NVDLA_MEMORY_ATOMIC_SIZE)

    val NVDLA_CDMA_MEM_RD_RSP  = ( NVDLA_CDMA_DMAIF_BW + NVDLA_CDMA_MEM_MASK_BIT )
    val NVDLA_CDMA_MEM_WR_REQ = ( NVDLA_CDMA_DMAIF_BW + NVDLA_CDMA_MEM_MASK_BIT + 1 )
    val NVDLA_CDMA_MEM_RD_REQ = ( NVDLA_MEM_ADDRESS_WIDTH + 15 )

    val CBUF_WR_BANK_ADDR_BITS  = 9 
    val CDMA_GRAIN_MAX_BIT = NVDLA_CDMA_GRAIN_MAX_BIT

    //redpanda3----------------
    val ATMM = NVDLA_MEMORY_ATOMIC_SIZE*NVDLA_BPE
    val ATMMBW = log2Ceil(NVDLA_MEMORY_ATOMIC_SIZE) 
    val ATMKBW = log2Ceil(NVDLA_MAC_ATOMIC_C_SIZE) 
    val DMAIF = NVDLA_CDMA_DMAIF_BW
    val ATMC = NVDLA_MAC_ATOMIC_C_SIZE*NVDLA_BPE
    val ATMM_NUM = DMAIF/ATMM
    val BNUM = NVDLA_CDMA_DMAIF_BW/NVDLA_BPE
    val MN_BW = NVDLA_CDMA_DMAIF_BW / NVDLA_BPE * 16
    val SS = log2Ceil(ATMC/ATMM)
    val ATMM8 = ((8*NVDLA_MEMORY_ATOMIC_SIZE)/NVDLA_MAC_ATOMIC_C_SIZE)
    val CBUF_BANK_SIZE = NVDLA_CBUF_BANK_WIDTH * NVDLA_CBUF_BANK_DEPTH
    val CDMA_ADDR_ALIGN = NVDLA_MEMORY_ATOMIC_SIZE
    val CBUF_BANK_FETCH_BITS = log2Ceil(CBUF_BANK_SIZE/CDMA_ADDR_ALIGN)
    val BANK_DEPTH_BITS = log2Ceil(ATMC/DMAIF) + log2Ceil(NVDLA_CBUF_BANK_DEPTH)

}
