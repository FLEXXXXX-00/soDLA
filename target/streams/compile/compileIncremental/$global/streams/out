[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial source changes: [0m
[0m[[0m[0mdebug[0m] [0m[0m	removed:Set(\Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_x2_int.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\plan\RED_CORA_transition_function.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\kf\CORA_PRED_status.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\kf\CORA_PRED_PRECOMPUTE_q.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_pra_cell.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_gate.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\pred\CORA_PRED_p.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_trt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_wl_wmb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\rocket\fpuv4.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_bufferin.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_gate.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\kf\CORA_MEAS_UPDATE_Hj.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\meas\CORA_MEAS_Hj.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_CORE_cal1d.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_intr.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_cq.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\slibs\NV_NVDLA_SDP_fifo.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_CORE_preproc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_gate.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\kf\CORA_PRED_PRECOMPUTE_REC_dt.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\cdp\int_sum_block_tp1.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\plan\RED_CORA_cost_function.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_DAT_out.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_mul.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_din.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\cdp\int_sum_block.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_EG_ro.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\pdp\fp16_4add.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_alu.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\devices\nvdla\NVDLA.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\slibs\HLS_fp17_add.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_wl_wmb.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\kf\kf.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\top\NV_NVDLA_config.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_REG_dual.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_dout.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\dsp\sin.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\localization\C_CORA_gauss.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDMA_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_ssync3d_c.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\kf\CORA_PRED_UPDATE_q.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_WDMA_dat.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_cq.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\kf\CORA_PRED_PRECOMPUTE_dt.1.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\slibs\HLS_cdp_icvt.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_brdma.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_eg.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_x1_int.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\devices\nvdla\Periphery.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_slcg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_gate.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\cora\plan\RED_CORA_second_cost_function.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\nvdla\car\NV_NVDLA_ssync3d_c.scala, \Users\chenkangqi\Documents\GitHub\soDLA\src\main\scala\rocket\fpuv4.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	added: Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\odif_nvdla\apb.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	modified: Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_m.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_WDMA_cmd.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\bdma\NV_NVDLA_BDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_lut_expn.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdrsp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_wr.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_reset.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_mul.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_mac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_mul.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_DAT_in.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_sg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_idx.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dma_mux.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_y.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_erdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_dl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_dual_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_single_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_din.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_inp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_relu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_wt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_EG_ro.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_CSB_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_mrdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cbuf\NV_NVDLA_cbuf.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_LUT_CTRL_unit.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_CORE_unit1d.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_intr.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_WL_dec.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_active.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_sync2data.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_rdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_cvt_top.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_SG_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_p.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_Y_lut.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_csb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_lut.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_calculator.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_dual_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_x1_int.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_brdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\bdma\NV_NVDLA_BDMA_load.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_RDMA_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_unpack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_sg2pack_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_cmac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_bufferin.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_cmux.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_wl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_CALC_int8.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_CVT_cell.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_nrdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_sync3d.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_CSB_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_DAT_out.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_alu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cfgrom\NV_NVDLA_cfgrom.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_alu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_cmd.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdreq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dual_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_INTP_unit.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_fc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_single_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_c.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_wdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_WT_sp_arb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csb_master\NV_NVDLA_CSB_MASTER_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_sum.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_nan.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_core_reset.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_sync3d_s.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\slcg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_dmaif.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_idx_top.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_unpack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_prelu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_cfg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cfgrom\NV_NVDLA_CFGROM_rom.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\int_sum_block_tp1.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_c.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_in.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_cdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_MUL_unit.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_cmd.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cbuf\NV_NVDLA_CBUF_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_status.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_dat.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_single_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_LUT_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_relu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_inp_top.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_shared_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_delivery_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_cacc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_lut_line.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_out.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_delivery_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_RDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_trt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_glb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_img.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\bdma\NV_NVDLA_BDMA_cq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_C_int.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_RDMA_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_a.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_fifo_flop_based.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_x2_int.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_fifo_no_depth.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_sdp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\apb2csb\NV_NVDLA_apb2csb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_ic.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_dout.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_csc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_unpack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_mul.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_sg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_nan.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated products: Set(C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\csbMasterConfiguration.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_active.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_out$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_apb2csb.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_mac$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_in.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_mac.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_out.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_core.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_active$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_core$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\NV_NVDLA_CMAC_CORE_rt_in$$anon$1.class, C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes\nvdla\cmacConfiguration.class)[0m
[0m[[0m[0mdebug[0m] [0m[0mExternal API changes: API Changes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mModified binary dependencies: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial directly invalidated classes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver, nvdla.NV_NVDLA_SDP_REG_dualDriver, nvdla.NV_NVDLA_CACC_delivery_buffer, nvdla.NV_NVDLA_CDP_DP_mulDriver, nvdla.NV_NVDLA_partition_p, nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver, nvdla.NV_NVDLA_CDMA_regfile, nvdla.NV_NVDLA_CACC_regfile, nvdla.NV_NVDLA_SDP_HLS_C_intDriver, nvdla.NV_NVDLA_CMAC_CORE_activeDriver, nvdla.NV_NVDLA_CDP_DP_sumDriver, nvdla.NV_NVDLA_CDP_DP_mul, nvdla.NV_NVDLA_SDP_fifo_flop_based, nvdla.NV_NVDLA_SDP_CORE_pack, nvdla.NV_NVDLA_CSC_dual_reg, nvdla.NV_NVDLA_SDP_fifo_no_depth, nvdla.NV_NVDLA_CSC_sg, nvdla.NV_NVDLA_CSC_wlIO, nvdla.NV_NVDLA_SDP_reg, nvdla.NV_NVDLA_reset, nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver, nvdla.NV_NVDLA_CMAC_REG_dual, nvdla.NV_NVDLA_SDP_CORE_gateDriver, nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd, nvdla.NV_NVDLA_PDP_nanDriver, nvdla.NV_NVDLA_CDMA_imgDriver, nvdla.NV_NVDLA_SDP_HLS_Y_inp_top, nvdla.int_sum_block_tp1, nvdla.csbMasterConfiguration, nvdla.NV_NVDLA_SDP_HLS_Y_int_mul, nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver, nvdla.NV_NVDLA_CDMA_CVT_cellDriver, nvdla.NV_NVDLA_CACC_dual_reg, nvdla.NV_NVDLA_DMAIF_wr, nvdla.NV_NVDLA_SDP_WDMA_intr, nvdla.NV_NVDLA_SDP_HLS_c, nvdla.NV_NVDLA_CDMA_dma_muxDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver, nvdla.NV_NVDLA_CSC_sgDriver, nvdla.NV_NVDLA_CSC_wl, nvdla.NV_NVDLA_SDP_RDMA_reg, nvdla.NV_NVDLA_SDP_mrdma, nvdla.NV_NVDLA_SDP_RDMA_unpackDriver, nvdla.cbufConfiguration, nvdla.NV_NVDLA_PDP_WDMA_cmd, nvdla.NV_NVDLA_CDMA_regfileDriver, nvdla.NV_NVDLA_sdp, nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl, nvdla.NV_NVDLA_SDP_CORE_gate, nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80, nvdla.NV_NVDLA_CDP_RDMA_reg, nvdla.NV_NVDLA_SDP_HLS_Y_int_idx, nvdla.NV_NVDLA_cbufDriver, nvdla.NV_NVDLA_partition_aDriver, nvdla.NV_NVDLA_CSC_dlDriver, nvdla.NV_NVDLA_csc, nvdla.NV_NVDLA_SDP_cmux, nvdla.pdpConfiguration, nvdla.NV_NVDLA_SDP_coreDriver, nvdla.NV_NVDLA_sync3d, nvdla.NV_NVDLA_partition_a, nvdla.NV_NVDLA_PDP_reg, nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver, nvdla.NV_NVDLA_SDP_HLS_x2_intDriver, nvdla.NV_NVDLA_CDMA_dma_mux, nvdla.NV_NVDLA_SDP_WDMA_dat, nvdla.NV_NVDLA_cbuf.cbufImpl, nvdla.NV_NVDLA_PDP_nan, nvdla.NV_NVDLA_BDMA_cq, nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo, nvdla.NV_NVDLA_DMAIF_rdrsp, nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt, nvdla.NV_NVDLA_MCIF_CSB_reg, nvdla.NV_NVDLA_SDP_regDriver, nvdla.NV_NVDLA_SDP_wdma, nvdla.NV_NVDLA_CDMA_IMG_sgDriver, nvdla.NV_NVDLA_CMAC_CORE_macDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver, nvdla.NV_NVDLA_cacc, nvdla.NV_NVDLA_SDP_HLS_Y_int_alu, nvdla.NV_NVDLA_CDMA_dc, nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver, nvdla.NV_NVDLA_GLB_fc, nvdla.NV_NVDLA_CDP_DP_MUL_unit, nvdla.NV_NVDLA_SDP_RDMA_regDriver, nvdla.NV_NVDLA_CDMA_cvt, nvdla.NV_NVDLA_cbuf, nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver, nvdla.NV_NVDLA_CACC_REG_single, nvdla.NV_NVDLA_SDP_WDMA_datDriver, nvdla.NV_NVDLA_CACC_CALC_int8Driver, nvdla.NV_NVDLA_SDP_fifo, nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver, nvdla.NV_NVDLA_DMAIF_rdrspDriver, nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver, nvdla.NV_NVDLA_glbDriver, nvdla.NV_NVDLA_SDP_HLS_lut_expn, nvdla.NV_NVDLA_partition_cDriver, nvdla.NV_NVDLA_CMAC_REG_single, nvdla.NV_NVDLA_SDP_MRDMA_egDriver, nvdla.cdmaConfiguration, nvdla.NV_NVDLA_CDP_RDMA_regDriver, nvdla.NV_NVDLA_SDP_RDMA_gateDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver, nvdla.NV_NVDLA_CDMA_IMG_pack, nvdla.NV_NVDLA_CDMA_WT_sp_arb, nvdla.NV_NVDLA_CDMA_CVT_cell, nvdla.NV_NVDLA_cdmaIO, nvdla.NV_NVDLA_CDP_DP_LUT_ctrl, nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top, nvdla.NV_NVDLA_SDP_RDMA_gate, nvdla.NV_NVDLA_SDP_HLS_Y_int_core, nvdla.NV_NVDLA_CSC_WL_decDriver, nvdla.NV_NVDLA_partition_m, nvdla.NV_NVDLA_SDP_CORE_y, nvdla.NV_NVDLA_PDP_RDMA_REG_single, nvdla.NV_NVDLA_CACC_delivery_ctrl, nvdla.NV_NVDLA_SDP_WDMA_cmd, nvdla.NV_NVDLA_slcg, nvdla.NV_NVDLA_BDMA_loadDriver, nvdla.NV_NVDLA_partition_pDriver, nvdla.NV_NVDLA_SDP_mrdmaDriver, nvdla.NV_NVDLA_CSC_SG_fifo, nvdla.NV_NVDLA_CDP_slcg, nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver, nvdla.NV_NVDLA_SDP_rdma, nvdla.NV_NVDLA_CMAC_core, nvdla.NV_NVDLA_SDP_brdma, nvdla.NV_NVDLA_CMAC_CORE_cfg, nvdla.NV_NVDLA_SDP_CORE_packDriver, nvdla.NV_NVDLA_BDMA_reg, nvdla.NV_NVDLA_CDMA_single_reg, nvdla.NV_NVDLA_CDP_slcgDriver, nvdla.NV_NVDLA_SDP_RDMA_unpack, nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver, nvdla.NV_NVDLA_SDP_HLS_prelu, nvdla.NV_NVDLA_PDP_REG_dual, nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver, nvdla.NV_NVDLA_CMAC_reg, nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl, nvdla.NV_NVDLA_sync3d_s, nvdla.NV_NVDLA_cfgromDriver, nvdla.NV_NVDLA_CMAC_CORE_mac, nvdla.NV_NVDLA_CDMA_status, nvdla.NV_NVDLA_SDP_RDMA_egDriver, nvdla.NV_NVDLA_CMAC_CORE_active, nvdla.NV_NVDLA_DMAIF_rdreq, nvdla.NV_NVDLA_SDP_MRDMA_ig, nvdla.NV_NVDLA_SDP_HLS_cDriver, nvdla.NV_NVDLA_PDP_RDMA_regDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_inp, nvdla.NV_NVDLA_PDP_WDMA_cmdDriver, nvdla.NV_NVDLA_CACC_assembly_ctrl, nvdla.NV_NVDLA_partition_c, nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver, nvdla.NV_NVDLA_SDP_WDMA_DAT_out, nvdla.NV_NVDLA_CDMA_fifo, nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_alu, nvdla.NV_NVDLA_CDMA_IMG_sg, nvdla.NV_NVDLA_DMAIF_rdreqDriver, nvdla.NV_NVDLA_CDP_DP_lutDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl, nvdla.NV_NVDLA_CDP_RDMA_REG_single, nvdla.NV_NVDLA_CACC_assembly_buffer, nvdla.NV_NVDLA_CMAC_CORE_rt_in, nvdla.NV_NVDLA_SDP_rdmaDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_dual, nvdla.NV_NVDLA_SDP_RDMA_packDriver, nvdla.NV_NVDLA_SDP_HLS_sync2data, nvdla.NV_NVDLA_cdma, nvdla.NV_NVDLA_cmacDriver, nvdla.int_sum_block_tp1Driver, nvdla.NV_NVDLA_cmac, nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd, nvdla.NV_NVDLA_SDP_MRDMA_EG_din, nvdla.NV_NVDLA_SDP_nrdmaDriver, nvdla.nvdlaConfiguration, nvdla.NV_NVDLA_CDMA_shared_bufferDriver, nvdla.NV_NVDLA_sdpDriver, nvdla.NV_NVDLA_CACC_calculator, nvdla.NV_NVDLA_PDP_CORE_unit1d, nvdla.NV_NVDLA_CDMA_img, nvdla.NV_NVDLA_SDP_HLS_C_int, nvdla.NV_NVDLA_SDP_MRDMA_EG_dout, nvdla.NV_NVDLA_GLB_ic, nvdla.NV_NVDLA_glb, nvdla.NV_NVDLA_SDP_MRDMA_igDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver, nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_out, nvdla.NV_NVDLA_CDMA_statusDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver, nvdla.NV_NVDLA_PDP_REG_single, nvdla.NV_NVDLA_SDP_WDMA_cmdDriver, nvdla.NV_NVDLA_SDP_core, nvdla.NV_NVDLA_CSC_WL_dec, nvdla.NV_NVDLA_SDP_erdma, nvdla.NV_NVDLA_caccDriver, nvdla.NV_NVDLA_CDP_DP_nanDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver, nvdla.NV_NVDLA_CDP_DP_sum, nvdla.NV_NVDLA_CDMA_dcDriver, nvdla.NV_NVDLA_CDMA_dual_reg, nvdla.NV_NVDLA_SDP_brdmaDriver, nvdla.NV_NVDLA_core_reset, nvdla.NV_NVDLA_SDP_HLS_x1_int, nvdla.NV_NVDLA_CDMA_shared_buffer, nvdla.NV_NVDLA_CSC_single_reg, nvdla.NV_NVDLA_CDMA_cvtDriver, nvdla.NV_NVDLA_CMAC_coreDriver, nvdla.NV_NVDLA_CDMA_wtIO, nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver, nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver, nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat, nvdla.NV_NVDLA_SDP_REG_dual, nvdla.caccConfiguration, nvdla.NV_NVDLA_CACC_regDriver, nvdla.NV_NVDLA_SDP_RDMA_EG_ro, nvdla.NV_NVDLA_SDP_HLS_x2_int, nvdla.NV_NVDLA_CSC_wlDriver, nvdla.sdpConfiguration, nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl, nvdla.NV_NVDLA_CDMA_wtDriver, nvdla.NV_NVDLA_PDP_RDMA_reg, nvdla.NV_NVDLA_CDMA_IMG_packDriver, nvdla.NV_NVDLA_CDP_RDMA_REG_dual, nvdla.NV_NVDLA_SDP_CORE_Y_lut, nvdla.NV_NVDLA_SDP_WDMA_intrDriver, nvdla.NV_NVDLA_cfgrom, nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver, nvdla.NV_NVDLA_SDP_WDMA_DAT_in, nvdla.NV_NVDLA_SDP_RDMA_dmaif, nvdla.NV_NVDLA_SDP_cmuxDriver, nvdla.NV_NVDLA_SDP_RDMA_ig, nvdla.NV_NVDLA_SDP_fifo_no_depthDriver, nvdla.NV_NVDLA_SDP_HLS_x1_intDriver, nvdla.NV_NVDLA_CDP_DP_bufferin, nvdla.NV_NVDLA_SDP_HLS_Y_idx_top, nvdla.cmacConfiguration, nvdla.NV_NVDLA_SDP_WDMA_unpack, nvdla.NV_NVDLA_CDMA_IMG_ctrl, nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver, nvdla.NV_NVDLA_BDMA_cqDriver, nvdla.NV_NVDLA_apb2csb, nvdla.NV_NVDLA_GLB_CSB_reg, nvdla.NV_NVDLA_CDMA_dcIO, nvdla.NV_NVDLA_CSC_regfile, nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver, nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver, nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver, nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver, nvdla.NV_NVDLA_SDP_REG_single, nvdla.NV_NVDLA_PDP_regDriver, nvdla.NV_NVDLA_SDP_RDMA_pack, nvdla.NV_NVDLA_SDP_HLS_X_int_trt, nvdla.NV_NVDLA_SDP_REG_singleDriver, nvdla.NV_NVDLA_SDP_CORE_unpack, nvdla.NV_NVDLA_DMAIF_wrDriver, nvdla.NV_NVDLA_BDMA_load, nvdla.NV_NVDLA_CDP_DP_nan, nvdla.NV_NVDLA_CDMA_wt, nvdla.cdpConfiguration, nvdla.NV_NVDLA_apb2csbDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_single, nvdla.NV_NVDLA_CDP_DP_bufferinDriver, nvdla.NV_NVDLA_CACC_CALC_int8, nvdla.NV_NVDLA_CSC_dlIO, nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver, nvdla.NV_NVDLA_SDP_MRDMA_eg, nvdla.NV_NVDLA_CFGROM_rom, nvdla.NV_NVDLA_GLB_csb, nvdla.NV_NVDLA_SDP_nrdma, nvdla.NV_NVDLA_cscDriver, nvdla.NV_NVDLA_SDP_HLS_lut_line, nvdla.NV_NVDLA_CDP_DP_INTP_unit, nvdla.NV_NVDLA_SDP_erdmaDriver, nvdla.NV_NVDLA_CSC_dl, nvdla.NV_NVDLA_SDP_HLS_X_int_mul, nvdla.NV_NVDLA_SDP_CORE_yDriver, nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo, nvdla.cscConfiguration, nvdla.NV_NVDLA_PDP_RDMA_REG_dual, nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver, nvdla.NV_NVDLA_SDP_WDMA_unpackDriver, nvdla.NV_NVDLA_CDP_DP_lut, nvdla.NV_NVDLA_SDP_HLS_relu, nvdla.NV_NVDLA_partition_mDriver, nvdla.NV_NVDLA_SDP_RDMA_igDriver, nvdla.NV_NVDLA_cdmaDriver, nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver, nvdla.NV_NVDLA_CSC_regfileDriver, nvdla.NV_NVDLA_SDP_RDMA_eg, nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit, nvdla.NV_NVDLA_SDP_CORE_unpackDriver, nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo, nvdla.NV_NVDLA_SDP_wdmaDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_relu, nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver, nvdla.NV_NVDLA_PDP_CORE_unit1dDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m[0m
[0m[[0m[0mdebug[0m] [0m[0mSources indirectly invalidated by:[0m
[0m[[0m[0mdebug[0m] [0m[0m	product: Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_mac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_active.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csb_master\NV_NVDLA_CSB_MASTER_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_in.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_out.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\apb2csb\NV_NVDLA_apb2csb.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0m	binary dep: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0m	external source: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated classes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver, nvdla.NV_NVDLA_SDP_REG_dualDriver, nvdla.NV_NVDLA_CACC_delivery_buffer, nvdla.NV_NVDLA_CDP_DP_mulDriver, nvdla.NV_NVDLA_partition_p, nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver, nvdla.NV_NVDLA_CDMA_regfile, nvdla.NV_NVDLA_CACC_regfile, nvdla.NV_NVDLA_SDP_HLS_C_intDriver, nvdla.NV_NVDLA_CMAC_CORE_activeDriver, nvdla.NV_NVDLA_CDP_DP_sumDriver, nvdla.NV_NVDLA_CDP_DP_mul, nvdla.NV_NVDLA_SDP_fifo_flop_based, nvdla.NV_NVDLA_SDP_CORE_pack, nvdla.NV_NVDLA_CSC_dual_reg, nvdla.NV_NVDLA_SDP_fifo_no_depth, nvdla.NV_NVDLA_CSC_sg, nvdla.NV_NVDLA_CSC_wlIO, nvdla.NV_NVDLA_SDP_reg, nvdla.NV_NVDLA_reset, nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver, nvdla.NV_NVDLA_CMAC_REG_dual, nvdla.NV_NVDLA_SDP_CORE_gateDriver, nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd, nvdla.NV_NVDLA_PDP_nanDriver, nvdla.NV_NVDLA_CDMA_imgDriver, nvdla.NV_NVDLA_SDP_HLS_Y_inp_top, nvdla.int_sum_block_tp1, nvdla.csbMasterConfiguration, nvdla.NV_NVDLA_SDP_HLS_Y_int_mul, nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver, nvdla.NV_NVDLA_CDMA_CVT_cellDriver, nvdla.NV_NVDLA_CACC_dual_reg, nvdla.NV_NVDLA_DMAIF_wr, nvdla.NV_NVDLA_SDP_WDMA_intr, nvdla.NV_NVDLA_SDP_HLS_c, nvdla.NV_NVDLA_CDMA_dma_muxDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver, nvdla.NV_NVDLA_CSC_sgDriver, nvdla.NV_NVDLA_CSC_wl, nvdla.NV_NVDLA_SDP_RDMA_reg, nvdla.NV_NVDLA_SDP_mrdma, nvdla.NV_NVDLA_SDP_RDMA_unpackDriver, nvdla.cbufConfiguration, nvdla.NV_NVDLA_PDP_WDMA_cmd, nvdla.NV_NVDLA_CDMA_regfileDriver, nvdla.NV_NVDLA_sdp, nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl, nvdla.NV_NVDLA_SDP_CORE_gate, nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80, nvdla.NV_NVDLA_CDP_RDMA_reg, nvdla.NV_NVDLA_SDP_HLS_Y_int_idx, nvdla.NV_NVDLA_cbufDriver, nvdla.NV_NVDLA_partition_aDriver, nvdla.NV_NVDLA_CSC_dlDriver, nvdla.NV_NVDLA_csc, nvdla.NV_NVDLA_SDP_cmux, nvdla.pdpConfiguration, nvdla.NV_NVDLA_SDP_coreDriver, nvdla.NV_NVDLA_sync3d, nvdla.NV_NVDLA_partition_a, nvdla.NV_NVDLA_PDP_reg, nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver, nvdla.NV_NVDLA_SDP_HLS_x2_intDriver, nvdla.NV_NVDLA_CDMA_dma_mux, nvdla.NV_NVDLA_SDP_WDMA_dat, nvdla.NV_NVDLA_cbuf.cbufImpl, nvdla.NV_NVDLA_PDP_nan, nvdla.NV_NVDLA_BDMA_cq, nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo, nvdla.NV_NVDLA_DMAIF_rdrsp, nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt, nvdla.NV_NVDLA_MCIF_CSB_reg, nvdla.NV_NVDLA_SDP_regDriver, nvdla.NV_NVDLA_SDP_wdma, nvdla.NV_NVDLA_CDMA_IMG_sgDriver, nvdla.NV_NVDLA_CMAC_CORE_macDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver, nvdla.NV_NVDLA_cacc, nvdla.NV_NVDLA_SDP_HLS_Y_int_alu, nvdla.NV_NVDLA_CDMA_dc, nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver, nvdla.NV_NVDLA_GLB_fc, nvdla.NV_NVDLA_CDP_DP_MUL_unit, nvdla.NV_NVDLA_SDP_RDMA_regDriver, nvdla.NV_NVDLA_CDMA_cvt, nvdla.NV_NVDLA_cbuf, nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver, nvdla.NV_NVDLA_CACC_REG_single, nvdla.NV_NVDLA_SDP_WDMA_datDriver, nvdla.NV_NVDLA_CACC_CALC_int8Driver, nvdla.NV_NVDLA_SDP_fifo, nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver, nvdla.NV_NVDLA_DMAIF_rdrspDriver, nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver, nvdla.NV_NVDLA_glbDriver, nvdla.NV_NVDLA_SDP_HLS_lut_expn, nvdla.NV_NVDLA_partition_cDriver, nvdla.NV_NVDLA_CMAC_REG_single, nvdla.NV_NVDLA_SDP_MRDMA_egDriver, nvdla.cdmaConfiguration, nvdla.NV_NVDLA_CDP_RDMA_regDriver, nvdla.NV_NVDLA_SDP_RDMA_gateDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver, nvdla.NV_NVDLA_CDMA_IMG_pack, nvdla.NV_NVDLA_CDMA_WT_sp_arb, nvdla.NV_NVDLA_CDMA_CVT_cell, nvdla.NV_NVDLA_cdmaIO, nvdla.NV_NVDLA_CDP_DP_LUT_ctrl, nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top, nvdla.NV_NVDLA_SDP_RDMA_gate, nvdla.NV_NVDLA_SDP_HLS_Y_int_core, nvdla.NV_NVDLA_CSC_WL_decDriver, nvdla.NV_NVDLA_partition_m, nvdla.NV_NVDLA_SDP_CORE_y, nvdla.NV_NVDLA_PDP_RDMA_REG_single, nvdla.NV_NVDLA_CACC_delivery_ctrl, nvdla.NV_NVDLA_SDP_WDMA_cmd, nvdla.NV_NVDLA_slcg, nvdla.NV_NVDLA_BDMA_loadDriver, nvdla.NV_NVDLA_partition_pDriver, nvdla.NV_NVDLA_SDP_mrdmaDriver, nvdla.NV_NVDLA_CSC_SG_fifo, nvdla.NV_NVDLA_CDP_slcg, nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver, nvdla.NV_NVDLA_SDP_rdma, nvdla.NV_NVDLA_CMAC_core, nvdla.NV_NVDLA_SDP_brdma, nvdla.NV_NVDLA_CMAC_CORE_cfg, nvdla.NV_NVDLA_SDP_CORE_packDriver, nvdla.NV_NVDLA_BDMA_reg, nvdla.NV_NVDLA_CDMA_single_reg, nvdla.NV_NVDLA_CDP_slcgDriver, nvdla.NV_NVDLA_SDP_RDMA_unpack, nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver, nvdla.NV_NVDLA_SDP_HLS_prelu, nvdla.NV_NVDLA_PDP_REG_dual, nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver, nvdla.NV_NVDLA_CMAC_reg, nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl, nvdla.NV_NVDLA_sync3d_s, nvdla.NV_NVDLA_cfgromDriver, nvdla.NV_NVDLA_CMAC_CORE_mac, nvdla.NV_NVDLA_CDMA_status, nvdla.NV_NVDLA_SDP_RDMA_egDriver, nvdla.NV_NVDLA_CMAC_CORE_active, nvdla.NV_NVDLA_DMAIF_rdreq, nvdla.NV_NVDLA_SDP_MRDMA_ig, nvdla.NV_NVDLA_SDP_HLS_cDriver, nvdla.NV_NVDLA_PDP_RDMA_regDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_inp, nvdla.NV_NVDLA_PDP_WDMA_cmdDriver, nvdla.NV_NVDLA_CACC_assembly_ctrl, nvdla.NV_NVDLA_partition_c, nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver, nvdla.NV_NVDLA_SDP_WDMA_DAT_out, nvdla.NV_NVDLA_CDMA_fifo, nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_alu, nvdla.NV_NVDLA_CDMA_IMG_sg, nvdla.NV_NVDLA_DMAIF_rdreqDriver, nvdla.NV_NVDLA_CDP_DP_lutDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl, nvdla.NV_NVDLA_CDP_RDMA_REG_single, nvdla.NV_NVDLA_CACC_assembly_buffer, nvdla.NV_NVDLA_CMAC_CORE_rt_in, nvdla.NV_NVDLA_SDP_rdmaDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_dual, nvdla.NV_NVDLA_SDP_RDMA_packDriver, nvdla.NV_NVDLA_SDP_HLS_sync2data, nvdla.NV_NVDLA_cdma, nvdla.NV_NVDLA_cmacDriver, nvdla.int_sum_block_tp1Driver, nvdla.NV_NVDLA_cmac, nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd, nvdla.NV_NVDLA_SDP_MRDMA_EG_din, nvdla.NV_NVDLA_SDP_nrdmaDriver, nvdla.nvdlaConfiguration, nvdla.NV_NVDLA_CDMA_shared_bufferDriver, nvdla.NV_NVDLA_sdpDriver, nvdla.NV_NVDLA_CACC_calculator, nvdla.NV_NVDLA_PDP_CORE_unit1d, nvdla.NV_NVDLA_CDMA_img, nvdla.NV_NVDLA_SDP_HLS_C_int, nvdla.NV_NVDLA_SDP_MRDMA_EG_dout, nvdla.NV_NVDLA_GLB_ic, nvdla.NV_NVDLA_glb, nvdla.NV_NVDLA_SDP_MRDMA_igDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver, nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver, nvdla.NV_NVDLA_CMAC_CORE_rt_out, nvdla.NV_NVDLA_CDMA_statusDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver, nvdla.NV_NVDLA_PDP_REG_single, nvdla.NV_NVDLA_SDP_WDMA_cmdDriver, nvdla.NV_NVDLA_SDP_core, nvdla.NV_NVDLA_CSC_WL_dec, nvdla.NV_NVDLA_SDP_erdma, nvdla.NV_NVDLA_caccDriver, nvdla.NV_NVDLA_CDP_DP_nanDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver, nvdla.NV_NVDLA_CDP_DP_sum, nvdla.NV_NVDLA_CDMA_dcDriver, nvdla.NV_NVDLA_CDMA_dual_reg, nvdla.NV_NVDLA_SDP_brdmaDriver, nvdla.NV_NVDLA_core_reset, nvdla.NV_NVDLA_SDP_HLS_x1_int, nvdla.NV_NVDLA_CDMA_shared_buffer, nvdla.NV_NVDLA_CSC_single_reg, nvdla.NV_NVDLA_CDMA_cvtDriver, nvdla.NV_NVDLA_CMAC_coreDriver, nvdla.NV_NVDLA_CDMA_wtIO, nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver, nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver, nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver, nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat, nvdla.NV_NVDLA_SDP_REG_dual, nvdla.caccConfiguration, nvdla.NV_NVDLA_CACC_regDriver, nvdla.NV_NVDLA_SDP_RDMA_EG_ro, nvdla.NV_NVDLA_SDP_HLS_x2_int, nvdla.NV_NVDLA_CSC_wlDriver, nvdla.sdpConfiguration, nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl, nvdla.NV_NVDLA_CDMA_wtDriver, nvdla.NV_NVDLA_PDP_RDMA_reg, nvdla.NV_NVDLA_CDMA_IMG_packDriver, nvdla.NV_NVDLA_CDP_RDMA_REG_dual, nvdla.NV_NVDLA_SDP_CORE_Y_lut, nvdla.NV_NVDLA_SDP_WDMA_intrDriver, nvdla.NV_NVDLA_cfgrom, nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver, nvdla.NV_NVDLA_SDP_WDMA_DAT_in, nvdla.NV_NVDLA_SDP_RDMA_dmaif, nvdla.NV_NVDLA_SDP_cmuxDriver, nvdla.NV_NVDLA_SDP_RDMA_ig, nvdla.NV_NVDLA_SDP_fifo_no_depthDriver, nvdla.NV_NVDLA_SDP_HLS_x1_intDriver, nvdla.NV_NVDLA_CDP_DP_bufferin, nvdla.NV_NVDLA_SDP_HLS_Y_idx_top, nvdla.cmacConfiguration, nvdla.NV_NVDLA_SDP_WDMA_unpack, nvdla.NV_NVDLA_CDMA_IMG_ctrl, nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver, nvdla.NV_NVDLA_BDMA_cqDriver, nvdla.NV_NVDLA_apb2csb, nvdla.NV_NVDLA_GLB_CSB_reg, nvdla.NV_NVDLA_CDMA_dcIO, nvdla.NV_NVDLA_CSC_regfile, nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver, nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver, nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver, nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver, nvdla.NV_NVDLA_SDP_REG_single, nvdla.NV_NVDLA_PDP_regDriver, nvdla.NV_NVDLA_SDP_RDMA_pack, nvdla.NV_NVDLA_SDP_HLS_X_int_trt, nvdla.NV_NVDLA_SDP_REG_singleDriver, nvdla.NV_NVDLA_SDP_CORE_unpack, nvdla.NV_NVDLA_DMAIF_wrDriver, nvdla.NV_NVDLA_BDMA_load, nvdla.NV_NVDLA_CDP_DP_nan, nvdla.NV_NVDLA_CDMA_wt, nvdla.cdpConfiguration, nvdla.NV_NVDLA_apb2csbDriver, nvdla.NV_NVDLA_SDP_RDMA_REG_single, nvdla.NV_NVDLA_CDP_DP_bufferinDriver, nvdla.NV_NVDLA_CACC_CALC_int8, nvdla.NV_NVDLA_CSC_dlIO, nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver, nvdla.NV_NVDLA_SDP_MRDMA_eg, nvdla.NV_NVDLA_CFGROM_rom, nvdla.NV_NVDLA_GLB_csb, nvdla.NV_NVDLA_SDP_nrdma, nvdla.NV_NVDLA_cscDriver, nvdla.NV_NVDLA_SDP_HLS_lut_line, nvdla.NV_NVDLA_CDP_DP_INTP_unit, nvdla.NV_NVDLA_SDP_erdmaDriver, nvdla.NV_NVDLA_CSC_dl, nvdla.NV_NVDLA_SDP_HLS_X_int_mul, nvdla.NV_NVDLA_SDP_CORE_yDriver, nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo, nvdla.cscConfiguration, nvdla.NV_NVDLA_PDP_RDMA_REG_dual, nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver, nvdla.NV_NVDLA_SDP_WDMA_unpackDriver, nvdla.NV_NVDLA_CDP_DP_lut, nvdla.NV_NVDLA_SDP_HLS_relu, nvdla.NV_NVDLA_partition_mDriver, nvdla.NV_NVDLA_SDP_RDMA_igDriver, nvdla.NV_NVDLA_cdmaDriver, nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver, nvdla.NV_NVDLA_CSC_regfileDriver, nvdla.NV_NVDLA_SDP_RDMA_eg, nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit, nvdla.NV_NVDLA_SDP_CORE_unpackDriver, nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo, nvdla.NV_NVDLA_SDP_wdmaDriver, nvdla.NV_NVDLA_SDP_HLS_X_int_relu, nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver, nvdla.NV_NVDLA_PDP_CORE_unit1dDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mAll initially invalidated sources:Set(C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_m.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_WDMA_cmd.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\bdma\NV_NVDLA_BDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_lut_expn.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdrsp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_wr.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_reset.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_mul.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_mac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_mul.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_DAT_in.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_sg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_idx.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dma_mux.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_y.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_erdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_dl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_dual_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_single_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_din.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_inp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_relu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_wt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_EG_ro.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_MCIF_CSB_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_mrdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cbuf\NV_NVDLA_cbuf.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_LUT_CTRL_unit.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_CORE_unit1d.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_eg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\odif_nvdla\apb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_intr.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_WL_dec.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_active.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_sync2data.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_rdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_cvt_top.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_assembly_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_SG_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_p.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_Y_lut.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_csb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_lut.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_calculator.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_dual_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_x1_int.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_brdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\bdma\NV_NVDLA_BDMA_load.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_RDMA_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_unpack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_sg2pack_fifo.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_cmac.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_bufferin.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_cmux.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_wl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_CALC_int8.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_CVT_cell.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_nrdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_sync3d.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_CSB_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_DAT_out.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_alu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cfgrom\NV_NVDLA_cfgrom.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_alu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_cmd.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\nocif\NV_NVDLA_DMAIF_rdreq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_dual_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_INTP_unit.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_fc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_single_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_c.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_wdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_regfile.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_WT_sp_arb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csb_master\NV_NVDLA_CSB_MASTER_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_sum.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_nan.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_core.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_core_reset.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\car\NV_NVDLA_sync3d_s.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\slibs\slcg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_dmaif.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_idx_top.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_unpack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_prelu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_cfg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cfgrom\NV_NVDLA_CFGROM_rom.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\int_sum_block_tp1.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_RDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_c.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_in.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_cdma.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_MUL_unit.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_cmd.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cbuf\NV_NVDLA_CBUF_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_status.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_WDMA_dat.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_CSC_single_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_LUT_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_relu.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_pack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_inp_top.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_shared_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_delivery_buffer.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_RDMA_REG_dual.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_cacc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\pdp\NV_NVDLA_PDP_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_lut_line.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cmac\NV_NVDLA_CMAC_CORE_rt_out.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cacc\NV_NVDLA_CACC_delivery_ctrl.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_RDMA_reg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_X_int_trt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_glb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_img.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\bdma\NV_NVDLA_BDMA_cq.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_C_int.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_RDMA_REG_single.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\top\NV_NVDLA_partition_a.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_fifo_flop_based.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_x2_int.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_fifo_no_depth.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_sdp.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_ig.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\apb2csb\NV_NVDLA_apb2csb.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\glb\NV_NVDLA_GLB_ic.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_MRDMA_EG_dout.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_cvt.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\csc\NV_NVDLA_csc.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_CORE_unpack.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\sdp\NV_NVDLA_SDP_HLS_Y_int_mul.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdma\NV_NVDLA_CDMA_IMG_sg.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_config.scala, C:\Users\yuda\Desktop\soDLA\src\main\scala\nvdla\cdp\NV_NVDLA_CDP_DP_nan.scala)[0m
[0m[[0m[0mdebug[0m] [0m[0mRecompiling all 232 sources: invalidated sources (169) exceeded 50.0% of all sources[0m
[0m[[0m[0minfo[0m] [0m[0mCompiling 232 Scala sources to C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes ...[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0mGetting org.scala-sbt:compiler-bridge_2.12:1.1.1:compile for Scala 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] Running cached compiler fbb35b6 for Scala compiler version 2.12.4[0m
[0m[[0m[0mdebug[0m] [0m[0m[zinc] The Scala compiler is invoked with:[0m
[0m[[0m[0mdebug[0m] [0m[0m	-deprecation[0m
[0m[[0m[0mdebug[0m] [0m[0m	-feature[0m
[0m[[0m[0mdebug[0m] [0m[0m	-unchecked[0m
[0m[[0m[0mdebug[0m] [0m[0m	-language:reflectiveCalls[0m
[0m[[0m[0mdebug[0m] [0m[0m	-Xsource:2.11[0m
[0m[[0m[0mdebug[0m] [0m[0m	-bootclasspath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Program Files\Java\jre1.8.0_221\lib\resources.jar;C:\Program Files\Java\jre1.8.0_221\lib\rt.jar;C:\Program Files\Java\jre1.8.0_221\lib\sunrsasign.jar;C:\Program Files\Java\jre1.8.0_221\lib\jsse.jar;C:\Program Files\Java\jre1.8.0_221\lib\jce.jar;C:\Program Files\Java\jre1.8.0_221\lib\charsets.jar;C:\Program Files\Java\jre1.8.0_221\lib\jfr.jar;C:\Program Files\Java\jre1.8.0_221\classes;C:\Users\yuda\.sbt\boot\scala-2.12.4\lib\scala-library.jar[0m
[0m[[0m[0mdebug[0m] [0m[0m	-classpath[0m
[0m[[0m[0mdebug[0m] [0m[0m	C:\Users\yuda\Desktop\soDLA\target\scala-2.12\classes;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\chisel3_2.12\jars\chisel3_2.12-3.1.7.jar;C:\Users\yuda\.sbt\boot\scala-2.12.4\lib\scala-reflect.jar;C:\Users\yuda\.ivy2\cache\com.github.scopt\scopt_2.12\jars\scopt_2.12-3.7.0.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\firrtl_2.12\jars\firrtl_2.12-1.1.7.jar;C:\Users\yuda\.ivy2\cache\org.antlr\antlr4\jars\antlr4-4.7.1.jar;C:\Users\yuda\.ivy2\cache\org.antlr\antlr4-runtime\jars\antlr4-runtime-4.7.1.jar;C:\Users\yuda\.ivy2\cache\org.antlr\antlr-runtime\jars\antlr-runtime-3.5.2.jar;C:\Users\yuda\.ivy2\cache\org.antlr\ST4\jars\ST4-4.0.8.jar;C:\Users\yuda\.ivy2\cache\org.abego.treelayout\org.abego.treelayout.core\bundles\org.abego.treelayout.core-1.0.3.jar;C:\Users\yuda\.ivy2\cache\org.glassfish\javax.json\bundles\javax.json-1.0.4.jar;C:\Users\yuda\.ivy2\cache\com.ibm.icu\icu4j\jars\icu4j-58.2.jar;C:\Users\yuda\.ivy2\cache\com.typesafe.scala-logging\scala-logging_2.12\bundles\scala-logging_2.12-3.7.2.jar;C:\Users\yuda\.ivy2\cache\org.slf4j\slf4j-api\jars\slf4j-api-1.7.25.jar;C:\Users\yuda\.ivy2\cache\ch.qos.logback\logback-classic\jars\logback-classic-1.2.3.jar;C:\Users\yuda\.ivy2\cache\ch.qos.logback\logback-core\jars\logback-core-1.2.3.jar;C:\Users\yuda\.ivy2\cache\net.jcazevedo\moultingyaml_2.12\jars\moultingyaml_2.12-0.4.0.jar;C:\Users\yuda\.ivy2\cache\com.github.nscala-time\nscala-time_2.12\jars\nscala-time_2.12-2.14.0.jar;C:\Users\yuda\.ivy2\cache\joda-time\joda-time\jars\joda-time-2.9.4.jar;C:\Users\yuda\.ivy2\cache\org.joda\joda-convert\jars\joda-convert-1.2.jar;C:\Users\yuda\.ivy2\cache\org.yaml\snakeyaml\bundles\snakeyaml-1.17.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-native_2.12\jars\json4s-native_2.12-3.5.3.jar;C:\Users\yuda\.ivy2\cache\com.thoughtworks.paranamer\paranamer\bundles\paranamer-2.8.jar;C:\Users\yuda\.ivy2\cache\org.scala-lang.modules\scala-xml_2.12\bundles\scala-xml_2.12-1.0.6.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\chisel-iotesters_2.12\jars\chisel-iotesters_2.12-1.2.9.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\firrtl-interpreter_2.12\jars\firrtl-interpreter_2.12-1.1.7.jar;C:\Users\yuda\.ivy2\cache\org.scalatest\scalatest_2.12\bundles\scalatest_2.12-3.0.1.jar;C:\Users\yuda\.ivy2\cache\org.scalactic\scalactic_2.12\bundles\scalactic_2.12-3.0.1.jar;C:\Users\yuda\.ivy2\cache\org.scala-lang.modules\scala-parser-combinators_2.12\bundles\scala-parser-combinators_2.12-1.0.4.jar;C:\Users\yuda\.ivy2\cache\org.scalacheck\scalacheck_2.12\jars\scalacheck_2.12-1.13.4.jar;C:\Users\yuda\.ivy2\cache\org.scala-sbt\test-interface\jars\test-interface-1.0.jar;C:\Users\yuda\.ivy2\cache\org.scala-lang.modules\scala-jline\bundles\scala-jline-2.12.1.jar;C:\Users\yuda\.ivy2\cache\org.fusesource.jansi\jansi\jars\jansi-1.11.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\treadle_2.12\jars\treadle_2.12-1.0.5.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-jackson_2.12\jars\json4s-jackson_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-core_2.12\jars\json4s-core_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-ast_2.12\jars\json4s-ast_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\org.json4s\json4s-scalap_2.12\jars\json4s-scalap_2.12-3.6.1.jar;C:\Users\yuda\.ivy2\cache\com.fasterxml.jackson.core\jackson-databind\bundles\jackson-databind-2.9.6.jar;C:\Users\yuda\.ivy2\cache\com.fasterxml.jackson.core\jackson-annotations\bundles\jackson-annotations-2.9.0.jar;C:\Users\yuda\.ivy2\cache\com.fasterxml.jackson.core\jackson-core\bundles\jackson-core-2.9.6.jar;C:\Users\yuda\.ivy2\cache\edu.berkeley.cs\dsptools_2.12\jars\dsptools_2.12-1.1.6.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\spire_2.12\jars\spire_2.12-0.14.1.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\spire-macros_2.12\jars\spire-macros_2.12-0.14.1.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\machinist_2.12\jars\machinist_2.12-0.6.1.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\algebra_2.12\jars\algebra_2.12-0.7.0.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\cats-kernel_2.12\jars\cats-kernel_2.12-0.9.0.jar;C:\Users\yuda\.ivy2\cache\org.scalanlp\breeze_2.12\jars\breeze_2.12-0.13.2.jar;C:\Users\yuda\.ivy2\cache\org.scalanlp\breeze-macros_2.12\jars\breeze-macros_2.12-0.13.2.jar;C:\Users\yuda\.ivy2\cache\com.github.fommil.netlib\core\jars\core-1.1.2.jar;C:\Users\yuda\.ivy2\cache\net.sourceforge.f2j\arpack_combined_all\jars\arpack_combined_all-0.1.jar;C:\Users\yuda\.ivy2\cache\net.sf.opencsv\opencsv\jars\opencsv-2.3.jar;C:\Users\yuda\.ivy2\cache\com.github.rwl\jtransforms\jars\jtransforms-2.4.0.jar;C:\Users\yuda\.ivy2\cache\junit\junit\jars\junit-4.8.2.jar;C:\Users\yuda\.ivy2\cache\org.apache.commons\commons-math3\jars\commons-math3-3.2.jar;C:\Users\yuda\.ivy2\cache\org.spire-math\spire_2.12\jars\spire_2.12-0.13.0.jar;C:\Users\yuda\.ivy2\cache\org.spire-math\spire-macros_2.12\jars\spire-macros_2.12-0.13.0.jar;C:\Users\yuda\.ivy2\cache\com.chuusai\shapeless_2.12\bundles\shapeless_2.12-2.3.2.jar;C:\Users\yuda\.ivy2\cache\org.typelevel\macro-compat_2.12\jars\macro-compat_2.12-1.1.1.jar[0m
[0m[[0m[0mdebug[0m] [0m[0mScala compilation took 17.6626169 s[0m
[0m[[0m[0minfo[0m] [0m[0mDone compiling.[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.cdmaConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.cdmaConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.cdmaConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.cdmaConfiguration,ModifiedNames(changes = UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(ATMKBW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(cdmaConfiguration,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(nvdla;cdmaConfiguration;init;,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.cdmaConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(ATMKBW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(cdmaConfiguration,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(nvdla;cdmaConfiguration;init;,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.cdmaConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_calculator...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_calculator)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_calculator)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_calculator,ModifiedNames(changes = UsedName(mac_b2accu_mask,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_in_en_mask,[Default]), UsedName(suggestName,[Default]), UsedName(dlv_mask,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(dp2reg_sat_count,[Default]), UsedName(mac_b2accu_mode,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_is_wg,[Default]), UsedName(nvdla;NV_NVDLA_CACC_calculator;init;,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(nvdla_cell_clk,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(mac_b2accu_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(NV_NVDLA_CACC_calculator,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mac_b2accu_pvld,[Default]), UsedName(mac_a2accu_pvld,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(accu_ctrl_ram_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(dlv_data,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mac_a2accu_mask,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dlv_valid,[Default]), UsedName(abuf_wr_data,[Default]), UsedName(_closed,[Default]), UsedName(abuf_wr_addr,[Default]), UsedName(mac_a2accu_data,[Default]), UsedName(dlv_pd,[Default]), UsedName(mac_a2accu_mode,[Default]), UsedName(circuitName,[Default]), UsedName(accu_ctrl_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(accu_ctrl_valid,[Default]), UsedName(abuf_wr_en,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(abuf_rd_data,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_calculator has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(mac_b2accu_mask,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_in_en_mask,[Default]), UsedName(suggestName,[Default]), UsedName(dlv_mask,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(dp2reg_sat_count,[Default]), UsedName(mac_b2accu_mode,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_is_wg,[Default]), UsedName(nvdla;NV_NVDLA_CACC_calculator;init;,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(nvdla_cell_clk,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(mac_b2accu_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(NV_NVDLA_CACC_calculator,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mac_b2accu_pvld,[Default]), UsedName(mac_a2accu_pvld,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(accu_ctrl_ram_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(dlv_data,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mac_a2accu_mask,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dlv_valid,[Default]), UsedName(abuf_wr_data,[Default]), UsedName(_closed,[Default]), UsedName(abuf_wr_addr,[Default]), UsedName(mac_a2accu_data,[Default]), UsedName(dlv_pd,[Default]), UsedName(mac_a2accu_mode,[Default]), UsedName(circuitName,[Default]), UsedName(accu_ctrl_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(accu_ctrl_valid,[Default]), UsedName(abuf_wr_en,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(abuf_rd_data,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_calculator)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_regfile...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_regfile,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_weight_format,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(csb2csc_req_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_datain_width_ext,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_datain_channel_ext,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_weight_reuse,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_y_extension,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_pad_value,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(reg2dp_wmb_bytes,[Default]), UsedName(dp2reg_done,[Default]), UsedName(csc2csb_resp_pd,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_x_dilation_ext,[Default]), UsedName(reg2dp_weight_kernel,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_weight_bank,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_pad_top,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(reg2dp_datain_height_ext,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_atomics,[Default]), UsedName(reg2dp_weight_width_ext,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_dataout_channel,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_dataout_height,[Default]), UsedName(reg2dp_conv_y_stride_ext,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(csb2csc_req_pvld,[Default]), UsedName(reg2dp_weight_channel_ext,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(reg2dp_weight_height_ext,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_weight_bytes,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(csc2csb_resp_valid,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_rls_slices,[Default]), UsedName(initializeInParent,[Default]), UsedName(NV_NVDLA_CSC_regfile,[Default]), UsedName(reg2dp_skip_weight_rls,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(nvdla;NV_NVDLA_CSC_regfile;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_dataout_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(csb2csc_req_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_pra_truncate,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_conv_x_stride_ext,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_y_dilation_ext,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_pad_left,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_regfile has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_p...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_p)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_p)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_p,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(sdp_n2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(sdp_b2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(name,[Default]), UsedName(mcif2sdp_e_rd_rsp_pd,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(csb2sdp_req_pd,[Default]), UsedName(addId,[Default]), UsedName(sdp_n2cvif_rd_req_pd,[Default]), UsedName(getPorts,[Default]), UsedName(sdp_n2cvif_rd_req_valid,[Default]), UsedName(sdp2cvif_wr_req_pd,[Default]), UsedName(sdp2csb_resp_pd,[Default]), UsedName(suggestName,[Default]), UsedName(sdp2mcif_wr_req_pd,[Default]), UsedName(sdp2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(csb2sdp_rdma_req_prdy,[Default]), UsedName(u_NV_NVDLA_sdp,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(sdp_e2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_valid,[Default]), UsedName(toNamed,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(cvif2sdp_n_rd_rsp_valid,[Default]), UsedName(sdp_n2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2sdp_e_rd_rsp_ready,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cvif2sdp_b_rd_rsp_pd,[Default]), UsedName(getCommands,[Default]), UsedName(sdp_b2mcif_rd_req_ready,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(u_global_clk_ovr_on_sync,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_pd,[Default]), UsedName(forceName,[Default]), UsedName(cvif2sdp_b_rd_rsp_valid,[Default]), UsedName(sdp_b2mcif_rd_req_valid,[Default]), UsedName(sdp_rdma2csb_resp_valid,[Default]), UsedName(nvdla_clk_ovr_on,[Default]), UsedName(instanceName,[Default]), UsedName(mcif2sdp_b_rd_rsp_ready,[Default]), UsedName(cvif2sdp_e_rd_rsp_pd,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(cvif2sdp_wr_rsp_complete,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_partition_p;init;,[Default]), UsedName(sdp_n2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_b_rd_rsp_valid,[Default]), UsedName(cvif2sdp_b_rd_rsp_ready,[Default]), UsedName(sdp_e2cvif_rd_req_ready,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(global_clk_ovr_on,[Default]), UsedName(toString,[Default]), UsedName(sdp2csb_resp_valid,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(mcif2sdp_n_rd_rsp_pd,[Default]), UsedName(sdp2mcif_wr_req_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(sdp2pdp_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_n_rd_rsp_ready,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(sdp_e2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_ready,[Default]), UsedName(sdp2pdp_valid,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sdp_e2mcif_rd_req_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(test_mode,[Default]), UsedName(sdp2mcif_wr_req_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp_e2cvif_rd_req_valid,[Default]), UsedName(sdp2cvif_wr_req_ready,[Default]), UsedName(_closed,[Default]), UsedName(sdp_e2cvif_rd_req_pd,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(cvif2sdp_e_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(cvif2sdp_n_rd_rsp_pd,[Default]), UsedName(pathName,[Default]), UsedName(mcif2sdp_e_rd_rsp_valid,[Default]), UsedName(csb2sdp_rdma_req_pd,[Default]), UsedName(sdp_rdma2csb_resp_pd,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(mcif2sdp_b_rd_rsp_pd,[Default]), UsedName(annotate,[Default]), UsedName(sdp_e2mcif_rd_req_ready,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(csb2sdp_rdma_req_pvld,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_partition_p,[Default]), UsedName(ne,[Default]), UsedName(sdp2pdp_ready,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(sdp2cvif_wr_req_valid,[Default]), UsedName(dla_reset_rstn,[Default]), UsedName(io,[Default]), UsedName(sdp_n2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(sdp_e2mcif_rd_req_pd,[Default]), UsedName(sdp_n2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName(cvif2sdp_e_rd_rsp_valid,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_b2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(u_dla_clk_ovr_on_sync,[Default]), UsedName(sdp_b2mcif_rd_req_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sdp_n2mcif_rd_req_ready,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mcif2sdp_n_rd_rsp_valid,[Default]), UsedName(getPublicFields,[Default]), UsedName(csb2sdp_req_prdy,[Default]), UsedName(csb2sdp_req_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(direct_reset_,[Default]), UsedName(IO,[Default]), UsedName(u_partition_p_reset,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_p has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_p)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_lut_le_slope_uflow_scale,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(reg2dp_bs_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_cvt_shift,[Default]), UsedName(reg2dp_bn_bypass,[Default]), UsedName(reg2dp_lut_le_index_offset,[Default]), UsedName(##,[Default]), UsedName(reg2dp_ew_mul_prelu,[Default]), UsedName(reg2dp_bs_bypass,[Default]), UsedName(csb2sdp_req_pd,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_lut_int_data_wr,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(reg2dp_bn_alu_algo,[Default]), UsedName(reg2dp_bn_mul_bypass,[Default]), UsedName(reg2dp_ecore_slcg_op_en,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(reg2dp_bn_mul_src,[Default]), UsedName(sdp2csb_resp_pd,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_shift,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(NV_NVDLA_SDP_reg,[Default]), UsedName(compileOptions,[Default]), UsedName(reg2dp_lut_le_function,[Default]), UsedName(reg2dp_perf_sat_en,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_lut_le_end,[Default]), UsedName(toNamed,[Default]), UsedName(dp2reg_lut_oflow,[Default]), UsedName(reg2dp_ncore_slcg_op_en,[Default]), UsedName(reg2dp_ew_alu_cvt_bypass,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(reg2dp_bs_alu_shift_value,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_SDP_reg;init;,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(reg2dp_bn_alu_operand,[Default]), UsedName(reg2dp_lut_le_start,[Default]), UsedName(parentModName,[Default]), UsedName(dp2reg_out_saturation,[Default]), UsedName(reg2dp_lut_int_data,[Default]), UsedName(reg2dp_bs_mul_src,[Default]), UsedName(reg2dp_bn_mul_shift_value,[Default]), UsedName(reg2dp_bs_alu_algo,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_lut_oflow_priority,[Default]), UsedName(reg2dp_dst_batch_stride,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bs_mul_prelu,[Default]), UsedName(reg2dp_lut_int_access_type,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_perf_lut_en,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(reg2dp_bn_alu_src,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_bn_alu_shift_value,[Default]), UsedName(reg2dp_lut_lo_end,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(reg2dp_bcore_slcg_op_en,[Default]), UsedName(dp2reg_done,[Default]), UsedName(dp2reg_wdma_stall,[Default]), UsedName(reg2dp_ew_mul_cvt_offset,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_lut_slcg_en,[Default]), UsedName(sdp2csb_resp_valid,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_ew_mul_cvt_bypass,[Default]), UsedName(reg2dp_bs_mul_operand,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(reg2dp_lut_hybrid_priority,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_bn_mul_prelu,[Default]), UsedName(_namespace,[Default]), UsedName(reg2dp_bn_mul_operand,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_status_nan_output_num,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(reg2dp_lut_le_index_select,[Default]), UsedName(reg2dp_bs_alu_bypass,[Default]), UsedName(reg2dp_bs_mul_shift_value,[Default]), UsedName(reg2dp_bn_alu_bypass,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_ew_mul_cvt_truncate,[Default]), UsedName(dp2reg_lut_uflow,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_wdma_slcg_op_en,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_lut_le_slope_oflow_shift,[Default]), UsedName(reg2dp_ew_alu_src,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(reg2dp_lut_le_slope_oflow_scale,[Default]), UsedName(reg2dp_lut_le_slope_uflow_shift,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_lut_int_table_id,[Default]), UsedName(reg2dp_ew_mul_operand,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(reg2dp_ew_alu_cvt_truncate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_ew_alu_cvt_offset,[Default]), UsedName(io,[Default]), UsedName(reg2dp_ew_alu_operand,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_ew_mul_bypass,[Default]), UsedName(reg2dp_lut_lo_start,[Default]), UsedName(dp2reg_lut_lo_hit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_bn_relu_bypass,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(reg2dp_ew_mul_src,[Default]), UsedName(getIds,[Default]), UsedName(reg2dp_bs_relu_bypass,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_scale,[Default]), UsedName(dp2reg_status_unequal,[Default]), UsedName(reg2dp_lut_int_addr,[Default]), UsedName(dp2reg_lut_int_data,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(reg2dp_ew_truncate,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_ew_alu_cvt_scale,[Default]), UsedName(reg2dp_bs_alu_operand,[Default]), UsedName(reg2dp_ew_lut_bypass,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_lut_lo_index_select,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(csb2sdp_req_prdy,[Default]), UsedName(dp2reg_lut_hybrid,[Default]), UsedName(reg2dp_ew_mul_cvt_scale,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_shift,[Default]), UsedName(csb2sdp_req_pvld,[Default]), UsedName(dp2reg_lut_le_hit,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_lut_uflow_priority,[Default]), UsedName(reg2dp_bs_mul_bypass,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_scale,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_lut_le_slope_uflow_scale,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(reg2dp_bs_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_cvt_shift,[Default]), UsedName(reg2dp_bn_bypass,[Default]), UsedName(reg2dp_lut_le_index_offset,[Default]), UsedName(##,[Default]), UsedName(reg2dp_ew_mul_prelu,[Default]), UsedName(reg2dp_bs_bypass,[Default]), UsedName(csb2sdp_req_pd,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_lut_int_data_wr,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(reg2dp_bn_alu_algo,[Default]), UsedName(reg2dp_bn_mul_bypass,[Default]), UsedName(reg2dp_ecore_slcg_op_en,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(reg2dp_bn_mul_src,[Default]), UsedName(sdp2csb_resp_pd,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_shift,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(NV_NVDLA_SDP_reg,[Default]), UsedName(compileOptions,[Default]), UsedName(reg2dp_lut_le_function,[Default]), UsedName(reg2dp_perf_sat_en,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_lut_le_end,[Default]), UsedName(toNamed,[Default]), UsedName(dp2reg_lut_oflow,[Default]), UsedName(reg2dp_ncore_slcg_op_en,[Default]), UsedName(reg2dp_ew_alu_cvt_bypass,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(reg2dp_bs_alu_shift_value,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_SDP_reg;init;,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(reg2dp_bn_alu_operand,[Default]), UsedName(reg2dp_lut_le_start,[Default]), UsedName(parentModName,[Default]), UsedName(dp2reg_out_saturation,[Default]), UsedName(reg2dp_lut_int_data,[Default]), UsedName(reg2dp_bs_mul_src,[Default]), UsedName(reg2dp_bn_mul_shift_value,[Default]), UsedName(reg2dp_bs_alu_algo,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_lut_oflow_priority,[Default]), UsedName(reg2dp_dst_batch_stride,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bs_mul_prelu,[Default]), UsedName(reg2dp_lut_int_access_type,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_perf_lut_en,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(reg2dp_bn_alu_src,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_bn_alu_shift_value,[Default]), UsedName(reg2dp_lut_lo_end,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(reg2dp_bcore_slcg_op_en,[Default]), UsedName(dp2reg_done,[Default]), UsedName(dp2reg_wdma_stall,[Default]), UsedName(reg2dp_ew_mul_cvt_offset,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_lut_slcg_en,[Default]), UsedName(sdp2csb_resp_valid,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_ew_mul_cvt_bypass,[Default]), UsedName(reg2dp_bs_mul_operand,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(reg2dp_lut_hybrid_priority,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_bn_mul_prelu,[Default]), UsedName(_namespace,[Default]), UsedName(reg2dp_bn_mul_operand,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_status_nan_output_num,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(reg2dp_lut_le_index_select,[Default]), UsedName(reg2dp_bs_alu_bypass,[Default]), UsedName(reg2dp_bs_mul_shift_value,[Default]), UsedName(reg2dp_bn_alu_bypass,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_ew_mul_cvt_truncate,[Default]), UsedName(dp2reg_lut_uflow,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_wdma_slcg_op_en,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_lut_le_slope_oflow_shift,[Default]), UsedName(reg2dp_ew_alu_src,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(reg2dp_lut_le_slope_oflow_scale,[Default]), UsedName(reg2dp_lut_le_slope_uflow_shift,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_lut_int_table_id,[Default]), UsedName(reg2dp_ew_mul_operand,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(reg2dp_ew_alu_cvt_truncate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_ew_alu_cvt_offset,[Default]), UsedName(io,[Default]), UsedName(reg2dp_ew_alu_operand,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_ew_mul_bypass,[Default]), UsedName(reg2dp_lut_lo_start,[Default]), UsedName(dp2reg_lut_lo_hit,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_bn_relu_bypass,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(reg2dp_ew_mul_src,[Default]), UsedName(getIds,[Default]), UsedName(reg2dp_bs_relu_bypass,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_scale,[Default]), UsedName(dp2reg_status_unequal,[Default]), UsedName(reg2dp_lut_int_addr,[Default]), UsedName(dp2reg_lut_int_data,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(reg2dp_ew_truncate,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_ew_alu_cvt_scale,[Default]), UsedName(reg2dp_bs_alu_operand,[Default]), UsedName(reg2dp_ew_lut_bypass,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_lut_lo_index_select,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(csb2sdp_req_prdy,[Default]), UsedName(dp2reg_lut_hybrid,[Default]), UsedName(reg2dp_ew_mul_cvt_scale,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_shift,[Default]), UsedName(csb2sdp_req_pvld,[Default]), UsedName(dp2reg_lut_le_hit,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_lut_uflow_priority,[Default]), UsedName(reg2dp_bs_mul_bypass,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_scale,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_assembly_buffer...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_assembly_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_assembly_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_assembly_buffer,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(abuf_rd_addr,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(abuf_rd_en,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(abuf_wr_data,[Default]), UsedName(_closed,[Default]), UsedName(abuf_wr_addr,[Default]), UsedName(nvdla;NV_NVDLA_CACC_assembly_buffer;init;,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_CACC_assembly_buffer,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(abuf_wr_en,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(abuf_rd_data,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_assembly_buffer has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(abuf_rd_addr,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(abuf_rd_en,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(abuf_wr_data,[Default]), UsedName(_closed,[Default]), UsedName(abuf_wr_addr,[Default]), UsedName(nvdla;NV_NVDLA_CACC_assembly_buffer;init;,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_CACC_assembly_buffer,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(abuf_wr_en,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(abuf_rd_data,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_assembly_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_DMAIF_rdrsp...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_DMAIF_rdrsp)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_DMAIF_rdrsp)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_DMAIF_rdrsp,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(mcif_rd_rsp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(dmaif_rd_rsp_prdy,[Default]), UsedName(dmaif_rd_rsp_pvld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(mcif_rd_rsp_pd,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(dmaif_rd_rsp_pd,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mcif_rd_rsp_valid,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(cvif_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(cvif_rd_rsp_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(nvdla;NV_NVDLA_DMAIF_rdrsp;init;,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(DMABW,[Default]), UsedName(NV_NVDLA_DMAIF_rdrsp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cvif_rd_rsp_ready,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_DMAIF_rdrsp has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(mcif_rd_rsp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(dmaif_rd_rsp_prdy,[Default]), UsedName(dmaif_rd_rsp_pvld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(mcif_rd_rsp_pd,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(dmaif_rd_rsp_pd,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mcif_rd_rsp_valid,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(cvif_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(cvif_rd_rsp_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(nvdla;NV_NVDLA_DMAIF_rdrsp;init;,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(DMABW,[Default]), UsedName(NV_NVDLA_DMAIF_rdrsp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cvif_rd_rsp_ready,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_DMAIF_rdrsp)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_x1_int...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_x1_int)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_x1_int)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_x1_int,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_x1_int;init;,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_mul_shift_value,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(cfg_alu_shift_value,[Default]), UsedName(reset,[Default]), UsedName(NV_NVDLA_SDP_HLS_x1_int,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(chn_alu_op,[Default]), UsedName(chn_data_in,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(chn_data_out,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cfg_relu_bypass,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_x1_int has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_x1_int;init;,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_mul_shift_value,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(cfg_alu_shift_value,[Default]), UsedName(reset,[Default]), UsedName(NV_NVDLA_SDP_HLS_x1_int,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(chn_alu_op,[Default]), UsedName(chn_data_in,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(chn_data_out,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cfg_relu_bypass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_x1_int)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_cvt_topDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_coreDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_coreDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_CMAC_coreDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_coreDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_BDMA_cqDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_BDMA_cqDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_BDMA_cqDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_BDMA_cqDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_BDMA_cqDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_BDMA_cqDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_BDMA_cqDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_BDMA_cqDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_unpackDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_unpackDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_CORE_unpackDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_unpackDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_CORE_unpackDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_rdmaDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_rdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_rdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_rdmaDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_rdmaDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_rdmaDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_rdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_BDMA_load...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_BDMA_load)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_BDMA_load)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_BDMA_load,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(bdma2mcif_rd_req_valid,[Default]), UsedName(bdma2mcif_rd_req_ready,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_dst_surf_stride,[Default]), UsedName(st2ld_load_idle,[Default]), UsedName(NV_NVDLA_BDMA_load,[Default]), UsedName(bdma2cvif_rd_req_pd,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_repeat_number,[Default]), UsedName(ld2csb_grp1_dma_stall_inc,[Default]), UsedName(##,[Default]), UsedName(csb2ld_vld,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_dst_addr_high_v8,[Default]), UsedName(ld2st_wr_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(ld2csb_idle,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(csb2ld_rdy,[Default]), UsedName(portsContains,[Default]), UsedName(bdma2cvif_rd_req_valid,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(ld2st_wr_idle,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_cmd_interrupt_ptr,[Default]), UsedName(ld2st_wr_pd,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_cmd_dst_ram_type,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(ld2csb_grp0_dma_stall_inc,[Default]), UsedName(bdma2mcif_rd_req_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_src_addr_low_v32,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_cmd_src_ram_type,[Default]), UsedName(reg2dp_cmd_interrupt,[Default]), UsedName(addPostnameHook,[Default]), UsedName(bdma2cvif_rd_req_ready,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_src_addr_high_v8,[Default]), UsedName(pathName,[Default]), UsedName(ld2gate_slcg_en,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_src_surf_stride,[Default]), UsedName(ld2st_wr_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nvdla;NV_NVDLA_BDMA_load;init;,[Default]), UsedName(reg2dp_line_repeat_number,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_line_size,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_dst_addr_low_v32,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_BDMA_load has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_BDMA_load)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_unpack...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_unpack,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(IW,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(IHW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_SDP_WDMA_unpack;init;,[Default]), UsedName(NV_NVDLA_SDP_WDMA_unpack,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(OW,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(cfg_dp_8,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_unpack has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(IW,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(IHW,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_SDP_WDMA_unpack;init;,[Default]), UsedName(NV_NVDLA_SDP_WDMA_unpack,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(OW,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(cfg_dp_8,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_lutDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_lutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_lutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_lutDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_CDP_DP_lutDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_lutDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_lutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_dlDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_dlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_dlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_dlDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_CSC_dlDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_dlDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_dlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_brdmaDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_brdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_brdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_brdmaDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(NV_NVDLA_SDP_brdmaDriver,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_brdmaDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_brdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_dcDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_dcDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_dcDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_dcDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(NV_NVDLA_CDMA_dcDriver,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_dcDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_dcDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(cmd_fifo_rd_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cmd_fifo_rd_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(cmd_fifo_wr_pvld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_Y_LUT_cmd;init;,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cmd_fifo_wr_prdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_SDP_CORE_Y_LUT_cmd,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(cmd_fifo_rd_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cmd_fifo_wr_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(cmd_fifo_rd_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cmd_fifo_rd_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(cmd_fifo_wr_pvld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_Y_LUT_cmd;init;,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cmd_fifo_wr_prdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_SDP_CORE_Y_LUT_cmd,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(cmd_fifo_rd_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cmd_fifo_wr_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.nvdlaConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.nvdlaConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.nvdlaConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.nvdlaConfiguration,ModifiedNames(changes = UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(nvdla;nvdlaConfiguration;init;,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(MULTI_MASK,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_MEM_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(NVDLA_MEM_MASK_BIT,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(NVDLA_MEM_RD_RSP,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_DMAIF_BW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(nvdlaConfiguration,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(NVDLA_MEM_WR_REQ,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.nvdlaConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(nvdla;nvdlaConfiguration;init;,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(MULTI_MASK,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_MEM_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(NVDLA_MEM_MASK_BIT,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(NVDLA_MEM_RD_RSP,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_DMAIF_BW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(nvdlaConfiguration,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(NVDLA_MEM_WR_REQ,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.nvdlaConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_rt_out...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_out)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_out)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_rt_out,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(mac2accu_data,[Default]), UsedName(rt_outImpl,[Default]), UsedName(mac2accu_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(NV_NVDLA_CMAC_CORE_rt_out,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(out_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_rt_out;init;,[Default]), UsedName(forceName,[Default]), UsedName(rt_out,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mac2accu_mask,[Default]), UsedName(mac2accu_pd,[Default]), UsedName(internal_clock,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(out_mask,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_rt_out has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_out)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_inp...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_inp)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_inp)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_inp,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(inp_in_pvld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(inp_out_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(inp_scale_in,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(inp_shift_in,[Default]), UsedName(inp_flow_in,[Default]), UsedName(toString,[Default]), UsedName(inp_y0_in,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(inp_out_prdy,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(inp_bias_in,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(inp_y1_in,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(inp_frac_in,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_inp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(inp_x_in,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(inp_data_out,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_inp;init;,[Default]), UsedName(inp_offset_in,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(inp_in_prdy,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_inp has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(inp_in_pvld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(inp_out_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(inp_scale_in,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(inp_shift_in,[Default]), UsedName(inp_flow_in,[Default]), UsedName(toString,[Default]), UsedName(inp_y0_in,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(inp_out_prdy,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(inp_bias_in,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(inp_y1_in,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(inp_frac_in,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_inp,[Default]), UsedName(asInstanceOf,[Default]), UsedName(inp_x_in,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(inp_data_out,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_inp;init;,[Default]), UsedName(inp_offset_in,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(inp_in_prdy,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_inp)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_REG_dual...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_REG_dual,ModifiedNames(changes = UsedName(ew_mul_cvt_offset,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(ew_mul_bypass,[Default]), UsedName(wdma_stall,[Default]), UsedName(ew_alu_cvt_scale,[Default]), UsedName(lut_hybrid,[Default]), UsedName(dst_surface_stride,[Default]), UsedName(ew_mul_cvt_truncate,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(ew_alu_cvt_truncate,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(bs_alu_operand,[Default]), UsedName(reg_offset,[Default]), UsedName(cvt_shift,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(ew_alu_bypass,[Default]), UsedName(dst_batch_stride,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(bn_mul_src,[Default]), UsedName(ew_alu_cvt_offset,[Default]), UsedName(bn_relu_bypass,[Default]), UsedName(desiredName,[Default]), UsedName(bs_mul_bypass,[Default]), UsedName(nvdla;NV_NVDLA_SDP_REG_dual;init;,[Default]), UsedName(toNamed,[Default]), UsedName(bs_alu_algo,[Default]), UsedName(_onModuleClose,[Default]), UsedName(output_dst,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(bs_bypass,[Default]), UsedName(portsContains,[Default]), UsedName(perf_dma_en,[Default]), UsedName(reg_wr_en,[Default]), UsedName(bn_mul_bypass,[Default]), UsedName(status_nan_output_num,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(bs_alu_shift_value,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(channel,[Default]), UsedName(bn_mul_prelu,[Default]), UsedName(perf_sat_en,[Default]), UsedName(instanceName,[Default]), UsedName(ew_mul_cvt_bypass,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_oflow,[Default]), UsedName(bs_alu_src,[Default]), UsedName(bs_alu_bypass,[Default]), UsedName(toString,[Default]), UsedName(ew_mul_operand,[Default]), UsedName(status_inf_input_num,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(lut_uflow,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(bs_mul_prelu,[Default]), UsedName(bn_alu_src,[Default]), UsedName(dst_base_addr_high,[Default]), UsedName(ew_alu_operand,[Default]), UsedName(bn_mul_operand,[Default]), UsedName(dst_ram_type,[Default]), UsedName(ew_bypass,[Default]), UsedName(bs_relu_bypass,[Default]), UsedName(op_en,[Default]), UsedName(dst_line_stride,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(bn_bypass,[Default]), UsedName(bs_mul_src,[Default]), UsedName(out_saturation,[Default]), UsedName(bn_mul_shift_value,[Default]), UsedName(lut_le_hit,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(bn_alu_algo,[Default]), UsedName(pathName,[Default]), UsedName(dst_base_addr_low,[Default]), UsedName(proc_precision,[Default]), UsedName(nan_to_zero,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(bn_alu_shift_value,[Default]), UsedName(==,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(ew_mul_src,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(ew_mul_prelu,[Default]), UsedName(cvt_offset,[Default]), UsedName(initializeInParent,[Default]), UsedName(status_nan_input_num,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(ew_lut_bypass,[Default]), UsedName(ew_alu_src,[Default]), UsedName(ew_alu_cvt_bypass,[Default]), UsedName(ew_alu_algo,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(ew_mul_cvt_scale,[Default]), UsedName($asInstanceOf,[Default]), UsedName(height,[Default]), UsedName(lut_lo_hit,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(bs_mul_shift_value,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(width_a,[Default]), UsedName(winograd,[Default]), UsedName(ew_truncate,[Default]), UsedName(out_precision,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(perf_lut_en,[Default]), UsedName(cvt_scale,[Default]), UsedName(bn_alu_bypass,[Default]), UsedName(NV_NVDLA_SDP_REG_dual,[Default]), UsedName(getPublicFields,[Default]), UsedName(batch_number,[Default]), UsedName(_parent,[Default]), UsedName(bs_mul_operand,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(bn_alu_operand,[Default]), UsedName(IO,[Default]), UsedName(status_unequal,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_REG_dual has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(ew_mul_cvt_offset,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(ew_mul_bypass,[Default]), UsedName(wdma_stall,[Default]), UsedName(ew_alu_cvt_scale,[Default]), UsedName(lut_hybrid,[Default]), UsedName(dst_surface_stride,[Default]), UsedName(ew_mul_cvt_truncate,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(ew_alu_cvt_truncate,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(bs_alu_operand,[Default]), UsedName(reg_offset,[Default]), UsedName(cvt_shift,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(ew_alu_bypass,[Default]), UsedName(dst_batch_stride,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(bn_mul_src,[Default]), UsedName(ew_alu_cvt_offset,[Default]), UsedName(bn_relu_bypass,[Default]), UsedName(desiredName,[Default]), UsedName(bs_mul_bypass,[Default]), UsedName(nvdla;NV_NVDLA_SDP_REG_dual;init;,[Default]), UsedName(toNamed,[Default]), UsedName(bs_alu_algo,[Default]), UsedName(_onModuleClose,[Default]), UsedName(output_dst,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(bs_bypass,[Default]), UsedName(portsContains,[Default]), UsedName(perf_dma_en,[Default]), UsedName(reg_wr_en,[Default]), UsedName(bn_mul_bypass,[Default]), UsedName(status_nan_output_num,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(bs_alu_shift_value,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(channel,[Default]), UsedName(bn_mul_prelu,[Default]), UsedName(perf_sat_en,[Default]), UsedName(instanceName,[Default]), UsedName(ew_mul_cvt_bypass,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_oflow,[Default]), UsedName(bs_alu_src,[Default]), UsedName(bs_alu_bypass,[Default]), UsedName(toString,[Default]), UsedName(ew_mul_operand,[Default]), UsedName(status_inf_input_num,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(lut_uflow,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(bs_mul_prelu,[Default]), UsedName(bn_alu_src,[Default]), UsedName(dst_base_addr_high,[Default]), UsedName(ew_alu_operand,[Default]), UsedName(bn_mul_operand,[Default]), UsedName(dst_ram_type,[Default]), UsedName(ew_bypass,[Default]), UsedName(bs_relu_bypass,[Default]), UsedName(op_en,[Default]), UsedName(dst_line_stride,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(bn_bypass,[Default]), UsedName(bs_mul_src,[Default]), UsedName(out_saturation,[Default]), UsedName(bn_mul_shift_value,[Default]), UsedName(lut_le_hit,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(bn_alu_algo,[Default]), UsedName(pathName,[Default]), UsedName(dst_base_addr_low,[Default]), UsedName(proc_precision,[Default]), UsedName(nan_to_zero,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(bn_alu_shift_value,[Default]), UsedName(==,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(ew_mul_src,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(ew_mul_prelu,[Default]), UsedName(cvt_offset,[Default]), UsedName(initializeInParent,[Default]), UsedName(status_nan_input_num,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(ew_lut_bypass,[Default]), UsedName(ew_alu_src,[Default]), UsedName(ew_alu_cvt_bypass,[Default]), UsedName(ew_alu_algo,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(ew_mul_cvt_scale,[Default]), UsedName($asInstanceOf,[Default]), UsedName(height,[Default]), UsedName(lut_lo_hit,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(bs_mul_shift_value,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(width_a,[Default]), UsedName(winograd,[Default]), UsedName(ew_truncate,[Default]), UsedName(out_precision,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(perf_lut_en,[Default]), UsedName(cvt_scale,[Default]), UsedName(bn_alu_bypass,[Default]), UsedName(NV_NVDLA_SDP_REG_dual,[Default]), UsedName(getPublicFields,[Default]), UsedName(batch_number,[Default]), UsedName(_parent,[Default]), UsedName(bs_mul_operand,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(bn_alu_operand,[Default]), UsedName(IO,[Default]), UsedName(status_unequal,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_pack...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_pack,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(NV_NVDLA_SDP_CORE_pack,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_pack;init;,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_pack has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(NV_NVDLA_SDP_CORE_pack,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_pack;init;,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_nan...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_nan)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_nan)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_nan,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cdp_rdma2dp_ready,[Default]), UsedName(nan_preproc_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(NV_NVDLA_CDP_DP_nan,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cdp_rdma2dp_valid,[Default]), UsedName(nan_preproc_pvld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_nan;init;,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(nan_preproc_pd,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(cdp_rdma2dp_pd,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_nan has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_nan)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_aluDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_aluDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_aluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_coreDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_sgDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_sgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_sgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_sgDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CDMA_IMG_sgDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_sgDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_sgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_fifo_flop_based...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_fifo_flop_based)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_fifo_flop_based)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_fifo_flop_based,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(wr_rdy,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(rd_vld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(wr_vld,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_SDP_fifo_flop_based,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_fifo_flop_based;init;,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(rd_rdy,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_fifo_flop_based has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(wr_rdy,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(rd_vld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(wr_vld,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_SDP_fifo_flop_based,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_fifo_flop_based;init;,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(rd_rdy,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_fifo_flop_based)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_fifo_no_depth...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_fifo_no_depth)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_fifo_no_depth)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_fifo_no_depth,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(wr_pd,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(rd_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(rd_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(rd_pd,[Default]), UsedName(wr_pvld,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nvdla;NV_NVDLA_SDP_fifo_no_depth;init;,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(NV_NVDLA_SDP_fifo_no_depth,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_fifo_no_depth has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(wr_pd,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(rd_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(rd_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(rd_pd,[Default]), UsedName(wr_pvld,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nvdla;NV_NVDLA_SDP_fifo_no_depth;init;,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(NV_NVDLA_SDP_fifo_no_depth,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_fifo_no_depth)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_RDMA_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_RDMA_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_partial_width_in_mid,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_kernel_width,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(NV_NVDLA_PDP_RDMA_reg,[Default]), UsedName(reg2dp_split_num,[Default]), UsedName(reg2dp_partial_width_in_first,[Default]), UsedName(suggestName,[Default]), UsedName(dp2reg_d1_perf_read_stall,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(nvdla;NV_NVDLA_PDP_RDMA_reg;init;,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(pdp_rdma2csb_resp_valid,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_pad_width,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_kernel_stride_width,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_partial_width_in_last,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(csb2pdp_rdma_req_pd,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(reg2dp_cube_in_height,[Default]), UsedName(_closed,[Default]), UsedName(csb2pdp_rdma_req_prdy,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pdp_rdma2csb_resp_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_input_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_cube_in_channel,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_cube_in_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(csb2pdp_rdma_req_pvld,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(dp2reg_d0_perf_read_stall,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_RDMA_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_partial_width_in_mid,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_kernel_width,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(NV_NVDLA_PDP_RDMA_reg,[Default]), UsedName(reg2dp_split_num,[Default]), UsedName(reg2dp_partial_width_in_first,[Default]), UsedName(suggestName,[Default]), UsedName(dp2reg_d1_perf_read_stall,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(nvdla;NV_NVDLA_PDP_RDMA_reg;init;,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(pdp_rdma2csb_resp_valid,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_pad_width,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_kernel_stride_width,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_partial_width_in_last,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(csb2pdp_rdma_req_pd,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(reg2dp_cube_in_height,[Default]), UsedName(_closed,[Default]), UsedName(csb2pdp_rdma_req_prdy,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pdp_rdma2csb_resp_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_input_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_cube_in_channel,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_cube_in_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(csb2pdp_rdma_req_pvld,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(dp2reg_d0_perf_read_stall,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_intr...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_intr)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_intr)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_intr,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_WDMA_intr,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dma_wr_req_rdy,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(intr_req_pvld,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(suggestName,[Default]), UsedName(sdp2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(dma_wr_rsp_complete,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dp2reg_wdma_stall,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(intr_req_ptr,[Default]), UsedName(initializeInParent,[Default]), UsedName(dma_wr_req_vld,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla;NV_NVDLA_SDP_WDMA_intr;init;,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_intr has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_intr)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_mDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_mDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_mDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_mDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_partition_mDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_mDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_mDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_regfileDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_regfileDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_regfileDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_regfileDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_CDMA_regfileDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_regfileDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_CDMA_regfileDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_regfileDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_SG_fifo...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_SG_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_SG_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_SG_fifo,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(nvdla;NV_NVDLA_CSC_SG_fifo;init;,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(wr_req,[Default]), UsedName(clk,[Default]), UsedName(rd_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(wr_ready,[Default]), UsedName(wr_empty,[Default]), UsedName(rd_req,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_CSC_SG_fifo,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_SG_fifo has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(nvdla;NV_NVDLA_CSC_SG_fifo;init;,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(wr_req,[Default]), UsedName(clk,[Default]), UsedName(rd_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(wr_ready,[Default]), UsedName(wr_empty,[Default]), UsedName(rd_req,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_CSC_SG_fifo,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_SG_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_pDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_pDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_pDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_pDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_partition_pDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_pDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_pDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_RDMA_regDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_RDMA_regDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_PDP_RDMA_regDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_RDMA_regDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_PDP_RDMA_regDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_GLB_csb...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_GLB_csb)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_GLB_csb)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_GLB_csb,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(sdp_done_set0_trigger,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(pdp_done_mask1,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(pdp_done_status0,[Default]), UsedName(rubik_done_status1,[Default]), UsedName(csb2glb_req_pd,[Default]), UsedName(sdp_done_status0,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(bdma_done_mask1,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cdma_dat_done_mask0,[Default]), UsedName(req_wdat,[Default]), UsedName(toNamed,[Default]), UsedName(cdp_done_status1,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cacc_done_mask0,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(cdp_done_mask0,[Default]), UsedName(rubik_done_mask0,[Default]), UsedName(getModulePorts,[Default]), UsedName(bdma_done_mask0,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cdma_dat_done_status1,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(csb2glb_req_pvld,[Default]), UsedName(pdp_done_mask0,[Default]), UsedName(cacc_done_mask1,[Default]), UsedName(_id,[Default]), UsedName(cdma_wt_done_mask1,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(csb2glb_req_prdy,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_done_mask1,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cacc_done_status1,[Default]), UsedName(nvdla;NV_NVDLA_GLB_csb;init;,[Default]), UsedName(circuitName,[Default]), UsedName(bdma_done_status0,[Default]), UsedName(rubik_done_mask1,[Default]), UsedName(pathName,[Default]), UsedName(cdma_dat_done_mask1,[Default]), UsedName(cdma_wt_done_mask0,[Default]), UsedName(finalize,[Default]), UsedName(glb2csb_resp_valid,[Default]), UsedName(getRef,[Default]), UsedName(cacc_done_status0,[Default]), UsedName(sdp_done_status1,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp_done_mask0,[Default]), UsedName(io,[Default]), UsedName(NV_NVDLA_GLB_csb,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(sdp_done_status0_trigger,[Default]), UsedName(portsSize,[Default]), UsedName(cdp_done_mask1,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cdp_done_status0,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(rubik_done_status0,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(cdma_wt_done_status0,[Default]), UsedName(bdma_done_status1,[Default]), UsedName(pdp_done_status1,[Default]), UsedName(hashCode,[Default]), UsedName(glb2csb_resp_pd,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cdma_wt_done_status1,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(cdma_dat_done_status0,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_GLB_csb has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_GLB_csb)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_sum...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_sum)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_sum)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_sum,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(normalz_buf_data_pvld,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(sum2itp_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sum2itp_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(normalz_buf_data,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_sum;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_CDP_DP_sum,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(normalz_buf_data_prdy,[Default]), UsedName(conf,[Implicit]), UsedName(sum2itp_prdy,[Default]), UsedName(reg2dp_normalz_len,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_sum has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_sum)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_cvtDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_cvtDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_CDMA_cvtDriver,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_cvtDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_EG_dout...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_dout)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_dout)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_EG_dout,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cmd2dat_dma_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_EG_dout,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(pfifo_rd_prdy,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(eg_done,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(cmd2dat_dma_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pfifo_rd_pd,[Default]), UsedName(pfifo_rd_pvld,[Default]), UsedName(pathName,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(cmd2dat_dma_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(nvdla;NV_NVDLA_SDP_MRDMA_EG_dout;init;,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_EG_dout has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_dout)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_shared_bufferDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_shared_bufferDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_shared_bufferDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_shared_bufferDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_CDMA_shared_bufferDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_shared_bufferDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_shared_bufferDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_dma_mux...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_dma_mux)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_dma_mux)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_dma_mux,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvif2dc_dat_rd_rsp_valid,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cdma_dat2mcif_rd_req_pd,[Default]), UsedName(dc_dat2cvif_rd_req_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(dc_dat2mcif_rd_req_ready,[Default]), UsedName(cvif2img_dat_rd_rsp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(cdma_dat2cvif_rd_req_pd,[Default]), UsedName(img_dat2mcif_rd_req_ready,[Default]), UsedName(dc_dat2mcif_rd_req_pd,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(img_dat2cvif_rd_req_ready,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(img_dat2mcif_rd_req_valid,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(cdma_dat2cvif_rd_req_valid,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(img_dat2mcif_rd_req_pd,[Default]), UsedName(cdma_dat2mcif_rd_req_ready,[Default]), UsedName(toString,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_dma_mux;init;,[Default]), UsedName(reset,[Default]), UsedName(mcif2cdma_dat_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img_dat2cvif_rd_req_valid,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(mcif2img_dat_rd_rsp_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(mcif2dc_dat_rd_rsp_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif2img_dat_rd_rsp_valid,[Default]), UsedName(cvif2dc_dat_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2dc_dat_rd_rsp_ready,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_CDMA_dma_mux,[Default]), UsedName(getRef,[Default]), UsedName(mcif2img_dat_rd_rsp_ready,[Default]), UsedName(annotate,[Default]), UsedName(cdma_dat2cvif_rd_req_ready,[Default]), UsedName(==,[Default]), UsedName(dc_dat2mcif_rd_req_valid,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(dc_dat2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(mcif2cdma_dat_rd_rsp_valid,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cvif2cdma_dat_rd_rsp_valid,[Default]), UsedName(cvif2img_dat_rd_rsp_pd,[Default]), UsedName(cvif2dc_dat_rd_rsp_pd,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(mcif2cdma_dat_rd_rsp_ready,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(mcif2dc_dat_rd_rsp_valid,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(cvif2cdma_dat_rd_rsp_pd,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(cdma_dat2mcif_rd_req_valid,[Default]), UsedName(getPublicFields,[Default]), UsedName(dc_dat2cvif_rd_req_valid,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(img_dat2cvif_rd_req_pd,[Default]), UsedName(cvif2cdma_dat_rd_rsp_ready,[Default]), UsedName(IO,[Default]), UsedName(cvif2img_dat_rd_rsp_ready,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_dma_mux has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvif2dc_dat_rd_rsp_valid,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cdma_dat2mcif_rd_req_pd,[Default]), UsedName(dc_dat2cvif_rd_req_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(dc_dat2mcif_rd_req_ready,[Default]), UsedName(cvif2img_dat_rd_rsp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(cdma_dat2cvif_rd_req_pd,[Default]), UsedName(img_dat2mcif_rd_req_ready,[Default]), UsedName(dc_dat2mcif_rd_req_pd,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(img_dat2cvif_rd_req_ready,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(img_dat2mcif_rd_req_valid,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(cdma_dat2cvif_rd_req_valid,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(img_dat2mcif_rd_req_pd,[Default]), UsedName(cdma_dat2mcif_rd_req_ready,[Default]), UsedName(toString,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_dma_mux;init;,[Default]), UsedName(reset,[Default]), UsedName(mcif2cdma_dat_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img_dat2cvif_rd_req_valid,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(mcif2img_dat_rd_rsp_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(mcif2dc_dat_rd_rsp_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif2img_dat_rd_rsp_valid,[Default]), UsedName(cvif2dc_dat_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(mcif2dc_dat_rd_rsp_ready,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_CDMA_dma_mux,[Default]), UsedName(getRef,[Default]), UsedName(mcif2img_dat_rd_rsp_ready,[Default]), UsedName(annotate,[Default]), UsedName(cdma_dat2cvif_rd_req_ready,[Default]), UsedName(==,[Default]), UsedName(dc_dat2mcif_rd_req_valid,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(dc_dat2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(mcif2cdma_dat_rd_rsp_valid,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cvif2cdma_dat_rd_rsp_valid,[Default]), UsedName(cvif2img_dat_rd_rsp_pd,[Default]), UsedName(cvif2dc_dat_rd_rsp_pd,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(mcif2cdma_dat_rd_rsp_ready,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(mcif2dc_dat_rd_rsp_valid,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(cvif2cdma_dat_rd_rsp_pd,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(cdma_dat2mcif_rd_req_valid,[Default]), UsedName(getPublicFields,[Default]), UsedName(dc_dat2cvif_rd_req_valid,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(img_dat2cvif_rd_req_pd,[Default]), UsedName(cvif2cdma_dat_rd_rsp_ready,[Default]), UsedName(IO,[Default]), UsedName(cvif2img_dat_rd_rsp_ready,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_dma_mux)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_BDMA_loadDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_BDMA_loadDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_BDMA_loadDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_BDMA_loadDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName(NV_NVDLA_BDMA_loadDriver,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_BDMA_loadDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_BDMA_loadDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_x1_intDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_x1_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_x1_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_x1_intDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_x1_intDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_x1_intDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_x1_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_WDMA_DAT_inDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_inDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_CVT_cellDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_CVT_cellDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_CVT_cellDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_CVT_cellDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_CDMA_CVT_cellDriver,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_CVT_cellDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_CVT_cellDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_regDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_regDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_RDMA_regDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_regDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_RDMA_regDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(dat_fifo_rd_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_Y_LUT_dat;init;,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(dat_fifo_wr_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dat_fifo_wr_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(dat_fifo_rd_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(NV_NVDLA_SDP_CORE_Y_LUT_dat,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dat_fifo_rd_prdy,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(dat_fifo_rd_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_Y_LUT_dat;init;,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(dat_fifo_wr_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dat_fifo_wr_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(dat_fifo_rd_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(NV_NVDLA_SDP_CORE_Y_LUT_dat,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dat_fifo_rd_prdy,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_Y_LUT_dat)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_singleDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_singleDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_singleDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cdma...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cdma,ModifiedNames(changes = UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(u_img,[Default]), UsedName(cvif2dc_dat_rd_rsp_valid,[Default]), UsedName(reg2dp_rsv_y_index,[Default]), UsedName(u_shared_buffer,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(reg2dp_pixel_sign_override,[Default]), UsedName(reg2dp_datain_addr_high_1,[Default]), UsedName(nvdla_op_gated_clk_dc,[Default]), UsedName(u_slcg_mux,[Default]), UsedName(nvdla;NV_NVDLA_cdma;init;,[Default]), UsedName(dc_dat2cvif_rd_req_pd,[Default]), UsedName(u_slcg_hls,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(dc2status_dat_entries,[Default]), UsedName(u_dma_mux,[Default]), UsedName(addId,[Default]), UsedName(dc_dat2mcif_rd_req_ready,[Default]), UsedName(cvif2img_dat_rd_rsp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(img2cvt_mn_wr_data,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(dp2reg_dc_rd_stall,[Default]), UsedName(dc2sbuf_p0_wr_en,[Default]), UsedName(img2cvt_dat_wr_info_pd,[Default]), UsedName(dp2reg_inf_data_num,[Default]), UsedName(u_slcg_img,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(dc2status_dat_slices,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(img2sbuf_p0_wr_en,[Default]), UsedName(img_dat2mcif_rd_req_ready,[Default]), UsedName(dc_dat2mcif_rd_req_pd,[Default]), UsedName(dc2cvt_dat_wr_data,[Default]), UsedName(dp2reg_wt_rd_latency,[Default]), UsedName(suggestName,[Default]), UsedName(u_dc,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_weight_format,[Default]), UsedName(img2status_dat_slices,[Default]), UsedName(reg2dp_rsv_height,[Default]), UsedName(desiredName,[Default]), UsedName(dc2sbuf_p0_wr_data,[Default]), UsedName(img_dat2cvif_rd_req_ready,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(img2cvt_dat_wr_data,[Default]), UsedName(nvdla_op_gated_clk_img,[Default]), UsedName(reg2dp_pixel_format,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(dp2reg_wg_rd_latency,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(img2sbuf_p0_wr_addr,[Default]), UsedName(_onModuleClose,[Default]), UsedName(img2sbuf_p1_wr_data,[Default]), UsedName(reg2dp_datain_width_ext,[Default]), UsedName(dp2reg_wt_flush_done,[Default]), UsedName(img_dat2mcif_rd_req_valid,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(img2cvt_dat_wr_en,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_weight_reuse,[Default]), UsedName(reg2dp_wmb_addr_high,[Default]), UsedName(slcg_img_gate_wg,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_cvt_en,[Default]), UsedName(forceName,[Default]), UsedName(nvdla_op_gated_clk_buffer,[Default]), UsedName(reg2dp_mean_format,[Default]), UsedName(reg2dp_mean_bv,[Default]), UsedName(u_wt,[Default]), UsedName(dc2sbuf_p0_rd_data,[Default]), UsedName(instanceName,[Default]), UsedName(slcg_hls_en,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_weight_addr_high,[Default]), UsedName(img2sbuf_p0_rd_data,[Default]), UsedName(dc2status_dat_updt,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_pad_value,[Default]), UsedName(dp2reg_img_rd_latency,[Default]), UsedName(reg2dp_arb_wmb,[Default]), UsedName(dp2reg_wt_rd_stall,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(img_dat2mcif_rd_req_pd,[Default]), UsedName(reg2dp_wmb_bytes,[Default]), UsedName(dc2cvt_dat_wr_info_pd,[Default]), UsedName(img2sbuf_p1_wr_en,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(slcg_wg_gate_dc,[Default]), UsedName(reg2dp_weight_kernel,[Default]), UsedName(img2cvt_dat_wr_pad_mask,[Default]), UsedName(reg2dp_uv_line_stride,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_conv_y_stride,[Default]), UsedName(u_status,[Default]), UsedName(img_dat2cvif_rd_req_valid,[Default]), UsedName(nvdla_op_gated_clk_cvt,[Default]), UsedName(u_slcg_buffer,[Default]), UsedName(img2cvt_dat_wr_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(mcif2img_dat_rd_rsp_pd,[Default]), UsedName(reg2dp_weight_bank,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_pad_top,[Default]), UsedName(img2cvt_dat_wr_sel,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(u_slcg_cvt,[Default]), UsedName(reg2dp_datain_height_ext,[Default]), UsedName(dc2sbuf_p0_rd_addr,[Default]), UsedName(mcif2dc_dat_rd_rsp_pd,[Default]), UsedName(img2sbuf_p1_rd_en,[Default]), UsedName(reg2dp_rsv_per_uv_line,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif2img_dat_rd_rsp_valid,[Default]), UsedName(cvif2dc_dat_rd_rsp_ready,[Default]), UsedName(slcg_dc_gate_wg,[Default]), UsedName(circuitName,[Default]), UsedName(cdma2sc_wmb_entries_f,[Default]), UsedName(dp2reg_inf_weight_num,[Default]), UsedName(dc2cvt_dat_wr_en,[Default]), UsedName(mcif2dc_dat_rd_rsp_ready,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_batch_stride,[Default]), UsedName(reg2dp_mean_ax,[Default]), UsedName(dp2reg_wg_rd_stall,[Default]), UsedName(finalize,[Default]), UsedName(img2sbuf_p1_rd_addr,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_nan_data_num,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(mcif2img_dat_rd_rsp_ready,[Default]), UsedName(annotate,[Default]), UsedName(u_slcg_dc,[Default]), UsedName(img2sbuf_p1_wr_addr,[Default]), UsedName(reg2dp_pixel_y_offset,[Default]), UsedName(reg2dp_wgs_addr_low,[Default]), UsedName(NV_NVDLA_cdma,[Default]), UsedName(dp2reg_nan_weight_num,[Default]), UsedName(u_cvt,[Default]), UsedName(==,[Default]), UsedName(dc_dat2mcif_rd_req_valid,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(reg2dp_arb_weight,[Default]), UsedName(reg2dp_byte_per_kernel,[Default]), UsedName(nvdla_hls_gated_clk_cvt,[Default]), UsedName(reg2dp_weight_bytes,[Default]), UsedName(status2dma_valid_slices,[Default]), UsedName(io,[Default]), UsedName(dc_dat2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_cvt_truncate,[Default]), UsedName(img2sbuf_p0_rd_en,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName(initializeInParent,[Default]), UsedName(slcg_img_gate_dc,[Default]), UsedName(reg2dp_skip_weight_rls,[Default]), UsedName($init$,[Default]), UsedName(slcg_dc_gate_img,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_wmb_addr_low,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(reg2dp_rsv_per_line,[Default]), UsedName(reg2dp_wgs_addr_high,[Default]), UsedName(img2status_state,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(img2sbuf_p0_wr_data,[Default]), UsedName(reg2dp_datain_addr_low_1,[Default]), UsedName(cvif2img_dat_rd_rsp_pd,[Default]), UsedName(cvif2dc_dat_rd_rsp_pd,[Default]), UsedName(reg2dp_mean_ry,[Default]), UsedName(parentPathName,[Default]), UsedName(dc2cvt_dat_wr_sel,[Default]), UsedName(wt2status_state,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName(dc2cvt_dat_wr_addr,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_pixel_mapping,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(img2sbuf_p0_rd_addr,[Default]), UsedName(dp2reg_consumer,[Default]), UsedName(reg2dp_grains,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla_op_gated_clk_mux,[Default]), UsedName(override_clock,[Default]), UsedName(mcif2dc_dat_rd_rsp_valid,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla_op_gated_clk_wt,[Default]), UsedName(conf,[Implicit]), UsedName(dp2reg_img_rd_stall,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(reg2dp_weight_ram_type,[Default]), UsedName(slcg_wg_gate_img,[Default]), UsedName(dc2status_state,[Default]), UsedName(reg2dp_conv_x_stride,[Default]), UsedName(hashCode,[Default]), UsedName(dc2sbuf_p0_rd_en,[Default]), UsedName(reg2dp_pixel_x_offset,[Default]), UsedName(dp2reg_dc_rd_latency,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(reg2dp_weight_addr_low,[Default]), UsedName(getPublicFields,[Default]), UsedName(u_regfile,[Default]), UsedName(dc2sbuf_p0_wr_addr,[Default]), UsedName(dc_dat2cvif_rd_req_valid,[Default]), UsedName(reg2dp_pad_bottom,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(img_dat2cvif_rd_req_pd,[Default]), UsedName(IO,[Default]), UsedName(cvif2img_dat_rd_rsp_ready,[Default]), UsedName(reg2dp_mean_gu,[Default]), UsedName(reg2dp_pad_left,[Default]), UsedName(dp2reg_dat_flush_done,[Default]), UsedName(u_slcg_wt,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cdma has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cdma)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_unpack...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_unpack,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_SDP_CORE_unpack,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_unpack;init;,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_unpack has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_SDP_CORE_unpack,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_unpack;init;,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cfgrom...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cfgrom)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cfgrom)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cfgrom,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(csb2cfgrom_req_prdy,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_cfgrom;init;,[Default]), UsedName(cfgrom2csb_resp_valid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(cfgrom2csb_resp_pd,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(csb2cfgrom_req_pvld,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_cfgrom,[Default]), UsedName(IO,[Default]), UsedName(csb2cfgrom_req_pd,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cfgrom has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(csb2cfgrom_req_prdy,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_cfgrom;init;,[Default]), UsedName(cfgrom2csb_resp_valid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(cfgrom2csb_resp_pd,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(csb2cfgrom_req_pvld,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_cfgrom,[Default]), UsedName(IO,[Default]), UsedName(csb2cfgrom_req_pd,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cfgrom)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_igDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_igDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_RDMA_igDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_igDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cmac...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cmac)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cmac)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cmac,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(sc2mac_dat_data,[Default]), UsedName(mac2accu_data,[Default]), UsedName(mac2accu_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(csb2cmac_a_req_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(csb2cmac_a_req_pvld,[Default]), UsedName(_id,[Default]), UsedName(cmac_a2csb_resp_valid,[Default]), UsedName(toString,[Default]), UsedName(cmac_a2csb_resp_pd,[Default]), UsedName(sc2mac_wt_sel,[Default]), UsedName(reset,[Default]), UsedName(sc2mac_wt_data,[Default]), UsedName(sc2mac_dat_pvld,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2mac_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mac2accu_mask,[Default]), UsedName(mac2accu_pd,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(NV_NVDLA_cmac,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(csb2cmac_a_req_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;NV_NVDLA_cmac;init;,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(sc2mac_dat_mask,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sc2mac_wt_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mac2accu_mode,[Default]), UsedName(getPublicFields,[Default]), UsedName(sc2mac_wt_mask,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cmac has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cmac)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_cvt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_cvt,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cdma2buf_dat_wr_sel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(img2cvt_mn_wr_data,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(img2cvt_dat_wr_info_pd,[Default]), UsedName(dp2reg_inf_data_num,[Default]), UsedName(dc2cvt_dat_wr_data,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(img2cvt_dat_wr_data,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_en,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_cvt_en,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(slcg_hls_en,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_CDMA_cvt,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_pad_value,[Default]), UsedName(dc2cvt_dat_wr_info_pd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(cdma2buf_dat_wr_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(img2cvt_dat_wr_pad_mask,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(cdma2buf_dat_wr_addr,[Default]), UsedName(img2cvt_dat_wr_sel,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(dc2cvt_dat_wr_en,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_nan_data_num,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_cvt_truncate,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(dc2cvt_dat_wr_sel,[Default]), UsedName(dc2cvt_dat_wr_addr,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_cvt;init;,[Default]), UsedName(addCommand,[Default]), UsedName(cdma2buf_dat_wr_en,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(dp2reg_dat_flush_done,[Default]), UsedName(nvdla_hls_clk,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_cvt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cdma2buf_dat_wr_sel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(img2cvt_mn_wr_data,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(img2cvt_dat_wr_info_pd,[Default]), UsedName(dp2reg_inf_data_num,[Default]), UsedName(dc2cvt_dat_wr_data,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(img2cvt_dat_wr_data,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_en,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_cvt_en,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(slcg_hls_en,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_CDMA_cvt,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_pad_value,[Default]), UsedName(dc2cvt_dat_wr_info_pd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(cdma2buf_dat_wr_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(img2cvt_dat_wr_pad_mask,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(cdma2buf_dat_wr_addr,[Default]), UsedName(img2cvt_dat_wr_sel,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(dc2cvt_dat_wr_en,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_nan_data_num,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_cvt_truncate,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(dc2cvt_dat_wr_sel,[Default]), UsedName(dc2cvt_dat_wr_addr,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_cvt;init;,[Default]), UsedName(addCommand,[Default]), UsedName(cdma2buf_dat_wr_en,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(dp2reg_dat_flush_done,[Default]), UsedName(nvdla_hls_clk,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_core...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_core)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_core)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_core,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_lut_le_slope_uflow_scale,[Default]), UsedName(reg2dp_bs_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_cvt_shift,[Default]), UsedName(reg2dp_bn_bypass,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(reg2dp_lut_le_index_offset,[Default]), UsedName(##,[Default]), UsedName(reg2dp_ew_mul_prelu,[Default]), UsedName(reg2dp_bs_bypass,[Default]), UsedName(addId,[Default]), UsedName(sdp_erdma2dp_mul_valid,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_lut_int_data_wr,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(reg2dp_bn_alu_algo,[Default]), UsedName(reg2dp_bn_mul_bypass,[Default]), UsedName(reg2dp_ecore_slcg_op_en,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(reg2dp_bn_mul_src,[Default]), UsedName(sdp_brdma2dp_mul_valid,[Default]), UsedName(sdp_brdma2dp_mul_ready,[Default]), UsedName(suggestName,[Default]), UsedName(sdp_nrdma2dp_mul_ready,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_shift,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(reg2dp_lut_le_function,[Default]), UsedName(reg2dp_perf_sat_en,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_lut_le_end,[Default]), UsedName(toNamed,[Default]), UsedName(dp2reg_lut_oflow,[Default]), UsedName(reg2dp_ncore_slcg_op_en,[Default]), UsedName(reg2dp_ew_alu_cvt_bypass,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(reg2dp_bs_alu_shift_value,[Default]), UsedName(_onModuleClose,[Default]), UsedName(sdp_erdma2dp_alu_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(reg2dp_bn_alu_operand,[Default]), UsedName(reg2dp_lut_le_start,[Default]), UsedName(parentModName,[Default]), UsedName(dp2reg_out_saturation,[Default]), UsedName(reg2dp_lut_int_data,[Default]), UsedName(reg2dp_bs_mul_src,[Default]), UsedName(reg2dp_bn_mul_shift_value,[Default]), UsedName(reg2dp_bs_alu_algo,[Default]), UsedName(sdp_dp2wdma_ready,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp_nrdma2dp_mul_valid,[Default]), UsedName(reg2dp_lut_oflow_priority,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bs_mul_prelu,[Default]), UsedName(reg2dp_lut_int_access_type,[Default]), UsedName(sdp_nrdma2dp_alu_pd,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_perf_lut_en,[Default]), UsedName(sdp_dp2wdma_pd,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(reg2dp_bn_alu_src,[Default]), UsedName(_id,[Default]), UsedName(sdp_brdma2dp_mul_pd,[Default]), UsedName(reg2dp_bn_alu_shift_value,[Default]), UsedName(reg2dp_lut_lo_end,[Default]), UsedName(reg2dp_bcore_slcg_op_en,[Default]), UsedName(dp2reg_done,[Default]), UsedName(sdp_nrdma2dp_alu_ready,[Default]), UsedName(reg2dp_ew_mul_cvt_offset,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_lut_slcg_en,[Default]), UsedName(sdp_brdma2dp_alu_valid,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_ew_mul_cvt_bypass,[Default]), UsedName(reg2dp_bs_mul_operand,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(reg2dp_lut_hybrid_priority,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_bn_mul_prelu,[Default]), UsedName(_namespace,[Default]), UsedName(reg2dp_bn_mul_operand,[Default]), UsedName(equals,[Default]), UsedName(sdp2pdp_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_nrdma2dp_mul_pd,[Default]), UsedName(sdp2pdp_valid,[Default]), UsedName(sdp_brdma2dp_alu_ready,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(reg2dp_lut_le_index_select,[Default]), UsedName(reg2dp_bs_alu_bypass,[Default]), UsedName(reg2dp_bs_mul_shift_value,[Default]), UsedName(reg2dp_bn_alu_bypass,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_ew_mul_cvt_truncate,[Default]), UsedName(dp2reg_lut_uflow,[Default]), UsedName(nvdla;NV_NVDLA_SDP_core;init;,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(circuitName,[Default]), UsedName(sdp_nrdma2dp_alu_valid,[Default]), UsedName(reg2dp_lut_le_slope_oflow_shift,[Default]), UsedName(reg2dp_ew_alu_src,[Default]), UsedName(pathName,[Default]), UsedName(sdp_erdma2dp_alu_ready,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(reg2dp_lut_le_slope_oflow_scale,[Default]), UsedName(reg2dp_lut_le_slope_uflow_shift,[Default]), UsedName(getRef,[Default]), UsedName(sdp_brdma2dp_alu_pd,[Default]), UsedName(sdp_erdma2dp_mul_pd,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_lut_int_table_id,[Default]), UsedName(reg2dp_ew_mul_operand,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(reg2dp_ew_alu_cvt_truncate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp2pdp_ready,[Default]), UsedName(reg2dp_ew_alu_cvt_offset,[Default]), UsedName(io,[Default]), UsedName(reg2dp_ew_alu_operand,[Default]), UsedName(sdp_dp2wdma_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(sdp_erdma2dp_mul_ready,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_ew_mul_bypass,[Default]), UsedName(reg2dp_lut_lo_start,[Default]), UsedName(dp2reg_lut_lo_hit,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_bn_relu_bypass,[Default]), UsedName(NV_NVDLA_SDP_core,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_ew_mul_src,[Default]), UsedName(getIds,[Default]), UsedName(reg2dp_bs_relu_bypass,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_scale,[Default]), UsedName(reg2dp_lut_int_addr,[Default]), UsedName(dp2reg_lut_int_data,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(reg2dp_ew_truncate,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_ew_alu_cvt_scale,[Default]), UsedName(reg2dp_bs_alu_operand,[Default]), UsedName(reg2dp_ew_lut_bypass,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_lut_lo_index_select,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(dp2reg_lut_hybrid,[Default]), UsedName(reg2dp_ew_mul_cvt_scale,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_shift,[Default]), UsedName(dp2reg_lut_le_hit,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_lut_uflow_priority,[Default]), UsedName(reg2dp_bs_mul_bypass,[Default]), UsedName(sdp_erdma2dp_alu_valid,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_scale,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_core has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_core)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_fifo...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_fifo,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_fifo;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(wr_req,[Default]), UsedName(clk,[Default]), UsedName(rd_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(wr_ready,[Default]), UsedName(rd_req,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_CDMA_fifo,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_fifo has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_fifo;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(wr_req,[Default]), UsedName(clk,[Default]), UsedName(rd_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(wr_ready,[Default]), UsedName(rd_req,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_CDMA_fifo,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_GLB_fc...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_GLB_fc)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_GLB_fc)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_GLB_fc,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(NV_NVDLA_GLB_fc,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(csb2gec_req_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(csb2gec_req_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_GLB_fc;init;,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(gec2csb_resp_pd,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(csb2gec_req_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(gec2csb_resp_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_GLB_fc has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_GLB_fc)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_cDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_cDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_cDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_cDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_HLS_cDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_cDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_cDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_mac;macImpl;init;,[Default]), UsedName(mout,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(pp_pvld_d0,[Default]), UsedName(sum_out,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(macImpl,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_mac;macImpl;init;,[Default]), UsedName(mout,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(pp_pvld_d0,[Default]), UsedName(sum_out,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(macImpl,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_mac.macImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_mul...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_mul,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(mul_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_mul,[Default]), UsedName(chn_mul_in,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(cfg_mul_truncate,[Default]), UsedName(_closed,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(mul_out_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mul_out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_mul;init;,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_mul has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(mul_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_mul,[Default]), UsedName(chn_mul_in,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(cfg_mul_truncate,[Default]), UsedName(_closed,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(mul_out_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mul_out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_mul;init;,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.pdpConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.pdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.pdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.pdpConfiguration,ModifiedNames(changes = UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_PDP_ONFLY_INPUT_BW,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(nvdla;pdpConfiguration;init;,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(PDP_NUM,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_PDP_BWPE,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(NVDLA_PDP_MEM_RD_RSP,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_PDP_DMAIF_BW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(NVDLA_HLS_ADD17_LATENCY,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(SDP_THROUGHPUT,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(NVDLA_PDP_MEM_MASK_NUM,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(PDPBW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_RD_REQ,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_MASK_BIT,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(pdpConfiguration,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(NVDLA_PDP_MEM_WR_REQ,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.pdpConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_PDP_ONFLY_INPUT_BW,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(nvdla;pdpConfiguration;init;,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(PDP_NUM,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_PDP_BWPE,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(NVDLA_PDP_MEM_RD_RSP,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_PDP_DMAIF_BW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(NVDLA_HLS_ADD17_LATENCY,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(SDP_THROUGHPUT,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(NVDLA_PDP_MEM_MASK_NUM,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(PDPBW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_RD_REQ,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_MASK_BIT,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(pdpConfiguration,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(NVDLA_PDP_MEM_WR_REQ,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.pdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_mulDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_mulDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_erdma...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_erdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_erdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_erdma,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(mcif2sdp_e_rd_rsp_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(sdp_erdma2dp_mul_valid,[Default]), UsedName(reg2dp_erdma_data_size,[Default]), UsedName(getPorts,[Default]), UsedName(erdma_slcg_op_en,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_erdma_data_use,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(reg2dp_ew_base_addr_high,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(sdp_e2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2sdp_e_rd_rsp_ready,[Default]), UsedName(sdp_erdma2dp_alu_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_ew_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_ew_base_addr_low,[Default]), UsedName(instanceName,[Default]), UsedName(cvif2sdp_e_rd_rsp_pd,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(erdma_disable,[Default]), UsedName(sdp_e2cvif_rd_req_ready,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_e2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sdp_e2mcif_rd_req_valid,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp_e2cvif_rd_req_valid,[Default]), UsedName(_closed,[Default]), UsedName(sdp_e2cvif_rd_req_pd,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(cvif2sdp_e_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(sdp_erdma2dp_alu_ready,[Default]), UsedName(mcif2sdp_e_rd_rsp_valid,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sdp_erdma2dp_mul_pd,[Default]), UsedName(annotate,[Default]), UsedName(sdp_e2mcif_rd_req_ready,[Default]), UsedName(reg2dp_erdma_data_mode,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(sdp_e2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName(cvif2sdp_e_rd_rsp_valid,[Default]), UsedName($init$,[Default]), UsedName(sdp_erdma2dp_mul_ready,[Default]), UsedName(portsSize,[Default]), UsedName(dp2reg_erdma_stall,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_ew_surface_stride,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla;NV_NVDLA_SDP_erdma;init;,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_erdma_ram_type,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(NV_NVDLA_SDP_erdma,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(sdp_erdma2dp_alu_valid,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_erdma has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(mcif2sdp_e_rd_rsp_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(sdp_erdma2dp_mul_valid,[Default]), UsedName(reg2dp_erdma_data_size,[Default]), UsedName(getPorts,[Default]), UsedName(erdma_slcg_op_en,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_erdma_data_use,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(reg2dp_ew_base_addr_high,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(sdp_e2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2sdp_e_rd_rsp_ready,[Default]), UsedName(sdp_erdma2dp_alu_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_ew_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_ew_base_addr_low,[Default]), UsedName(instanceName,[Default]), UsedName(cvif2sdp_e_rd_rsp_pd,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(erdma_disable,[Default]), UsedName(sdp_e2cvif_rd_req_ready,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_e2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sdp_e2mcif_rd_req_valid,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp_e2cvif_rd_req_valid,[Default]), UsedName(_closed,[Default]), UsedName(sdp_e2cvif_rd_req_pd,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(cvif2sdp_e_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(sdp_erdma2dp_alu_ready,[Default]), UsedName(mcif2sdp_e_rd_rsp_valid,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sdp_erdma2dp_mul_pd,[Default]), UsedName(annotate,[Default]), UsedName(sdp_e2mcif_rd_req_ready,[Default]), UsedName(reg2dp_erdma_data_mode,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(sdp_e2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName(cvif2sdp_e_rd_rsp_valid,[Default]), UsedName($init$,[Default]), UsedName(sdp_erdma2dp_mul_ready,[Default]), UsedName(portsSize,[Default]), UsedName(dp2reg_erdma_stall,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_ew_surface_stride,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla;NV_NVDLA_SDP_erdma;init;,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_erdma_ram_type,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(NV_NVDLA_SDP_erdma,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(sdp_erdma2dp_alu_valid,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_erdma)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_DAT_out...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_out)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_out)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_DAT_out,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla;NV_NVDLA_SDP_WDMA_DAT_out;init;,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dfifo_rd_prdy,[Default]), UsedName(dma_wr_req_rdy,[Default]), UsedName(##,[Default]), UsedName(dfifo_rd_pd,[Default]), UsedName(addId,[Default]), UsedName(intr_req_pvld,[Default]), UsedName(getPorts,[Default]), UsedName(cmd2dat_dma_prdy,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dfifo_rd_pvld,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(cmd2dat_dma_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(dma_wr_req_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(intr_req_ptr,[Default]), UsedName(initializeInParent,[Default]), UsedName(dma_wr_req_vld,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(cmd2dat_dma_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dp2reg_status_unequal,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(NV_NVDLA_SDP_WDMA_DAT_out,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_DAT_out has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_out)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_gate...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_gate)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_gate)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_gate,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_gate;init;,[Default]), UsedName(forceName,[Default]), UsedName(rdma_disable,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(nvdla_gated_clk,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(rdma_slcg_op_en,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_SDP_RDMA_gate,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_gate has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_gate;init;,[Default]), UsedName(forceName,[Default]), UsedName(rdma_disable,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(nvdla_gated_clk,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(rdma_slcg_op_en,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_SDP_RDMA_gate,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_gate)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_lut...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_lut)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_lut)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_lut,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(lut2intp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(dp2lut_prdy,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(dp2lut_Y_entry,[Default]), UsedName(desiredName,[Default]), UsedName(NV_NVDLA_CDP_DP_lut,[Default]), UsedName(toNamed,[Default]), UsedName(lut2intp_X_sel,[Default]), UsedName(_onModuleClose,[Default]), UsedName(lut2intp_X_info,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(lut2intp_pvld,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(raw_select,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dp2lut_pvld,[Default]), UsedName(reg2dp_lut_oflow_priority,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_lut_table_id,[Default]), UsedName(_id,[Default]), UsedName(lut2intp_X_data_0,[Default]), UsedName(dp2lut_X_entry,[Default]), UsedName(dp2lut_Yinfo,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_lut_access_type,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_lut_hybrid_priority,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(lut_wr_en,[Default]), UsedName(reg2dp_lut_data_trigger,[Default]), UsedName(lut2intp_Y_sel,[Default]), UsedName(lut2intp_X_data_0_17b,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_lut_data,[Default]), UsedName(dp2lut_Xinfo,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(lut2intp_X_data_1,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_lut;init;,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_lut_addr,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(nvdla_core_clk_orig,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(dp2reg_lut_data,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_lut_uflow_priority,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_lut has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_lut)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_REG_dual...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_REG_dual,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(dst_surface_stride,[Default]), UsedName(kernel_stride_height,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cube_in_width,[Default]), UsedName(pad_right,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(nan_output_num,[Default]), UsedName(src_surface_stride,[Default]), UsedName(pooling_method,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(cube_in_height,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(kernel_height,[Default]), UsedName(pad_bottom,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(nvdla;NV_NVDLA_PDP_REG_dual;init;,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(partial_width_in_first,[Default]), UsedName(pad_left,[Default]), UsedName(dma_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cube_out_height,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(inf_input_num,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(pad_top,[Default]), UsedName(pad_value_6x,[Default]), UsedName(input_data,[Default]), UsedName(nan_input_num,[Default]), UsedName(NV_NVDLA_PDP_REG_dual,[Default]), UsedName(perf_write_stall,[Default]), UsedName(recip_kernel_width,[Default]), UsedName(partial_width_out_mid,[Default]), UsedName(partial_width_out_last,[Default]), UsedName(toString,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(pad_value_2x,[Default]), UsedName(isInstanceOf,[Default]), UsedName(partial_width_out_first,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(partial_width_in_last,[Default]), UsedName(generateComponent,[Default]), UsedName(dst_base_addr_high,[Default]), UsedName(dst_ram_type,[Default]), UsedName(pad_value_7x,[Default]), UsedName(op_en,[Default]), UsedName(dst_line_stride,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pad_value_4x,[Default]), UsedName(kernel_width,[Default]), UsedName(pathName,[Default]), UsedName(dst_base_addr_low,[Default]), UsedName(pad_value_5x,[Default]), UsedName(nan_to_zero,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(cube_out_channel,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(recip_kernel_height,[Default]), UsedName(cube_in_channel,[Default]), UsedName(==,[Default]), UsedName(cube_out_width,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(pad_value_1x,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pad_value_3x,[Default]), UsedName(kernel_stride_width,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(partial_width_in_mid,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(split_num,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_REG_dual has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(dst_surface_stride,[Default]), UsedName(kernel_stride_height,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cube_in_width,[Default]), UsedName(pad_right,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(nan_output_num,[Default]), UsedName(src_surface_stride,[Default]), UsedName(pooling_method,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(cube_in_height,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(kernel_height,[Default]), UsedName(pad_bottom,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(nvdla;NV_NVDLA_PDP_REG_dual;init;,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(partial_width_in_first,[Default]), UsedName(pad_left,[Default]), UsedName(dma_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cube_out_height,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(inf_input_num,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(pad_top,[Default]), UsedName(pad_value_6x,[Default]), UsedName(input_data,[Default]), UsedName(nan_input_num,[Default]), UsedName(NV_NVDLA_PDP_REG_dual,[Default]), UsedName(perf_write_stall,[Default]), UsedName(recip_kernel_width,[Default]), UsedName(partial_width_out_mid,[Default]), UsedName(partial_width_out_last,[Default]), UsedName(toString,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(pad_value_2x,[Default]), UsedName(isInstanceOf,[Default]), UsedName(partial_width_out_first,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(partial_width_in_last,[Default]), UsedName(generateComponent,[Default]), UsedName(dst_base_addr_high,[Default]), UsedName(dst_ram_type,[Default]), UsedName(pad_value_7x,[Default]), UsedName(op_en,[Default]), UsedName(dst_line_stride,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pad_value_4x,[Default]), UsedName(kernel_width,[Default]), UsedName(pathName,[Default]), UsedName(dst_base_addr_low,[Default]), UsedName(pad_value_5x,[Default]), UsedName(nan_to_zero,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(cube_out_channel,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(recip_kernel_height,[Default]), UsedName(cube_in_channel,[Default]), UsedName(==,[Default]), UsedName(cube_out_width,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(pad_value_1x,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pad_value_3x,[Default]), UsedName(kernel_stride_width,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(partial_width_in_mid,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(split_num,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_active...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_active)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_active)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_active,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(active,[Default]), UsedName(in_wt_pvld,[Default]), UsedName(dat_pre_stripe_st,[Default]), UsedName(suggestName,[Default]), UsedName(in_wt_sel,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(wt_actv_nz,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(dat_actv_nz,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(in_dat_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(NV_NVDLA_CMAC_CORE_active,[Default]), UsedName(dat_pre_stripe_end,[Default]), UsedName(forceName,[Default]), UsedName(in_wt_mask,[Default]), UsedName(dat_actv_pvld,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_active;init;,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(wt_actv_data,[Default]), UsedName(reset,[Default]), UsedName(in_dat_data,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(internal_clock,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(wt_actv_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(in_dat_stripe_end,[Default]), UsedName(in_dat_mask,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(in_wt_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(activeImpl,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(in_dat_stripe_st,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(dat_actv_data,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_active has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_active)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_wlDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_wlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_wlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_wlDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_CSC_wlDriver,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_wlDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_wlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_lineDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_lineDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_lut_lineDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_intrDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_intrDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_intrDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_intrDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_WDMA_intrDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_intrDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_intrDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_lut_line...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_lut_line)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_lut_line)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_lut_line,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(idx_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_lut_start,[Default]), UsedName(suggestName,[Default]), UsedName(idx_out_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(idx_in_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(idx_in_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_uflow_out,[Default]), UsedName(cfg_lut_sel,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(idx_out_prdy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_line,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(lut_frac_out,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(lut_index_out,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(lut_oflow_out,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_lut_line;init;,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_lut_line has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(idx_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_lut_start,[Default]), UsedName(suggestName,[Default]), UsedName(idx_out_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(idx_in_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(idx_in_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_uflow_out,[Default]), UsedName(cfg_lut_sel,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(idx_out_prdy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_line,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(lut_frac_out,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(lut_index_out,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(lut_oflow_out,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_lut_line;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_lut_line)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifoDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_BDMA_cq...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_BDMA_cq)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_BDMA_cq)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_BDMA_cq,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(ld2st_wr_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(ld2st_rd_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(ld2st_wr_idle,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(ld2st_wr_pd,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_BDMA_cq,[Default]), UsedName(nvdla;NV_NVDLA_BDMA_cq;init;,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(ld2st_rd_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(ld2st_wr_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(ld2st_rd_pd,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_BDMA_cq has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(ld2st_wr_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(ld2st_rd_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(ld2st_wr_idle,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(ld2st_wr_pd,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_BDMA_cq,[Default]), UsedName(nvdla;NV_NVDLA_BDMA_cq;init;,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(ld2st_rd_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(ld2st_wr_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(ld2st_rd_pd,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_BDMA_cq)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_INTP_unit...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_INTP_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_INTP_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_INTP_unit,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(interp_in_pd,[Default]), UsedName(interp_in0_pd,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(interp_in_vld,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(interp_in_shift,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(interp_in_scale,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(interp_out_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(interp_in_rdy,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(interp_in1_pd,[Default]), UsedName(interp_out_rdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_INTP_unit;init;,[Default]), UsedName(interp_out_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(NV_NVDLA_CDP_DP_INTP_unit,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_INTP_unit has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(interp_in_pd,[Default]), UsedName(interp_in0_pd,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(interp_in_vld,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(interp_in_shift,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(interp_in_scale,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(interp_out_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(interp_in_rdy,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(interp_in1_pd,[Default]), UsedName(interp_out_rdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_INTP_unit;init;,[Default]), UsedName(interp_out_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(NV_NVDLA_CDP_DP_INTP_unit,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_INTP_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_sync2data...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_sync2data)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_sync2data)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_sync2data,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(data1_out,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(chn2_in_pvld,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(data1_in,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(chn1_in_prdy,[Default]), UsedName(data2_out,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(data2_in,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(chn1_in_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(NV_NVDLA_SDP_HLS_sync2data,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(asInstanceOf,[Default]), UsedName(chn1_en,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_sync2data;init;,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(chn2_en,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(chn2_in_prdy,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_sync2data has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(data1_out,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(chn2_in_pvld,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(data1_in,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(chn1_in_prdy,[Default]), UsedName(data2_out,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(data2_in,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(chn1_in_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(NV_NVDLA_SDP_HLS_sync2data,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(asInstanceOf,[Default]), UsedName(chn1_en,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_sync2data;init;,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(chn2_en,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(chn2_in_prdy,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_sync2data)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_nrdma...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_nrdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_nrdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_nrdma,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(sdp_n2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_SDP_nrdma;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(sdp_n2cvif_rd_req_pd,[Default]), UsedName(getPorts,[Default]), UsedName(sdp_n2cvif_rd_req_valid,[Default]), UsedName(suggestName,[Default]), UsedName(sdp_nrdma2dp_mul_ready,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cvif2sdp_n_rd_rsp_valid,[Default]), UsedName(sdp_n2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp_nrdma2dp_mul_valid,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bn_base_addr_high,[Default]), UsedName(sdp_nrdma2dp_alu_pd,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(sdp_n2mcif_rd_req_valid,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(sdp_nrdma2dp_alu_ready,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(mcif2sdp_n_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_bn_line_stride,[Default]), UsedName(reg2dp_bn_surface_stride,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mcif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp_nrdma2dp_mul_pd,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(NV_NVDLA_SDP_nrdma,[Default]), UsedName(cvif2sdp_n_rd_rsp_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_nrdma_data_use,[Default]), UsedName(circuitName,[Default]), UsedName(sdp_nrdma2dp_alu_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_pd,[Default]), UsedName(nrdma_disable,[Default]), UsedName(pathName,[Default]), UsedName(nrdma_slcg_op_en,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_nrdma_data_mode,[Default]), UsedName(==,[Default]), UsedName(reg2dp_nrdma_ram_type,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(sdp_n2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_nrdma_data_size,[Default]), UsedName(sdp_n2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(dp2reg_nrdma_stall,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sdp_n2mcif_rd_req_ready,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mcif2sdp_n_rd_rsp_valid,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_bn_base_addr_low,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_nrdma has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(sdp_n2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_SDP_nrdma;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(sdp_n2cvif_rd_req_pd,[Default]), UsedName(getPorts,[Default]), UsedName(sdp_n2cvif_rd_req_valid,[Default]), UsedName(suggestName,[Default]), UsedName(sdp_nrdma2dp_mul_ready,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cvif2sdp_n_rd_rsp_valid,[Default]), UsedName(sdp_n2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp_nrdma2dp_mul_valid,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bn_base_addr_high,[Default]), UsedName(sdp_nrdma2dp_alu_pd,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(sdp_n2mcif_rd_req_valid,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(sdp_nrdma2dp_alu_ready,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(mcif2sdp_n_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_bn_line_stride,[Default]), UsedName(reg2dp_bn_surface_stride,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mcif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp_nrdma2dp_mul_pd,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(NV_NVDLA_SDP_nrdma,[Default]), UsedName(cvif2sdp_n_rd_rsp_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_nrdma_data_use,[Default]), UsedName(circuitName,[Default]), UsedName(sdp_nrdma2dp_alu_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_pd,[Default]), UsedName(nrdma_disable,[Default]), UsedName(pathName,[Default]), UsedName(nrdma_slcg_op_en,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_nrdma_data_mode,[Default]), UsedName(==,[Default]), UsedName(reg2dp_nrdma_ram_type,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(sdp_n2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_nrdma_data_size,[Default]), UsedName(sdp_n2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(dp2reg_nrdma_stall,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sdp_n2mcif_rd_req_ready,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mcif2sdp_n_rd_rsp_valid,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_bn_base_addr_low,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_nrdma)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_CDP_DP_MUL_unitDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_MUL_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.cscConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.cscConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.cscConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.cscConfiguration,ModifiedNames(changes = UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(FPGA,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(nvdla;cscConfiguration;init;,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(cscConfiguration,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.cscConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(FPGA,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(nvdla;cscConfiguration;init;,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(cscConfiguration,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.cscConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_REG_singleDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_REG_singleDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_REG_singleDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_REG_singleDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_REG_singleDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_REG_singleDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_REG_singleDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_REG_singleDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_dual_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_dual_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dataout_channel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(skip_data_rls,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(nvdla;NV_NVDLA_CSC_dual_reg;init;,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(pad_left,[Default]), UsedName(conv_y_stride_ext,[Default]), UsedName(_onModuleClose,[Default]), UsedName(skip_weight_rls,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(x_dilation_ext,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(weight_bytes,[Default]), UsedName(batches,[Default]), UsedName(rls_slices,[Default]), UsedName(getClass,[Default]), UsedName(weight_format,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(pad_top,[Default]), UsedName(data_reuse,[Default]), UsedName(datain_width_ext,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(data_bank,[Default]), UsedName(wmb_bytes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(datain_format,[Default]), UsedName(y_extension,[Default]), UsedName(op_en,[Default]), UsedName(NV_NVDLA_CSC_dual_reg,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(atomics,[Default]), UsedName(pathName,[Default]), UsedName(pad_value,[Default]), UsedName(proc_precision,[Default]), UsedName(finalize,[Default]), UsedName(weight_bank,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(y_dilation_ext,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(dataout_height,[Default]), UsedName(io,[Default]), UsedName(weight_reuse,[Default]), UsedName(clone,[Default]), UsedName(weight_kernel,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(datain_height_ext,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(datain_channel_ext,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(weight_width_ext,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(entries,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(weight_height_ext,[Default]), UsedName(getPublicFields,[Default]), UsedName(conv_x_stride_ext,[Default]), UsedName(pra_truncate,[Default]), UsedName(dataout_width,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(weight_channel_ext,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_dual_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dataout_channel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(skip_data_rls,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(nvdla;NV_NVDLA_CSC_dual_reg;init;,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(pad_left,[Default]), UsedName(conv_y_stride_ext,[Default]), UsedName(_onModuleClose,[Default]), UsedName(skip_weight_rls,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(x_dilation_ext,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(weight_bytes,[Default]), UsedName(batches,[Default]), UsedName(rls_slices,[Default]), UsedName(getClass,[Default]), UsedName(weight_format,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(pad_top,[Default]), UsedName(data_reuse,[Default]), UsedName(datain_width_ext,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(data_bank,[Default]), UsedName(wmb_bytes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(datain_format,[Default]), UsedName(y_extension,[Default]), UsedName(op_en,[Default]), UsedName(NV_NVDLA_CSC_dual_reg,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(atomics,[Default]), UsedName(pathName,[Default]), UsedName(pad_value,[Default]), UsedName(proc_precision,[Default]), UsedName(finalize,[Default]), UsedName(weight_bank,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(y_dilation_ext,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(dataout_height,[Default]), UsedName(io,[Default]), UsedName(weight_reuse,[Default]), UsedName(clone,[Default]), UsedName(weight_kernel,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(datain_height_ext,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(datain_channel_ext,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(weight_width_ext,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(entries,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(weight_height_ext,[Default]), UsedName(getPublicFields,[Default]), UsedName(conv_x_stride_ext,[Default]), UsedName(pra_truncate,[Default]), UsedName(dataout_width,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(weight_channel_ext,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_slcg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_slcg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_slcg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_slcg,ModifiedNames(changes = UsedName(nvdla;NV_NVDLA_slcg;init;,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_slcg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(nvdla;NV_NVDLA_slcg;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_slcg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_GLB_ic...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_GLB_ic)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_GLB_ic)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_GLB_ic,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(sdp_done_set0_trigger,[Default]), UsedName(synchronized,[Default]), UsedName(bdma2glb_done_intr_pd,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(pdp_done_mask1,[Default]), UsedName(cacc2glb_done_intr_pd,[Default]), UsedName(##,[Default]), UsedName(rubik2glb_done_intr_pd,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(pdp_done_status0,[Default]), UsedName(rubik_done_status1,[Default]), UsedName(sdp_done_status0,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla_falcon_clk,[Default]), UsedName(sdp2glb_done_intr_pd,[Default]), UsedName(cdma_dat2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(bdma_done_mask1,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cdma_dat_done_mask0,[Default]), UsedName(req_wdat,[Default]), UsedName(toNamed,[Default]), UsedName(cdp_done_status1,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cacc_done_mask0,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(cdp_done_mask0,[Default]), UsedName(rubik_done_mask0,[Default]), UsedName(getModulePorts,[Default]), UsedName(bdma_done_mask0,[Default]), UsedName(setRef,[Default]), UsedName(nvdla;NV_NVDLA_GLB_ic;init;,[Default]), UsedName(forceName,[Default]), UsedName(cdp2glb_done_intr_pd,[Default]), UsedName(cdma_dat_done_status1,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(pdp_done_mask0,[Default]), UsedName(cacc_done_mask1,[Default]), UsedName(_id,[Default]), UsedName(cdma_wt_done_mask1,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_GLB_ic,[Default]), UsedName(sdp_done_mask1,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cacc_done_status1,[Default]), UsedName(pdp2glb_done_intr_pd,[Default]), UsedName(circuitName,[Default]), UsedName(bdma_done_status0,[Default]), UsedName(rubik_done_mask1,[Default]), UsedName(pathName,[Default]), UsedName(cdma_dat_done_mask1,[Default]), UsedName(cdma_wt_done_mask0,[Default]), UsedName(finalize,[Default]), UsedName(cdma_wt2glb_done_intr_pd,[Default]), UsedName(getRef,[Default]), UsedName(cacc_done_status0,[Default]), UsedName(sdp_done_status1,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp_done_mask0,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(core_intr,[Default]), UsedName(sdp_done_status0_trigger,[Default]), UsedName(portsSize,[Default]), UsedName(cdp_done_mask1,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cdp_done_status0,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(rubik_done_status0,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(cdma_wt_done_status0,[Default]), UsedName(bdma_done_status1,[Default]), UsedName(pdp_done_status1,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cdma_wt_done_status1,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(cdma_dat_done_status0,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_GLB_ic has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_GLB_ic)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_fifo_no_depthDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_fifo_no_depthDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_fifo_no_depthDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_fifo_no_depthDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_fifo_no_depthDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_fifo_no_depthDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_fifo_no_depthDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_fifo_no_depthDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_CDMA_WT_sp_arbDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_CDMA_WT_sp_arbDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_WT_sp_arbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_inp_topDriver,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_inp_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_gateDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_gateDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_gateDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_gateDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_SDP_CORE_gateDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_gateDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_SDP_CORE_gateDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_gateDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_prelu...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_prelu)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_prelu)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_prelu,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(op_in,[Default]), UsedName(forceName,[Default]), UsedName(NV_NVDLA_SDP_HLS_prelu,[Default]), UsedName(instanceName,[Default]), UsedName(data_in_sign,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(data_out,[Default]), UsedName(cfg_prelu_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(data_in,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_prelu;init;,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_prelu has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(op_in,[Default]), UsedName(forceName,[Default]), UsedName(NV_NVDLA_SDP_HLS_prelu,[Default]), UsedName(instanceName,[Default]), UsedName(data_in_sign,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(data_out,[Default]), UsedName(cfg_prelu_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(data_in,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_prelu;init;,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_prelu)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_wdma...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_wdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_wdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_wdma,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(sdp2cvif_wr_req_pd,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(suggestName,[Default]), UsedName(sdp2mcif_wr_req_pd,[Default]), UsedName(sdp2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(parentModName,[Default]), UsedName(sdp_dp2wdma_ready,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_dst_batch_stride,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_SDP_wdma;init;,[Default]), UsedName(cvif2sdp_wr_rsp_complete,[Default]), UsedName(sdp_dp2wdma_pd,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(dp2reg_wdma_stall,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(sdp2mcif_wr_req_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_status_nan_output_num,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(sdp2mcif_wr_req_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp2cvif_wr_req_ready,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_wdma_slcg_op_en,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp2cvif_wr_req_valid,[Default]), UsedName(io,[Default]), UsedName(sdp_dp2wdma_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_SDP_wdma,[Default]), UsedName(dp2reg_status_unequal,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_wdma has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(sdp2cvif_wr_req_pd,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(suggestName,[Default]), UsedName(sdp2mcif_wr_req_pd,[Default]), UsedName(sdp2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(parentModName,[Default]), UsedName(sdp_dp2wdma_ready,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_dst_batch_stride,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_SDP_wdma;init;,[Default]), UsedName(cvif2sdp_wr_rsp_complete,[Default]), UsedName(sdp_dp2wdma_pd,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(dp2reg_wdma_stall,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(sdp2mcif_wr_req_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_status_nan_output_num,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(sdp2mcif_wr_req_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp2cvif_wr_req_ready,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_wdma_slcg_op_en,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp2cvif_wr_req_valid,[Default]), UsedName(io,[Default]), UsedName(sdp_dp2wdma_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_SDP_wdma,[Default]), UsedName(dp2reg_status_unequal,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_wdma)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_ig...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_ig,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dma_rd_req_vld,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_ig;init;,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(NV_NVDLA_SDP_RDMA_ig,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_rdma_data_use,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(dma_rd_req_rdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(ig2cq_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_base_addr_high,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(dma_rd_req_pd,[Default]), UsedName(reg2dp_surface_stride,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rdma_data_mode,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(ig2cq_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_rdma_data_size,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_height,[Default]), UsedName(ig2cq_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_base_addr_low,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]), UsedName(dp2reg_rdma_stall,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_ig has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dma_rd_req_vld,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_ig;init;,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(NV_NVDLA_SDP_RDMA_ig,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_rdma_data_use,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(dma_rd_req_rdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(ig2cq_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_base_addr_high,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(dma_rd_req_pd,[Default]), UsedName(reg2dp_surface_stride,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_rdma_data_mode,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(ig2cq_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_rdma_data_size,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_height,[Default]), UsedName(ig2cq_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_base_addr_low,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]), UsedName(dp2reg_rdma_stall,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_bs_batch_stride,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(dp2reg_brdma_stall,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(reg2dp_bs_line_stride,[Default]), UsedName(name,[Default]), UsedName(reg2dp_brdma_data_use,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(reg2dp_erdma_data_size,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(reg2dp_brdma_data_size,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_erdma_data_use,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(csb2sdp_rdma_req_prdy,[Default]), UsedName(reg2dp_ew_base_addr_high,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_ew_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dp2reg_mrdma_stall,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(sdp_rdma2csb_resp_valid,[Default]), UsedName(reg2dp_ew_base_addr_low,[Default]), UsedName(reg2dp_bs_base_addr_high,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bs_base_addr_low,[Default]), UsedName(reg2dp_ew_batch_stride,[Default]), UsedName(reg2dp_bn_base_addr_high,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_reg;init;,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(reg2dp_brdma_ram_type,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_bn_line_stride,[Default]), UsedName(reg2dp_bn_surface_stride,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_nrdma_data_use,[Default]), UsedName(circuitName,[Default]), UsedName(NV_NVDLA_SDP_RDMA_reg,[Default]), UsedName(pathName,[Default]), UsedName(csb2sdp_rdma_req_pd,[Default]), UsedName(sdp_rdma2csb_resp_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_brdma_disable,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(reg2dp_nrdma_data_mode,[Default]), UsedName(reg2dp_erdma_data_mode,[Default]), UsedName(csb2sdp_rdma_req_pvld,[Default]), UsedName(==,[Default]), UsedName(reg2dp_nrdma_ram_type,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(reg2dp_brdma_data_mode,[Default]), UsedName(reg2dp_nrdma_disable,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_nrdma_data_size,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(dp2reg_nrdma_stall,[Default]), UsedName(dp2reg_erdma_stall,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_bs_surface_stride,[Default]), UsedName(reg2dp_erdma_disable,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_ew_surface_stride,[Default]), UsedName(nameIds,[Default]), UsedName(reg2dp_bn_batch_stride,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_erdma_ram_type,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_bn_base_addr_low,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_bs_batch_stride,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(dp2reg_brdma_stall,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(reg2dp_bs_line_stride,[Default]), UsedName(name,[Default]), UsedName(reg2dp_brdma_data_use,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(reg2dp_erdma_data_size,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(reg2dp_brdma_data_size,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_erdma_data_use,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(csb2sdp_rdma_req_prdy,[Default]), UsedName(reg2dp_ew_base_addr_high,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_ew_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dp2reg_mrdma_stall,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(sdp_rdma2csb_resp_valid,[Default]), UsedName(reg2dp_ew_base_addr_low,[Default]), UsedName(reg2dp_bs_base_addr_high,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bs_base_addr_low,[Default]), UsedName(reg2dp_ew_batch_stride,[Default]), UsedName(reg2dp_bn_base_addr_high,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_reg;init;,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(reg2dp_brdma_ram_type,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_bn_line_stride,[Default]), UsedName(reg2dp_bn_surface_stride,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(reg2dp_nrdma_data_use,[Default]), UsedName(circuitName,[Default]), UsedName(NV_NVDLA_SDP_RDMA_reg,[Default]), UsedName(pathName,[Default]), UsedName(csb2sdp_rdma_req_pd,[Default]), UsedName(sdp_rdma2csb_resp_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_brdma_disable,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(reg2dp_nrdma_data_mode,[Default]), UsedName(reg2dp_erdma_data_mode,[Default]), UsedName(csb2sdp_rdma_req_pvld,[Default]), UsedName(==,[Default]), UsedName(reg2dp_nrdma_ram_type,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(reg2dp_brdma_data_mode,[Default]), UsedName(reg2dp_nrdma_disable,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_nrdma_data_size,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(dp2reg_nrdma_stall,[Default]), UsedName(dp2reg_erdma_stall,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_bs_surface_stride,[Default]), UsedName(reg2dp_erdma_disable,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_ew_surface_stride,[Default]), UsedName(nameIds,[Default]), UsedName(reg2dp_bn_batch_stride,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_erdma_ram_type,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_bn_base_addr_low,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_nanDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_nanDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_nanDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_nanDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NV_NVDLA_PDP_nanDriver,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_nanDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_nanDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_mac...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_mac)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_mac)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_mac,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_mac;init;,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(wt_actv_nz,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(dat_actv_nz,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(NV_NVDLA_CMAC_CORE_mac,[Default]), UsedName(mac,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(dat_actv_pvld,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(mac_out_data,[Default]), UsedName(_id,[Default]), UsedName(mac_out_pvld,[Default]), UsedName(toString,[Default]), UsedName(wt_actv_data,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(internal_clock,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(wt_actv_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(macImpl,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(dat_actv_data,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_mac has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_mac;init;,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(wt_actv_nz,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(dat_actv_nz,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(NV_NVDLA_CMAC_CORE_mac,[Default]), UsedName(mac,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(dat_actv_pvld,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(mac_out_data,[Default]), UsedName(_id,[Default]), UsedName(mac_out_pvld,[Default]), UsedName(toString,[Default]), UsedName(wt_actv_data,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(internal_clock,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(wt_actv_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(macImpl,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(dat_actv_data,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_mac)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.int_sum_block_tp1Driver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.int_sum_block_tp1Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.int_sum_block_tp1Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.int_sum_block_tp1Driver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(int_sum_block_tp1Driver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.int_sum_block_tp1Driver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.int_sum_block_tp1Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_eg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_eg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cq2eg_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla;NV_NVDLA_SDP_MRDMA_eg;init;,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(dma_rd_rsp_rdy,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_eg,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(eg_done,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(cq2eg_pvld,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cq2eg_prdy,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(dma_rd_rsp_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dma_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(dma_rd_rsp_ram_type,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dma_rd_rsp_vld,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_eg has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_yDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_yDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_yDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_yDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_CORE_yDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_yDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_yDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_WDMA_cmdDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_WDMA_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_WDMA_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_WDMA_cmdDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_PDP_WDMA_cmdDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_WDMA_cmdDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_WDMA_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_WT_sp_arb...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_WT_sp_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_WT_sp_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_WT_sp_arb,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(gnt0,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_WT_sp_arb;init;,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(gnt1,[Default]), UsedName(req1,[Default]), UsedName(_id,[Default]), UsedName(req,[Default]), UsedName(toString,[Default]), UsedName(gnt_busy,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(req0,[Default]), UsedName(gnt_pre,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(NV_NVDLA_CDMA_WT_sp_arb,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_WT_sp_arb has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(gnt0,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_WT_sp_arb;init;,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(gnt1,[Default]), UsedName(req1,[Default]), UsedName(_id,[Default]), UsedName(req,[Default]), UsedName(toString,[Default]), UsedName(gnt_busy,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(req0,[Default]), UsedName(gnt_pre,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(NV_NVDLA_CDMA_WT_sp_arb,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_WT_sp_arb)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_x2_int...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_x2_int)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_x2_int)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_x2_int,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(NV_NVDLA_SDP_HLS_x2_int,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_mul_shift_value,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(cfg_alu_shift_value,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(chn_alu_op,[Default]), UsedName(chn_data_in,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_x2_int;init;,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(chn_data_out,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cfg_relu_bypass,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_x2_int has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(NV_NVDLA_SDP_HLS_x2_int,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_mul_shift_value,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(cfg_alu_shift_value,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(chn_alu_op,[Default]), UsedName(chn_data_in,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_x2_int;init;,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(chn_data_out,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cfg_relu_bypass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_x2_int)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.int_sum_block_tp1...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.int_sum_block_tp1)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.int_sum_block_tp1)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.int_sum_block_tp1,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(len9,[Default]), UsedName(load_din_2d,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(int8_sum,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(int8_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(len7,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(len5,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sq_pd_int8,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(int_sum_block_tp1,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(load_din_d,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(pINT8_BW,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;int_sum_block_tp1;init;,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_normalz_len,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.int_sum_block_tp1 has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.int_sum_block_tp1)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(cmd_fifo_rd_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cmd_fifo_rd_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(cmd_fifo_wr_pvld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cmd_fifo_wr_prdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_PDP_WDMA_CMD_fifo,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(nvdla;NV_NVDLA_PDP_WDMA_CMD_fifo;init;,[Default]), UsedName(ne,[Default]), UsedName(cmd_fifo_rd_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cmd_fifo_wr_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(cmd_fifo_rd_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cmd_fifo_rd_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(cmd_fifo_wr_pvld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cmd_fifo_wr_prdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_PDP_WDMA_CMD_fifo,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(nvdla;NV_NVDLA_PDP_WDMA_CMD_fifo;init;,[Default]), UsedName(ne,[Default]), UsedName(cmd_fifo_rd_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cmd_fifo_wr_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_idx_top...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_top)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_top)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_idx_top,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_lut_out_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(chn_lut_in_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_lut_hybrid_priority,[Default]), UsedName(chn_lut_in_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_lut_uflow_priority,[Default]), UsedName(cfg_lut_le_index_offset,[Default]), UsedName(instanceName,[Default]), UsedName(cfg_lut_le_index_select,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_lut_lo_start,[Default]), UsedName(cfg_lut_lo_index_select,[Default]), UsedName(toString,[Default]), UsedName(cfg_lut_le_function,[Default]), UsedName(chn_lut_out_prdy,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cfg_lut_oflow_priority,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_lut_le_start,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(chn_lut_out_pvld,[Default]), UsedName(getPublicFields,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_idx_top,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(chn_lut_in_prdy,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_idx_top;init;,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_idx_top has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_lut_out_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(chn_lut_in_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_lut_hybrid_priority,[Default]), UsedName(chn_lut_in_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_lut_uflow_priority,[Default]), UsedName(cfg_lut_le_index_offset,[Default]), UsedName(instanceName,[Default]), UsedName(cfg_lut_le_index_select,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_lut_lo_start,[Default]), UsedName(cfg_lut_lo_index_select,[Default]), UsedName(toString,[Default]), UsedName(cfg_lut_le_function,[Default]), UsedName(chn_lut_out_prdy,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cfg_lut_oflow_priority,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_lut_le_start,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(chn_lut_out_pvld,[Default]), UsedName(getPublicFields,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_idx_top,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(chn_lut_in_prdy,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_idx_top;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_top)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_RDMA_EG_roDriver,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_EG_roDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_m...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_m)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_m)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_m,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(sc2mac_dat_data,[Default]), UsedName(mac2accu_data,[Default]), UsedName(mac2accu_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(u_partition_m_reset,[Default]), UsedName(_onModuleClose,[Default]), UsedName(csb2cmac_a_req_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(u_global_clk_ovr_on_sync,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(nvdla_clk_ovr_on,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(csb2cmac_a_req_pvld,[Default]), UsedName(_id,[Default]), UsedName(cmac_a2csb_resp_valid,[Default]), UsedName(global_clk_ovr_on,[Default]), UsedName(u_NV_NVDLA_cmac,[Default]), UsedName(toString,[Default]), UsedName(cmac_a2csb_resp_pd,[Default]), UsedName(sc2mac_wt_sel,[Default]), UsedName(reset,[Default]), UsedName(sc2mac_wt_data,[Default]), UsedName(sc2mac_dat_pvld,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2mac_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mac2accu_mask,[Default]), UsedName(mac2accu_pd,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(test_mode,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(NV_NVDLA_partition_m,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(nvdla;NV_NVDLA_partition_m;init;,[Default]), UsedName(csb2cmac_a_req_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(dla_reset_rstn,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(u_dla_clk_ovr_on_sync,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(sc2mac_dat_mask,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sc2mac_wt_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mac2accu_mode,[Default]), UsedName(getPublicFields,[Default]), UsedName(sc2mac_wt_mask,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(direct_reset_,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_m has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_m)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_unpackDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_unpackDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_WDMA_unpackDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_unpackDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_WDMA_unpackDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_cmuxDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_cmuxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_cmuxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_cmuxDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_cmuxDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_cmuxDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_cmuxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.sdpConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.sdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.sdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.sdpConfiguration,ModifiedNames(changes = UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(nvdla;sdpConfiguration;init;,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(sdpConfiguration,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.sdpConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(nvdla;sdpConfiguration;init;,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(sdpConfiguration,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.sdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_egDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_egDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_egDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_egDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_egDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_egDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_egDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_RDMA_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_RDMA_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(cdp_rdma2csb_resp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(suggestName,[Default]), UsedName(dp2reg_d1_perf_read_stall,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_CDP_RDMA_reg;init;,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(NV_NVDLA_CDP_RDMA_reg,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(csb2cdp_rdma_req_pd,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(csb2cdp_rdma_req_prdy,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_input_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(cdp_rdma2csb_resp_pd,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(csb2cdp_rdma_req_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(dp2reg_d0_perf_read_stall,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_RDMA_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(cdp_rdma2csb_resp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(suggestName,[Default]), UsedName(dp2reg_d1_perf_read_stall,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_CDP_RDMA_reg;init;,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(NV_NVDLA_CDP_RDMA_reg,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(csb2cdp_rdma_req_pd,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(csb2cdp_rdma_req_prdy,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_input_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(cdp_rdma2csb_resp_pd,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(csb2cdp_rdma_req_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(dp2reg_d0_perf_read_stall,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_RDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_slcg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_slcg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_slcg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_slcg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(nvdla_core_gated_clk,[Default]), UsedName(_id,[Default]), UsedName(slcg_en_src,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_CDP_slcg,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla;NV_NVDLA_CDP_slcg;init;,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_slcg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(nvdla_core_gated_clk,[Default]), UsedName(_id,[Default]), UsedName(slcg_en_src,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_CDP_slcg,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla;NV_NVDLA_CDP_slcg;init;,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_slcg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_REG_single...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_REG_single,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_REG_single;init;,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(NV_NVDLA_CMAC_REG_single,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_REG_single has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_REG_single;init;,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(NV_NVDLA_CMAC_REG_single,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_RDMA_REG_dual...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_RDMA_REG_dual,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(src_surface_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(cdp_width,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(perf_read_stall,[Default]), UsedName(dma_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_CDP_RDMA_REG_dual;init;,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(channel,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(input_data,[Default]), UsedName(toString,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(src_ram_type,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(height,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(NV_NVDLA_CDP_RDMA_REG_dual,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_RDMA_REG_dual has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(src_surface_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(cdp_width,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(perf_read_stall,[Default]), UsedName(dma_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_CDP_RDMA_REG_dual;init;,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(channel,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(input_data,[Default]), UsedName(toString,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(src_ram_type,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(height,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(NV_NVDLA_CDP_RDMA_REG_dual,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_sqsum_bypass,[Default]), UsedName(reg2dp_lut_le_index_offset,[Default]), UsedName(##,[Default]), UsedName(dp2lut_prdy,[Default]), UsedName(addId,[Default]), UsedName(NV_NVDLA_CDP_DP_LUT_CTRL_unit,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(reg2dp_lut_le_function,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(pPP_BW,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dp2lut_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_LUT_CTRL_unit;init;,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_lut_lo_start_high,[Default]), UsedName(_id,[Default]), UsedName(sum2itp_pd,[Default]), UsedName(dp2lut_X_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_lut_le_start_low,[Default]), UsedName(generateComponent,[Default]), UsedName(sum2itp_pvld,[Default]), UsedName(reg2dp_lut_le_index_select,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_lut_lo_start_low,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2lut_X_info,[Default]), UsedName(pINT8_BW,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_lut_le_start_high,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dp2lut_Y_info,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sum2itp_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_lut_lo_index_select,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(dp2lut_Y_pd,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_regDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_regDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_CACC_regDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_regDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_CACC_regDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(lat_rd_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(NV_NVDLA_CDMA_WT_8ATMM_fifo,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(lat_rd_prdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(lat_wr_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(lat_rd_pd,[Default]), UsedName(lat_wr_prdy,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(lat_wr_pvld,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_WT_8ATMM_fifo;init;,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(lat_rd_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(NV_NVDLA_CDMA_WT_8ATMM_fifo,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(lat_rd_prdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(lat_wr_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(lat_rd_pd,[Default]), UsedName(lat_wr_prdy,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(lat_wr_pvld,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_WT_8ATMM_fifo;init;,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.cbufConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.cbufConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.cbufConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.cbufConfiguration,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(FPGA,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(nvdla;cbufConfiguration;init;,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(cbufConfiguration,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.cbufConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(FPGA,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(nvdla;cbufConfiguration;init;,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(cbufConfiguration,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.cbufConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_CORE_unit1d...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_CORE_unit1d)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_CORE_unit1d)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_CORE_unit1d,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(pooling_out,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(pooling_din_1st,[Default]), UsedName(last_out_en,[Default]), UsedName(pooling_type_cfg,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(cur_datin_disable,[Default]), UsedName(pdma2pdp_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(pooling_din_last,[Default]), UsedName(pooling_unit_en,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(nvdla;NV_NVDLA_PDP_CORE_unit1d;init;,[Default]), UsedName(NV_NVDLA_PDP_CORE_unit1d,[Default]), UsedName(pdma2pdp_prdy,[Default]), UsedName(asInstanceOf,[Default]), UsedName(pdp_din_lc_f,[Default]), UsedName(parentPathName,[Default]), UsedName(pdma2pdp_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(pooling_out_prdy,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(average_pooling_en,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(pooling_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_CORE_unit1d has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_CORE_unit1d)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_sg2pack_fifo;init;,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(wr_req,[Default]), UsedName(clk,[Default]), UsedName(rd_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(NV_NVDLA_CDMA_IMG_sg2pack_fifo,[Default]), UsedName(wr_ready,[Default]), UsedName(rd_req,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_sg2pack_fifo;init;,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(wr_req,[Default]), UsedName(clk,[Default]), UsedName(rd_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(NV_NVDLA_CDMA_IMG_sg2pack_fifo,[Default]), UsedName(wr_ready,[Default]), UsedName(rd_req,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_sg2pack_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cmacDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cmacDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cmacDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cmacDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName(NV_NVDLA_cmacDriver,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cmacDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cmacDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.caccConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.caccConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.caccConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.caccConfiguration,ModifiedNames(changes = UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(caccConfiguration,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(nvdla;caccConfiguration;init;,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.caccConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(caccConfiguration,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(nvdla;caccConfiguration;init;,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.caccConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_regfile...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_regfile,ModifiedNames(changes = UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(NV_NVDLA_CACC_regfile,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_dataout_addr,[Default]), UsedName(dp2reg_sat_count,[Default]), UsedName(toNamed,[Default]), UsedName(csb2cacc_req_pd,[Default]), UsedName(slcg_op_en,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(cacc2csb_resp_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(csb2cacc_req_prdy,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(cacc2csb_resp_pd,[Default]), UsedName(reg2dp_dataout_channel,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_dataout_height,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_CACC_regfile;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg2dp_clip_truncate,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(csb2cacc_req_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_dataout_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_regfile has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(NV_NVDLA_CACC_regfile,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_dataout_addr,[Default]), UsedName(dp2reg_sat_count,[Default]), UsedName(toNamed,[Default]), UsedName(csb2cacc_req_pd,[Default]), UsedName(slcg_op_en,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(cacc2csb_resp_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(csb2cacc_req_prdy,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(cacc2csb_resp_pd,[Default]), UsedName(reg2dp_dataout_channel,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_dataout_height,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_CACC_regfile;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg2dp_clip_truncate,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(csb2cacc_req_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_dataout_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_caccDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_caccDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_caccDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_caccDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_caccDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_caccDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_caccDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_C_int...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_C_int)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_C_int)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_C_int,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvt_data_in,[Default]), UsedName(cvt_sat_out,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_offset,[Default]), UsedName(instanceName,[Default]), UsedName(NV_NVDLA_SDP_HLS_C_int,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cvt_data_out,[Default]), UsedName(cfg_truncate,[Default]), UsedName(cfg_scale,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_out_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(cfg_mode_eql,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_C_int;init;,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_C_int has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvt_data_in,[Default]), UsedName(cvt_sat_out,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_offset,[Default]), UsedName(instanceName,[Default]), UsedName(NV_NVDLA_SDP_HLS_C_int,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cvt_data_out,[Default]), UsedName(cfg_truncate,[Default]), UsedName(cfg_scale,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_out_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(cfg_mode_eql,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_C_int;init;,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_C_int)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_cDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_cDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_cDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_cDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_partition_cDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_cDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_cDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_y...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_y)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_y)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_y,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_lut_le_slope_uflow_scale,[Default]), UsedName(ew_data_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_lut_le_index_offset,[Default]), UsedName(##,[Default]), UsedName(reg2dp_ew_mul_prelu,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_lut_int_data_wr,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_shift,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(reg2dp_lut_le_function,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_lut_le_end,[Default]), UsedName(toNamed,[Default]), UsedName(ew_mul_in_data,[Default]), UsedName(dp2reg_lut_oflow,[Default]), UsedName(reg2dp_ew_alu_cvt_bypass,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_lut_le_start,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_lut_int_data,[Default]), UsedName(ew_mul_in_vld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_lut_oflow_priority,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_lut_int_access_type,[Default]), UsedName(ew_data_in_pvld,[Default]), UsedName(ew_data_out_pvld,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_perf_lut_en,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_lut_lo_end,[Default]), UsedName(op_en_load,[Default]), UsedName(reg2dp_ew_mul_cvt_offset,[Default]), UsedName(ew_data_out_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_ew_mul_cvt_bypass,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(reg2dp_lut_hybrid_priority,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_lut_le_index_select,[Default]), UsedName(ew_mul_in_rdy,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_ew_mul_cvt_truncate,[Default]), UsedName(dp2reg_lut_uflow,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_lut_le_slope_oflow_shift,[Default]), UsedName(reg2dp_ew_alu_src,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(reg2dp_lut_le_slope_oflow_scale,[Default]), UsedName(reg2dp_lut_le_slope_uflow_shift,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_lut_int_table_id,[Default]), UsedName(reg2dp_ew_mul_operand,[Default]), UsedName(reg2dp_ew_alu_cvt_truncate,[Default]), UsedName(NV_NVDLA_SDP_CORE_y,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_ew_alu_cvt_offset,[Default]), UsedName(ew_alu_in_rdy,[Default]), UsedName(io,[Default]), UsedName(reg2dp_ew_alu_operand,[Default]), UsedName(clone,[Default]), UsedName(ew_data_in_pd,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_y;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_ew_mul_bypass,[Default]), UsedName(ew_alu_in_vld,[Default]), UsedName(reg2dp_lut_lo_start,[Default]), UsedName(dp2reg_lut_lo_hit,[Default]), UsedName(ew_alu_in_data,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_ew_mul_src,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_scale,[Default]), UsedName(ew_data_in_prdy,[Default]), UsedName(reg2dp_lut_int_addr,[Default]), UsedName(dp2reg_lut_int_data,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(reg2dp_ew_truncate,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_ew_alu_cvt_scale,[Default]), UsedName(reg2dp_ew_lut_bypass,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_lut_lo_index_select,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(dp2reg_lut_hybrid,[Default]), UsedName(reg2dp_ew_mul_cvt_scale,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_shift,[Default]), UsedName(dp2reg_lut_le_hit,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_lut_uflow_priority,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_scale,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_y has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_y)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_EG_dinDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_dinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_csc...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_csc)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_csc)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_csc,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(sc2buf_dat_rd_en,[Default]), UsedName(sc2mac_dat_b_data,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(cdma2sc_wt_kernels,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(sc2cdma_dat_updt,[Default]), UsedName(csb2csc_req_pd,[Default]), UsedName(sc2cdma_dat_slices,[Default]), UsedName(_onModuleClose,[Default]), UsedName(sc2buf_dat_rd_next1_en,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(sc2mac_wt_b_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(sc2mac_wt_a_data,[Default]), UsedName(cdma2sc_dat_pending_ack,[Default]), UsedName(sc2mac_dat_a_pd,[Default]), UsedName(sc2mac_dat_a_data,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(sc2mac_wt_a_pvld,[Default]), UsedName(_id,[Default]), UsedName(sc2buf_wt_rd_addr,[Default]), UsedName(sc2buf_dat_rd_data,[Default]), UsedName(sc2mac_wt_a_mask,[Default]), UsedName(csc2csb_resp_pd,[Default]), UsedName(sc2cdma_wmb_entries,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_csc;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2buf_dat_rd_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sc2mac_wt_b_mask,[Default]), UsedName(sc2cdma_wt_updt,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sc2buf_wt_rd_data,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(sc2buf_dat_rd_valid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(cdma2sc_dat_entries,[Default]), UsedName(circuitName,[Default]), UsedName(sc2mac_dat_a_mask,[Default]), UsedName(cdma2sc_wt_pending_ack,[Default]), UsedName(sc2cdma_wt_kernels,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(sc2mac_wt_a_sel,[Default]), UsedName(getRef,[Default]), UsedName(csb2csc_req_pvld,[Default]), UsedName(annotate,[Default]), UsedName(sc2cdma_wt_pending_req,[Default]), UsedName(cdma2sc_wmb_entries,[Default]), UsedName(sc2buf_wt_rd_valid,[Default]), UsedName(NV_NVDLA_csc,[Default]), UsedName(cdma2sc_dat_updt,[Default]), UsedName(==,[Default]), UsedName(sc2mac_dat_b_pvld,[Default]), UsedName(sc2mac_dat_b_pd,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(csc2csb_resp_valid,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(sc2buf_dat_rd_next1_addr,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sc2mac_wt_b_sel,[Default]), UsedName(cdma2sc_wt_updt,[Default]), UsedName(sc2buf_dat_rd_shift,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(sc2mac_wt_b_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cdma2sc_dat_slices,[Default]), UsedName(sc2mac_dat_b_mask,[Default]), UsedName(sc2cdma_dat_entries,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(csb2csc_req_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(sc2buf_wt_rd_en,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(sc2mac_dat_a_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cdma2sc_wt_entries,[Default]), UsedName(sc2cdma_wt_entries,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_csc has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_csc)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_WL_dec...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_WL_dec)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_WL_dec)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_WL_dec,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(input_mask,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(output_pvld,[Default]), UsedName(toNamed,[Default]), UsedName(NV_NVDLA_CSC_WL_dec,[Default]), UsedName(input_pipe_valid,[Default]), UsedName(_onModuleClose,[Default]), UsedName(output_data,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(input_data,[Default]), UsedName(output_sel,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_CSC_WL_dec;init;,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(output_mask,[Default]), UsedName(==,[Default]), UsedName(input_mask_en,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(input_sel,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_WL_dec has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_WL_dec)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_c...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_c)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_c)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_c,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(u_csc_dla_clk_ovr_on_sync,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(sc2buf_dat_rd_en,[Default]), UsedName(cdma_dat2mcif_rd_req_pd,[Default]), UsedName(sc2mac_dat_b_data,[Default]), UsedName(cdma2csb_resp_valid,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cdma2buf_wt_wr_addr,[Default]), UsedName(cdma_dat2cvif_rd_req_pd,[Default]), UsedName(cvif2cdma_wt_rd_rsp_pd,[Default]), UsedName(suggestName,[Default]), UsedName(cdma2sc_wt_kernels,[Default]), UsedName(cdma_dat2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(sc2cdma_dat_updt,[Default]), UsedName(csb2csc_req_pd,[Default]), UsedName(cvif2cdma_wt_rd_rsp_ready,[Default]), UsedName(sc2cdma_dat_slices,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cdma_global_clk_ovr_on_sync,[Default]), UsedName(sc2buf_dat_rd_next1_en,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(u_NV_NVDLA_cdma,[Default]), UsedName(cdma_dat2cvif_rd_req_valid,[Default]), UsedName(parentModName,[Default]), UsedName(u_partition_c_reset,[Default]), UsedName(sc2mac_wt_b_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(mcif2cdma_wt_rd_rsp_pd,[Default]), UsedName(forceName,[Default]), UsedName(sc2mac_wt_a_data,[Default]), UsedName(NV_NVDLA_partition_c,[Default]), UsedName(cdma2sc_dat_pending_ack,[Default]), UsedName(sc2mac_dat_a_pd,[Default]), UsedName(sc2mac_dat_a_data,[Default]), UsedName(nvdla_clk_ovr_on,[Default]), UsedName(instanceName,[Default]), UsedName(csb2cdma_req_pd,[Default]), UsedName(cdma2buf_wt_wr_data,[Default]), UsedName(u_global_cdma_clk_ovr_on_sync,[Default]), UsedName(getClass,[Default]), UsedName(sc2mac_wt_a_pvld,[Default]), UsedName(_id,[Default]), UsedName(u_NV_NVDLA_cbuf,[Default]), UsedName(csc_dla_clk_ovr_on_sync,[Default]), UsedName(sc2buf_wt_rd_addr,[Default]), UsedName(sc2buf_dat_rd_data,[Default]), UsedName(cdma_dat2mcif_rd_req_ready,[Default]), UsedName(sc2mac_wt_a_mask,[Default]), UsedName(cdma_wt2cvif_rd_req_valid,[Default]), UsedName(cdma2buf_dat_wr_data,[Default]), UsedName(csc2csb_resp_pd,[Default]), UsedName(sc2cdma_wmb_entries,[Default]), UsedName(global_clk_ovr_on,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(cdma_wt2cvif_rd_req_ready,[Default]), UsedName(reset,[Default]), UsedName(cdma_wt2mcif_rd_req_pd,[Default]), UsedName(mcif2cdma_dat_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2buf_dat_rd_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(cdma2buf_dat_wr_addr,[Default]), UsedName(sc2mac_wt_b_mask,[Default]), UsedName(mcif2cdma_wt_rd_rsp_ready,[Default]), UsedName(sc2cdma_wt_updt,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sc2buf_wt_rd_data,[Default]), UsedName(nvdla;NV_NVDLA_partition_c;init;,[Default]), UsedName(cdma_wt2mcif_rd_req_ready,[Default]), UsedName(csc_global_clk_ovr_on_sync,[Default]), UsedName(sc2buf_dat_rd_valid,[Default]), UsedName(test_mode,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cdma_wt2cvif_rd_req_pd,[Default]), UsedName(u_NV_NVDLA_csc,[Default]), UsedName(cdma2sc_dat_entries,[Default]), UsedName(circuitName,[Default]), UsedName(sc2mac_dat_a_mask,[Default]), UsedName(cdma2sc_wt_pending_ack,[Default]), UsedName(sc2cdma_wt_kernels,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(cdma_wt2glb_done_intr_pd,[Default]), UsedName(sc2mac_wt_a_sel,[Default]), UsedName(getRef,[Default]), UsedName(u_global_csc_clk_ovr_on_sync,[Default]), UsedName(csb2csc_req_pvld,[Default]), UsedName(annotate,[Default]), UsedName(sc2cdma_wt_pending_req,[Default]), UsedName(cdma2sc_wmb_entries,[Default]), UsedName(sc2buf_wt_rd_valid,[Default]), UsedName(cdma_wt2mcif_rd_req_valid,[Default]), UsedName(cdma_dat2cvif_rd_req_ready,[Default]), UsedName(cdma2sc_dat_updt,[Default]), UsedName(==,[Default]), UsedName(sc2mac_dat_b_pvld,[Default]), UsedName(cdma2csb_resp_pd,[Default]), UsedName(sc2mac_dat_b_pd,[Default]), UsedName(csb2cdma_req_prdy,[Default]), UsedName(ne,[Default]), UsedName(csb2cdma_req_pvld,[Default]), UsedName(dla_reset_rstn,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(csc2csb_resp_valid,[Default]), UsedName(notify,[Default]), UsedName(mcif2cdma_dat_rd_rsp_valid,[Default]), UsedName(initializeInParent,[Default]), UsedName(sc2buf_dat_rd_next1_addr,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sc2mac_wt_b_sel,[Default]), UsedName(cdma2buf_wt_wr_en,[Default]), UsedName(cdma2sc_wt_updt,[Default]), UsedName(sc2buf_dat_rd_shift,[Default]), UsedName(cvif2cdma_wt_rd_rsp_valid,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cvif2cdma_dat_rd_rsp_valid,[Default]), UsedName(parentPathName,[Default]), UsedName(mcif2cdma_wt_rd_rsp_valid,[Default]), UsedName(cdma_dla_clk_ovr_on_sync,[Default]), UsedName(sc2mac_wt_b_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cdma2sc_dat_slices,[Default]), UsedName(sc2mac_dat_b_mask,[Default]), UsedName(sc2cdma_dat_entries,[Default]), UsedName(mcif2cdma_dat_rd_rsp_ready,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(cdma2buf_dat_wr_en,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(csb2csc_req_prdy,[Default]), UsedName(cvif2cdma_dat_rd_rsp_pd,[Default]), UsedName(hashCode,[Default]), UsedName(sc2buf_wt_rd_en,[Default]), UsedName(u_cdma_dla_clk_ovr_on_sync,[Default]), UsedName(clock,[Default]), UsedName(cdma_dat2mcif_rd_req_valid,[Default]), UsedName(getPublicFields,[Default]), UsedName(sc2mac_dat_a_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(cvif2cdma_dat_rd_rsp_ready,[Default]), UsedName(direct_reset_,[Default]), UsedName(IO,[Default]), UsedName(cdma2sc_wt_entries,[Default]), UsedName(sc2cdma_wt_entries,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_c has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_c)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_c...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_c)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_c)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_c,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cvt_pd_in,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(NV_NVDLA_SDP_HLS_c,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_offset,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(cvt_pd_out,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_c;init;,[Default]), UsedName(cfg_truncate,[Default]), UsedName(cfg_scale,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_out_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(cfg_mode_eql,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_c has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cvt_pd_in,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(NV_NVDLA_SDP_HLS_c,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_offset,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(cvt_pd_out,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_c;init;,[Default]), UsedName(cfg_truncate,[Default]), UsedName(cfg_scale,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_out_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(cfg_mode_eql,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_c)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_cmdDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_cmdDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_SDP_WDMA_cmdDriver,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_cmdDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_datDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_datDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_datDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_datDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_WDMA_datDriver,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_datDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_datDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_dat...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_dat)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_dat)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_dat,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dfifo_rd_prdy,[Default]), UsedName(dma_wr_req_rdy,[Default]), UsedName(##,[Default]), UsedName(dfifo_rd_pd,[Default]), UsedName(addId,[Default]), UsedName(intr_req_pvld,[Default]), UsedName(getPorts,[Default]), UsedName(cmd2dat_dma_prdy,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(NV_NVDLA_SDP_WDMA_dat,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cmd2dat_spt_pd,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cmd2dat_spt_prdy,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(parentModName,[Default]), UsedName(cmd2dat_spt_pvld,[Default]), UsedName(sdp_dp2wdma_ready,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(sdp_dp2wdma_pd,[Default]), UsedName(_id,[Default]), UsedName(u_out,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_status_nan_output_num,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dfifo_rd_pvld,[Default]), UsedName(nvdla;NV_NVDLA_SDP_WDMA_dat;init;,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(cmd2dat_dma_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(dma_wr_req_pd,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(sdp_dp2wdma_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(u_in,[Default]), UsedName(intr_req_ptr,[Default]), UsedName(initializeInParent,[Default]), UsedName(dma_wr_req_vld,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(cmd2dat_dma_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dp2reg_status_unequal,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_dat has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_dat)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_alu...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_alu)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_alu)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_alu,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(alu_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_alu;init;,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(alu_in_prdy,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(alu_in_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(alu_out_prdy,[Default]), UsedName(chn_alu_op,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(alu_data_out,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(alu_out_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_alu,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_alu has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(alu_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_alu;init;,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(alu_in_prdy,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(alu_in_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(alu_out_prdy,[Default]), UsedName(chn_alu_op,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(alu_data_out,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(alu_out_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_alu,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_alu)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_igDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_igDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_igDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_igDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_igDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_bufferin...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_bufferin)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_bufferin)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_bufferin,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(normalz_buf_data_pvld,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cdp_rdma2dp_ready,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_bufferin;init;,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(cvt2buf_data_bw,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cdp_rdma2dp_valid,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_CDP_DP_bufferin,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(cvt2buf_info_bw,[Default]), UsedName(addPostnameHook,[Default]), UsedName(normalz_buf_data,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(cvt2buf_dp_bw,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(normalz_buf_data_prdy,[Default]), UsedName(conf,[Implicit]), UsedName(cdp_rdma2dp_pd,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_bufferin has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_bufferin)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_regfile...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_regfile,ModifiedNames(changes = UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_rsv_y_index,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(reg2dp_pixel_sign_override,[Default]), UsedName(reg2dp_datain_addr_high_1,[Default]), UsedName(cdma2csb_resp_valid,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(dp2reg_dc_rd_stall,[Default]), UsedName(dp2reg_inf_data_num,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(dp2reg_wt_rd_latency,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_weight_format,[Default]), UsedName(reg2dp_rsv_height,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_pixel_format,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(dp2reg_wg_rd_latency,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_datain_width_ext,[Default]), UsedName(dp2reg_wt_flush_done,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_weight_reuse,[Default]), UsedName(reg2dp_wmb_addr_high,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_cvt_en,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_mean_format,[Default]), UsedName(reg2dp_mean_bv,[Default]), UsedName(instanceName,[Default]), UsedName(csb2cdma_req_pd,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_weight_addr_high,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_pad_value,[Default]), UsedName(dp2reg_img_rd_latency,[Default]), UsedName(reg2dp_arb_wmb,[Default]), UsedName(dp2reg_wt_rd_stall,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(reg2dp_wmb_bytes,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_weight_kernel,[Default]), UsedName(reg2dp_uv_line_stride,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_conv_y_stride,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_weight_bank,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_pad_top,[Default]), UsedName(NV_NVDLA_CDMA_regfile,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(reg2dp_datain_height_ext,[Default]), UsedName(reg2dp_rsv_per_uv_line,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(dp2reg_inf_weight_num,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_batch_stride,[Default]), UsedName(reg2dp_mean_ax,[Default]), UsedName(dp2reg_wg_rd_stall,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_nan_data_num,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_pixel_y_offset,[Default]), UsedName(reg2dp_wgs_addr_low,[Default]), UsedName(dp2reg_nan_weight_num,[Default]), UsedName(==,[Default]), UsedName(cdma2csb_resp_pd,[Default]), UsedName(csb2cdma_req_prdy,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_arb_weight,[Default]), UsedName(reg2dp_byte_per_kernel,[Default]), UsedName(csb2cdma_req_pvld,[Default]), UsedName(reg2dp_weight_bytes,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_regfile;init;,[Default]), UsedName(reg2dp_cvt_truncate,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg2dp_skip_weight_rls,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_wmb_addr_low,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(reg2dp_rsv_per_line,[Default]), UsedName(reg2dp_wgs_addr_high,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_datain_addr_low_1,[Default]), UsedName(reg2dp_mean_ry,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_pixel_mapping,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dp2reg_consumer,[Default]), UsedName(reg2dp_grains,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(dp2reg_img_rd_stall,[Default]), UsedName(reg2dp_weight_ram_type,[Default]), UsedName(reg2dp_conv_x_stride,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_pixel_x_offset,[Default]), UsedName(dp2reg_dc_rd_latency,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(reg2dp_weight_addr_low,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_pad_bottom,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_mean_gu,[Default]), UsedName(reg2dp_pad_left,[Default]), UsedName(dp2reg_dat_flush_done,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_regfile has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_rsv_y_index,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(reg2dp_pixel_sign_override,[Default]), UsedName(reg2dp_datain_addr_high_1,[Default]), UsedName(cdma2csb_resp_valid,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(reg2dp_cvt_offset,[Default]), UsedName(dp2reg_dc_rd_stall,[Default]), UsedName(dp2reg_inf_data_num,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(dp2reg_wt_rd_latency,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(reg2dp_weight_format,[Default]), UsedName(reg2dp_rsv_height,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_pixel_format,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(dp2reg_wg_rd_latency,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_datain_width_ext,[Default]), UsedName(dp2reg_wt_flush_done,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_weight_reuse,[Default]), UsedName(reg2dp_wmb_addr_high,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_cvt_en,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_mean_format,[Default]), UsedName(reg2dp_mean_bv,[Default]), UsedName(instanceName,[Default]), UsedName(csb2cdma_req_pd,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_weight_addr_high,[Default]), UsedName(reg2dp_cvt_scale,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_pad_value,[Default]), UsedName(dp2reg_img_rd_latency,[Default]), UsedName(reg2dp_arb_wmb,[Default]), UsedName(dp2reg_wt_rd_stall,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(reg2dp_wmb_bytes,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_weight_kernel,[Default]), UsedName(reg2dp_uv_line_stride,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(reg2dp_conv_y_stride,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_weight_bank,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_pad_top,[Default]), UsedName(NV_NVDLA_CDMA_regfile,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(reg2dp_datain_height_ext,[Default]), UsedName(reg2dp_rsv_per_uv_line,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(dp2reg_inf_weight_num,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_batch_stride,[Default]), UsedName(reg2dp_mean_ax,[Default]), UsedName(dp2reg_wg_rd_stall,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(dp2reg_nan_data_num,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_pixel_y_offset,[Default]), UsedName(reg2dp_wgs_addr_low,[Default]), UsedName(dp2reg_nan_weight_num,[Default]), UsedName(==,[Default]), UsedName(cdma2csb_resp_pd,[Default]), UsedName(csb2cdma_req_prdy,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_arb_weight,[Default]), UsedName(reg2dp_byte_per_kernel,[Default]), UsedName(csb2cdma_req_pvld,[Default]), UsedName(reg2dp_weight_bytes,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_regfile;init;,[Default]), UsedName(reg2dp_cvt_truncate,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg2dp_skip_weight_rls,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_wmb_addr_low,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(reg2dp_rsv_per_line,[Default]), UsedName(reg2dp_wgs_addr_high,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_datain_addr_low_1,[Default]), UsedName(reg2dp_mean_ry,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_pixel_mapping,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dp2reg_consumer,[Default]), UsedName(reg2dp_grains,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(dp2reg_img_rd_stall,[Default]), UsedName(reg2dp_weight_ram_type,[Default]), UsedName(reg2dp_conv_x_stride,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_pixel_x_offset,[Default]), UsedName(dp2reg_dc_rd_latency,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(reg2dp_weight_addr_low,[Default]), UsedName(getPublicFields,[Default]), UsedName(reg2dp_pad_bottom,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_mean_gu,[Default]), UsedName(reg2dp_pad_left,[Default]), UsedName(dp2reg_dat_flush_done,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_regfile)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_assembly_ctrl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_assembly_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_assembly_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_assembly_ctrl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_in_en_mask,[Default]), UsedName(abuf_rd_addr,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_is_wg,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(abuf_rd_en,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(wait_for_op_en,[Default]), UsedName(_id,[Default]), UsedName(mac_b2accu_pvld,[Default]), UsedName(mac_a2accu_pvld,[Default]), UsedName(mac_a2accu_pd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(accu_ctrl_ram_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(accu_ctrl_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mac_b2accu_pd,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_CACC_assembly_ctrl;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg2dp_clip_truncate,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(slcg_cell_en,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_CACC_assembly_ctrl,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(accu_ctrl_valid,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_assembly_ctrl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_in_en_mask,[Default]), UsedName(abuf_rd_addr,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_is_wg,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(abuf_rd_en,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(wait_for_op_en,[Default]), UsedName(_id,[Default]), UsedName(mac_b2accu_pvld,[Default]), UsedName(mac_a2accu_pvld,[Default]), UsedName(mac_a2accu_pd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(accu_ctrl_ram_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(accu_ctrl_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mac_b2accu_pd,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_CACC_assembly_ctrl;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg2dp_clip_truncate,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(slcg_cell_en,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_CACC_assembly_ctrl,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(accu_ctrl_valid,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_assembly_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_EG_din...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_din)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_din)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_EG_din,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(dma_rd_rsp_rdy,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cmd2dat_spt_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(pfifo_rd_prdy,[Default]), UsedName(cmd2dat_spt_prdy,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(cmd2dat_spt_pvld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dma_rd_rsp_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dma_rd_cdt_lat_fifo_pop,[Default]), UsedName(circuitName,[Default]), UsedName(pfifo_rd_pd,[Default]), UsedName(pfifo_rd_pvld,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;NV_NVDLA_SDP_MRDMA_EG_din;init;,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(dma_rd_rsp_ram_type,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(NV_NVDLA_SDP_MRDMA_EG_din,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dma_rd_rsp_vld,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_EG_din has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_din)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_sgDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_sgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_sgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_sgDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CSC_sgDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_sgDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_sgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvt_data_in,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_cvt_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cvt_data_out,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_cvt,[Default]), UsedName(cfg_cvt_offset,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_cvt_truncate,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_cvt;init;,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(cfg_cvt_scale,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvt_data_in,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_cvt_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cvt_data_out,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_cvt,[Default]), UsedName(cfg_cvt_offset,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_cvt_truncate,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_cvt;init;,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(cfg_cvt_scale,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_packDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_packDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName(NV_NVDLA_CDMA_IMG_packDriver,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_packDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_unpack...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_unpack,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(NV_NVDLA_SDP_RDMA_unpack,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_unpack;init;,[Default]), UsedName(inp_end,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_unpack has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_unpack)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_CALC_int8Driver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_CALC_int8Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_CALC_int8Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_CALC_int8Driver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(NV_NVDLA_CACC_CALC_int8Driver,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_CALC_int8Driver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(NV_NVDLA_CACC_CALC_int8Driver,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_CALC_int8Driver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_CDP_DP_INTP_unitDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_CDP_DP_INTP_unitDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_INTP_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_sumDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_sumDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_sumDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_sumDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_CDP_DP_sumDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_sumDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_sumDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_Y_lut...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_Y_lut)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_Y_lut)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_Y_lut,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(lut2inp_pd,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_lut_le_slope_uflow_scale,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_lut_le_index_offset,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_lut_int_data_wr,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_shift,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(reg2dp_lut_le_function,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_lut_le_end,[Default]), UsedName(toNamed,[Default]), UsedName(dp2reg_lut_oflow,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_lut_le_start,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_lut_int_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(lut2inp_prdy,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_lut_int_access_type,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_perf_lut_en,[Default]), UsedName(NV_NVDLA_SDP_CORE_Y_lut,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_lut_lo_end,[Default]), UsedName(op_en_load,[Default]), UsedName(lut2inp_pvld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_Y_lut;init;,[Default]), UsedName(_closed,[Default]), UsedName(dp2reg_lut_uflow,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_lut_le_slope_oflow_shift,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(reg2dp_lut_le_slope_oflow_scale,[Default]), UsedName(reg2dp_lut_le_slope_uflow_shift,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_lut_int_table_id,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(idx2lut_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_lut_lo_start,[Default]), UsedName(dp2reg_lut_lo_hit,[Default]), UsedName(idx2lut_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(idx2lut_prdy,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_scale,[Default]), UsedName(reg2dp_lut_int_addr,[Default]), UsedName(dp2reg_lut_int_data,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(dp2reg_lut_hybrid,[Default]), UsedName(reg2dp_lut_lo_slope_uflow_shift,[Default]), UsedName(dp2reg_lut_le_hit,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_lut_lo_slope_oflow_scale,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_Y_lut has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_Y_lut)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_eg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_eg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(sdp_rdma2dp_alu_ready,[Default]), UsedName(cq2eg_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(lat_fifo_rd_pd,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_rdma_data_use,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(sdp_rdma2dp_alu_pd,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(lat_fifo_rd_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(eg_done,[Default]), UsedName(sdp_rdma2dp_mul_valid,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(sdp_rdma2dp_mul_pd,[Default]), UsedName(cq2eg_pvld,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cq2eg_prdy,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_rdma2dp_alu_valid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dma_rd_cdt_lat_fifo_pop,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_SDP_RDMA_eg,[Default]), UsedName(reg2dp_rdma_data_mode,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_eg;init;,[Default]), UsedName(sdp_rdma2dp_mul_ready,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_rdma_data_size,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(lat_fifo_rd_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_eg has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_eg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_bufferinDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_bufferinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_bufferinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_bufferinDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CDP_DP_bufferinDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_bufferinDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_bufferinDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvt_data_in,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_cvt_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cvt_data_out,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_cvt_top,[Default]), UsedName(cfg_cvt_offset,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_cvt_top;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_cvt_truncate,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(cfg_cvt_scale,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvt_out_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvt_data_in,[Default]), UsedName(toNamed,[Default]), UsedName(cvt_in_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_cvt_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cvt_data_out,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_cvt_top,[Default]), UsedName(cfg_cvt_offset,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_cvt_top;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cvt_in_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_cvt_truncate,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(cfg_cvt_scale,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cvt_out_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_cvt_top)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_mul...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_mul,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(mul_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mul_op_pvld,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_mul;init;,[Default]), UsedName(circuitName,[Default]), UsedName(alu_out_prdy,[Default]), UsedName(bypass_trt_out,[Default]), UsedName(mul_out_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(alu_data_out,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mul_out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_mul,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(alu_out_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(mul_op_prdy,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_mul has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(mul_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mul_op_pvld,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_mul;init;,[Default]), UsedName(circuitName,[Default]), UsedName(alu_out_prdy,[Default]), UsedName(bypass_trt_out,[Default]), UsedName(mul_out_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(alu_data_out,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mul_out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_mul,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(alu_out_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(mul_op_prdy,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_LUT_CTRL_unitDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cbufDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cbufDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cbufDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cbufDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_cbufDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cbufDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cbufDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_rdma...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_rdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_rdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_rdma,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(sdp_n2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(sdp_b2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(name,[Default]), UsedName(mcif2sdp_e_rd_rsp_pd,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(addId,[Default]), UsedName(sdp_erdma2dp_mul_valid,[Default]), UsedName(sdp_n2cvif_rd_req_pd,[Default]), UsedName(getPorts,[Default]), UsedName(sdp_n2cvif_rd_req_valid,[Default]), UsedName(sdp_brdma2dp_mul_valid,[Default]), UsedName(sdp_brdma2dp_mul_ready,[Default]), UsedName(suggestName,[Default]), UsedName(sdp_nrdma2dp_mul_ready,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(csb2sdp_rdma_req_prdy,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(sdp_e2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_valid,[Default]), UsedName(toNamed,[Default]), UsedName(cvif2sdp_n_rd_rsp_valid,[Default]), UsedName(sdp_n2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2sdp_e_rd_rsp_ready,[Default]), UsedName(sdp_erdma2dp_alu_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cvif2sdp_b_rd_rsp_pd,[Default]), UsedName(getCommands,[Default]), UsedName(sdp_b2mcif_rd_req_ready,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(nvdla;NV_NVDLA_SDP_rdma;init;,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp_nrdma2dp_mul_valid,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_pd,[Default]), UsedName(forceName,[Default]), UsedName(cvif2sdp_b_rd_rsp_valid,[Default]), UsedName(sdp_b2mcif_rd_req_valid,[Default]), UsedName(sdp_rdma2csb_resp_valid,[Default]), UsedName(instanceName,[Default]), UsedName(mcif2sdp_b_rd_rsp_ready,[Default]), UsedName(cvif2sdp_e_rd_rsp_pd,[Default]), UsedName(sdp_nrdma2dp_alu_pd,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_id,[Default]), UsedName(sdp_brdma2dp_mul_pd,[Default]), UsedName(sdp_n2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_b_rd_rsp_valid,[Default]), UsedName(cvif2sdp_b_rd_rsp_ready,[Default]), UsedName(sdp_e2cvif_rd_req_ready,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(sdp_nrdma2dp_alu_ready,[Default]), UsedName(toString,[Default]), UsedName(sdp_brdma2dp_alu_valid,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(mcif2sdp_n_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp_nrdma2dp_mul_pd,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(sdp_e2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_ready,[Default]), UsedName(sdp_brdma2dp_alu_ready,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sdp_e2mcif_rd_req_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp_e2cvif_rd_req_valid,[Default]), UsedName(_closed,[Default]), UsedName(sdp_e2cvif_rd_req_pd,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(cvif2sdp_e_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(sdp_nrdma2dp_alu_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_pd,[Default]), UsedName(pathName,[Default]), UsedName(sdp_erdma2dp_alu_ready,[Default]), UsedName(mcif2sdp_e_rd_rsp_valid,[Default]), UsedName(csb2sdp_rdma_req_pd,[Default]), UsedName(sdp_rdma2csb_resp_pd,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(sdp_brdma2dp_alu_pd,[Default]), UsedName(sdp_erdma2dp_mul_pd,[Default]), UsedName(mcif2sdp_b_rd_rsp_pd,[Default]), UsedName(annotate,[Default]), UsedName(sdp_e2mcif_rd_req_ready,[Default]), UsedName(csb2sdp_rdma_req_pvld,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(io,[Default]), UsedName(sdp_n2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(sdp_e2mcif_rd_req_pd,[Default]), UsedName(sdp_n2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName(cvif2sdp_e_rd_rsp_valid,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_SDP_rdma,[Default]), UsedName(sdp_erdma2dp_mul_ready,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_b2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(sdp_b2mcif_rd_req_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sdp_n2mcif_rd_req_ready,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mcif2sdp_n_rd_rsp_valid,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(sdp_erdma2dp_alu_valid,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_rdma has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(sdp_n2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(sdp_b2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(name,[Default]), UsedName(mcif2sdp_e_rd_rsp_pd,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(addId,[Default]), UsedName(sdp_erdma2dp_mul_valid,[Default]), UsedName(sdp_n2cvif_rd_req_pd,[Default]), UsedName(getPorts,[Default]), UsedName(sdp_n2cvif_rd_req_valid,[Default]), UsedName(sdp_brdma2dp_mul_valid,[Default]), UsedName(sdp_brdma2dp_mul_ready,[Default]), UsedName(suggestName,[Default]), UsedName(sdp_nrdma2dp_mul_ready,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(csb2sdp_rdma_req_prdy,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(sdp_e2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_valid,[Default]), UsedName(toNamed,[Default]), UsedName(cvif2sdp_n_rd_rsp_valid,[Default]), UsedName(sdp_n2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2sdp_e_rd_rsp_ready,[Default]), UsedName(sdp_erdma2dp_alu_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cvif2sdp_b_rd_rsp_pd,[Default]), UsedName(getCommands,[Default]), UsedName(sdp_b2mcif_rd_req_ready,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(nvdla;NV_NVDLA_SDP_rdma;init;,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp_nrdma2dp_mul_valid,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_pd,[Default]), UsedName(forceName,[Default]), UsedName(cvif2sdp_b_rd_rsp_valid,[Default]), UsedName(sdp_b2mcif_rd_req_valid,[Default]), UsedName(sdp_rdma2csb_resp_valid,[Default]), UsedName(instanceName,[Default]), UsedName(mcif2sdp_b_rd_rsp_ready,[Default]), UsedName(cvif2sdp_e_rd_rsp_pd,[Default]), UsedName(sdp_nrdma2dp_alu_pd,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_id,[Default]), UsedName(sdp_brdma2dp_mul_pd,[Default]), UsedName(sdp_n2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_b_rd_rsp_valid,[Default]), UsedName(cvif2sdp_b_rd_rsp_ready,[Default]), UsedName(sdp_e2cvif_rd_req_ready,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(sdp_nrdma2dp_alu_ready,[Default]), UsedName(toString,[Default]), UsedName(sdp_brdma2dp_alu_valid,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(mcif2sdp_n_rd_rsp_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp_nrdma2dp_mul_pd,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(sdp_e2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_ready,[Default]), UsedName(sdp_brdma2dp_alu_ready,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sdp_e2mcif_rd_req_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp_e2cvif_rd_req_valid,[Default]), UsedName(_closed,[Default]), UsedName(sdp_e2cvif_rd_req_pd,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(cvif2sdp_e_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(sdp_nrdma2dp_alu_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_pd,[Default]), UsedName(pathName,[Default]), UsedName(sdp_erdma2dp_alu_ready,[Default]), UsedName(mcif2sdp_e_rd_rsp_valid,[Default]), UsedName(csb2sdp_rdma_req_pd,[Default]), UsedName(sdp_rdma2csb_resp_pd,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(sdp_brdma2dp_alu_pd,[Default]), UsedName(sdp_erdma2dp_mul_pd,[Default]), UsedName(mcif2sdp_b_rd_rsp_pd,[Default]), UsedName(annotate,[Default]), UsedName(sdp_e2mcif_rd_req_ready,[Default]), UsedName(csb2sdp_rdma_req_pvld,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(io,[Default]), UsedName(sdp_n2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(sdp_e2mcif_rd_req_pd,[Default]), UsedName(sdp_n2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName(cvif2sdp_e_rd_rsp_valid,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_SDP_rdma,[Default]), UsedName(sdp_erdma2dp_mul_ready,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_b2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(sdp_b2mcif_rd_req_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sdp_n2mcif_rd_req_ready,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mcif2sdp_n_rd_rsp_valid,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(sdp_erdma2dp_alu_valid,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_rdma)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_WDMA_cmd...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_WDMA_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_WDMA_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_WDMA_cmd,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_PDP_WDMA_cmd;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_split_num,[Default]), UsedName(suggestName,[Default]), UsedName(cmd_fifo_rd_pvld,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cmd_fifo_rd_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(perf_read_stall,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_cube_out_height,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_partial_width_out_mid,[Default]), UsedName(NV_NVDLA_PDP_WDMA_cmd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_cube_out_channel,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_cube_out_width,[Default]), UsedName(cmd_fifo_rd_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_partial_width_out_last,[Default]), UsedName(reg2dp_partial_width_out_first,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_WDMA_cmd has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_WDMA_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_idxDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_idxDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_idxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_nrdmaDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_nrdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_nrdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_nrdmaDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_SDP_nrdmaDriver,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_nrdmaDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_nrdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_pack...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_pack,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(inp_prdy,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(RATIO,[Default]), UsedName(inp_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(inp_data,[Default]), UsedName(cfg_dp_8,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(NV_NVDLA_SDP_RDMA_pack,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(out_prdy,[Default]), UsedName(conf,[Implicit]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_pack;init;,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_pack has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_ctrl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_ctrl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_pixel_sign_override,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(pixel_planar0_lp_burst,[Default]), UsedName(suggestName,[Default]), UsedName(pixel_planar1_sft,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(pixel_early_end,[Default]), UsedName(compileOptions,[Default]), UsedName(sg_is_done,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(pixel_planar1_lp_burst,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_pixel_format,[Default]), UsedName(toNamed,[Default]), UsedName(pixel_planar1_lp_vld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(pixel_planar0_bundle_limit_1st,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(pixel_planar1_rp_vld,[Default]), UsedName(slcg_img_gate_wg,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(pixel_planar0_width_burst,[Default]), UsedName(instanceName,[Default]), UsedName(pixel_planar0_rp_burst,[Default]), UsedName(pixel_planar0_sft,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(pixel_planar1_width_burst,[Default]), UsedName(toString,[Default]), UsedName(pixel_planar0_bundle_limit,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(pixel_bank,[Default]), UsedName(pixel_planar1_rp_burst,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(pixel_data_shrink,[Default]), UsedName(pixel_planar0_byte_sft,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(pixel_packed_10b,[Default]), UsedName(circuitName,[Default]), UsedName(pixel_planar1_bundle_limit,[Default]), UsedName(pixel_planar0_lp_vld,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(initializeInParent,[Default]), UsedName(slcg_img_gate_dc,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pixel_planar1_byte_sft,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(img2status_state,[Default]), UsedName(asInstanceOf,[Default]), UsedName(pixel_order,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName(pixel_data_expand,[Default]), UsedName(pixel_planar1_bundle_limit_1st,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_pixel_mapping,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_CDMA_IMG_ctrl,[Default]), UsedName(pack_is_done,[Default]), UsedName(pixel_uint,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(pixel_precision,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(reg2dp_pixel_x_offset,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_ctrl;init;,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(pixel_planar0_rp_vld,[Default]), UsedName(IO,[Default]), UsedName(layer_st,[Default]), UsedName(reg2dp_pad_left,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_ctrl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_pixel_sign_override,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(pixel_planar0_lp_burst,[Default]), UsedName(suggestName,[Default]), UsedName(pixel_planar1_sft,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(pixel_early_end,[Default]), UsedName(compileOptions,[Default]), UsedName(sg_is_done,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(pixel_planar1_lp_burst,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_pixel_format,[Default]), UsedName(toNamed,[Default]), UsedName(pixel_planar1_lp_vld,[Default]), UsedName(_onModuleClose,[Default]), UsedName(pixel_planar0_bundle_limit_1st,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(pixel_planar1_rp_vld,[Default]), UsedName(slcg_img_gate_wg,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(pixel_planar0_width_burst,[Default]), UsedName(instanceName,[Default]), UsedName(pixel_planar0_rp_burst,[Default]), UsedName(pixel_planar0_sft,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(pixel_planar1_width_burst,[Default]), UsedName(toString,[Default]), UsedName(pixel_planar0_bundle_limit,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(pixel_bank,[Default]), UsedName(pixel_planar1_rp_burst,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(pixel_data_shrink,[Default]), UsedName(pixel_planar0_byte_sft,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(pixel_packed_10b,[Default]), UsedName(circuitName,[Default]), UsedName(pixel_planar1_bundle_limit,[Default]), UsedName(pixel_planar0_lp_vld,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(initializeInParent,[Default]), UsedName(slcg_img_gate_dc,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pixel_planar1_byte_sft,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(img2status_state,[Default]), UsedName(asInstanceOf,[Default]), UsedName(pixel_order,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName(pixel_data_expand,[Default]), UsedName(pixel_planar1_bundle_limit_1st,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_pixel_mapping,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_CDMA_IMG_ctrl,[Default]), UsedName(pack_is_done,[Default]), UsedName(pixel_uint,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(pixel_precision,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(reg2dp_pixel_x_offset,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_ctrl;init;,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(pixel_planar0_rp_vld,[Default]), UsedName(IO,[Default]), UsedName(layer_st,[Default]), UsedName(reg2dp_pad_left,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cfgromDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cfgromDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cfgromDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cfgromDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_cfgromDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cfgromDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_cfgromDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cfgromDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_REG_dualDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_REG_dualDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_REG_dualDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_REG_dualDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_REG_dualDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_REG_dualDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_REG_dualDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_REG_dualDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_mrdmaDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_mrdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_mrdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_mrdmaDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_mrdmaDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_mrdmaDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_mrdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_DAT_in...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_in)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_in)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_DAT_in,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dfifo_rd_prdy,[Default]), UsedName(nvdla;NV_NVDLA_SDP_WDMA_DAT_in;init;,[Default]), UsedName(##,[Default]), UsedName(dfifo_rd_pd,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cmd2dat_spt_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cmd2dat_spt_prdy,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(cmd2dat_spt_pvld,[Default]), UsedName(sdp_dp2wdma_ready,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(sdp_dp2wdma_pd,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_status_nan_output_num,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dfifo_rd_pvld,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(sdp_dp2wdma_valid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(NV_NVDLA_SDP_WDMA_DAT_in,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_DAT_in has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_in)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_MCIF_CSB_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_MCIF_CSB_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_MCIF_CSB_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_MCIF_CSB_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(idle,[Default]), UsedName(wr_weight_pdp,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(wr_weight_sdp,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(wr_weight_rsv_0,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(rd_weight_rbk,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_weight_sdp,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_CSB_reg;init;,[Default]), UsedName(wr_weight_rsv_2,[Default]), UsedName(wr_os_cnt,[Default]), UsedName(rd_weight_sdp_e,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(rd_weight_cdp,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(rd_weight_bdma,[Default]), UsedName(addPostnameHook,[Default]), UsedName(rd_weight_sdp_n,[Default]), UsedName(_closed,[Default]), UsedName(wr_weight_rbk,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(NV_NVDLA_MCIF_CSB_reg,[Default]), UsedName(rd_weight_cdma_dat,[Default]), UsedName(annotate,[Default]), UsedName(rd_weight_rsv_1,[Default]), UsedName(rd_weight_rsv_0,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(rd_weight_sdp_b,[Default]), UsedName(rd_os_cnt,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(rd_weight_cdma_wt,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(rd_weight_pdp,[Default]), UsedName(wr_weight_rsv_1,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(wr_weight_cdp,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(wr_weight_bdma,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_MCIF_CSB_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(idle,[Default]), UsedName(wr_weight_pdp,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(wr_weight_sdp,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(wr_weight_rsv_0,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(rd_weight_rbk,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_weight_sdp,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_MCIF_CSB_reg;init;,[Default]), UsedName(wr_weight_rsv_2,[Default]), UsedName(wr_os_cnt,[Default]), UsedName(rd_weight_sdp_e,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(rd_weight_cdp,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(rd_weight_bdma,[Default]), UsedName(addPostnameHook,[Default]), UsedName(rd_weight_sdp_n,[Default]), UsedName(_closed,[Default]), UsedName(wr_weight_rbk,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(NV_NVDLA_MCIF_CSB_reg,[Default]), UsedName(rd_weight_cdma_dat,[Default]), UsedName(annotate,[Default]), UsedName(rd_weight_rsv_1,[Default]), UsedName(rd_weight_rsv_0,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(rd_weight_sdp_b,[Default]), UsedName(rd_os_cnt,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(rd_weight_cdma_wt,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(rd_weight_pdp,[Default]), UsedName(wr_weight_rsv_1,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(wr_weight_cdp,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(wr_weight_bdma,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_MCIF_CSB_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_REG_single...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_REG_single,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_pdp_s_status_0_wren,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla_pdp_s_status_0_out,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(NV_NVDLA_PDP_REG_single,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_PDP_REG_single;init;,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(nvdla_pdp_s_pointer_0_out,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(nvdla_pdp_s_pointer_0_wren,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_REG_single has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_pdp_s_status_0_wren,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla_pdp_s_status_0_out,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(NV_NVDLA_PDP_REG_single,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_PDP_REG_single;init;,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(nvdla_pdp_s_pointer_0_out,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(nvdla_pdp_s_pointer_0_wren,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cdmaIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cdmaIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cdmaIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cdmaIO,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(cdma_dat2mcif_rd_req_pd,[Default]), UsedName(width,[Default]), UsedName(cdma2buf_dat_wr_sel,[Default]), UsedName(direction_=,[Default]), UsedName(cdma2csb_resp_valid,[Default]), UsedName(direction,[Default]), UsedName(##,[Default]), UsedName(cdma2buf_wt_wr_addr,[Default]), UsedName(cdma_dat2cvif_rd_req_pd,[Default]), UsedName(cvif2cdma_wt_rd_rsp_pd,[Default]), UsedName(allElements,[Default]), UsedName(toBits,[Default]), UsedName(suggestName,[Default]), UsedName(cdma2sc_wt_kernels,[Default]), UsedName(cdma_dat2glb_done_intr_pd,[Default]), UsedName(toNamed,[Default]), UsedName(sc2cdma_dat_updt,[Default]), UsedName(NV_NVDLA_cdmaIO,[Default]), UsedName(cvif2cdma_wt_rd_rsp_ready,[Default]), UsedName(sc2cdma_dat_slices,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cloneType,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(do_asTypeOf,[Default]), UsedName(hasBinding,[Default]), UsedName(asTypeOf,[Default]), UsedName(cdma_dat2cvif_rd_req_valid,[Default]), UsedName(parentModName,[Default]), UsedName(bindingOpt,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(mcif2cdma_wt_rd_rsp_pd,[Default]), UsedName(forceName,[Default]), UsedName(typeEquivalent,[Default]), UsedName(cdma2sc_dat_pending_ack,[Default]), UsedName(connectFromBits,[Default]), UsedName(instanceName,[Default]), UsedName(csb2cdma_req_pd,[Default]), UsedName(topBinding,[Default]), UsedName(cdma2buf_wt_wr_data,[Default]), UsedName(lref,[Default]), UsedName(getClass,[Default]), UsedName(getWidth,[Default]), UsedName(ref,[Default]), UsedName(_id,[Default]), UsedName(toPrintable,[Default]), UsedName(legacyConnect,[Default]), UsedName(cdma_dat2mcif_rd_req_ready,[Default]), UsedName(elements,[Default]), UsedName(cdma_wt2cvif_rd_req_valid,[Default]), UsedName(cdma2buf_dat_wr_data,[Default]), UsedName(connect,[Default]), UsedName(sc2cdma_wmb_entries,[Default]), UsedName(toString,[Default]), UsedName(cdma_wt2cvif_rd_req_ready,[Default]), UsedName(cdma_wt2mcif_rd_req_pd,[Default]), UsedName(mcif2cdma_dat_rd_rsp_pd,[Default]), UsedName(asUInt,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(cdma2buf_dat_wr_addr,[Default]), UsedName(mcif2cdma_wt_rd_rsp_ready,[Default]), UsedName(binding_=,[Default]), UsedName(sc2cdma_wt_updt,[Default]), UsedName(toPrintableHelper,[Default]), UsedName(getElements,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(do_asUInt,[Default]), UsedName(cdma_wt2mcif_rd_req_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(cdma_wt2cvif_rd_req_pd,[Default]), UsedName(badConnect,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(cdma2sc_dat_entries,[Default]), UsedName(nvdla;NV_NVDLA_cdmaIO;init;,[Default]), UsedName(circuitName,[Default]), UsedName(className,[Default]), UsedName(cdma2sc_wt_pending_ack,[Default]), UsedName(sc2cdma_wt_kernels,[Default]), UsedName(pathName,[Default]), UsedName(ignoreSeq,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(cdma_wt2glb_done_intr_pd,[Default]), UsedName(getRef,[Default]), UsedName(litValue,[Default]), UsedName(isWidthKnown,[Default]), UsedName(isLit,[Default]), UsedName(sc2cdma_wt_pending_req,[Default]), UsedName(cloneTypeFull,[Default]), UsedName(cdma2sc_wmb_entries,[Default]), UsedName(cdma_wt2mcif_rd_req_valid,[Default]), UsedName(cdma_dat2cvif_rd_req_ready,[Default]), UsedName(<>,[Default]), UsedName(cdma2sc_dat_updt,[Default]), UsedName(==,[Default]), UsedName(cdma2csb_resp_pd,[Default]), UsedName(csb2cdma_req_prdy,[Default]), UsedName(ne,[Default]), UsedName(csb2cdma_req_pvld,[Default]), UsedName(specifiedDirection_=,[Default]), UsedName(bind,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(:=,[Default]), UsedName(mcif2cdma_dat_rd_rsp_valid,[Default]), UsedName($init$,[Default]), UsedName(bind$default$2,[Default]), UsedName(cdma2buf_wt_wr_en,[Default]), UsedName(cdma2buf_wt_wr_sel,[Default]), UsedName(bulkConnect,[Default]), UsedName(cdma2sc_wt_updt,[Default]), UsedName(cvif2cdma_wt_rd_rsp_valid,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cvif2cdma_dat_rd_rsp_valid,[Default]), UsedName(parentPathName,[Default]), UsedName(mcif2cdma_wt_rd_rsp_valid,[Default]), UsedName(specifiedDirection,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cdma2sc_dat_slices,[Default]), UsedName(_assignCompatibilityExplicitDirection,[Default]), UsedName(sc2cdma_dat_entries,[Default]), UsedName(mcif2cdma_dat_rd_rsp_ready,[Default]), UsedName(cdma2buf_dat_wr_en,[Default]), UsedName(conf,[Implicit]), UsedName(flatten,[Default]), UsedName(litArg,[Default]), UsedName(cvif2cdma_dat_rd_rsp_pd,[Default]), UsedName(hashCode,[Default]), UsedName(cdma_dat2mcif_rd_req_valid,[Default]), UsedName(widthOption,[Default]), UsedName(getPublicFields,[Default]), UsedName(compileOptions,[Implicit]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(cvif2cdma_dat_rd_rsp_ready,[Default]), UsedName(binding,[Default]), UsedName(cdma2sc_wt_entries,[Default]), UsedName(sc2cdma_wt_entries,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cdmaIO has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]), UsedName(compileOptions,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cdmaIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_EG_doutDriver,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_doutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_cvtDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_cvtDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_cvtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_alu...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_alu)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_alu)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_alu,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(alu_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(alu_op_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(alu_in_prdy,[Default]), UsedName(alu_op_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(cfg_alu_shift_value,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(alu_in_pvld,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_alu,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(alu_out_prdy,[Default]), UsedName(chn_alu_op,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(alu_data_out,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_alu;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(alu_out_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_alu has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(alu_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(alu_op_prdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(alu_in_prdy,[Default]), UsedName(alu_op_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(cfg_alu_shift_value,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(alu_in_pvld,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_alu,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(alu_out_prdy,[Default]), UsedName(chn_alu_op,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(alu_data_out,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_alu;init;,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(alu_out_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_alu)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_sg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_sg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_sg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_sg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(nvdla;NV_NVDLA_CSC_sg;init;,[Default]), UsedName(suggestName,[Default]), UsedName(cdma2sc_wt_kernels,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(sg2wl_reuse_rls,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_weight_reuse,[Default]), UsedName(sg2dl_pd,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(sg2dl_reuse_rls,[Default]), UsedName(forceName,[Default]), UsedName(cdma2sc_dat_pending_ack,[Default]), UsedName(reg2dp_y_extension,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(sg2wl_pvld,[Default]), UsedName(NV_NVDLA_CSC_sg,[Default]), UsedName(dp2reg_done,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_weight_kernel,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_weight_bank,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_datain_height_ext,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_atomics,[Default]), UsedName(reg2dp_weight_width_ext,[Default]), UsedName(cdma2sc_dat_entries,[Default]), UsedName(circuitName,[Default]), UsedName(cdma2sc_wt_pending_ack,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_dataout_height,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(sg2wl_pd,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_weight_channel_ext,[Default]), UsedName(annotate,[Default]), UsedName(sc2cdma_wt_pending_req,[Default]), UsedName(sc_state,[Default]), UsedName(cdma2sc_wmb_entries,[Default]), UsedName(cdma2sc_dat_updt,[Default]), UsedName(==,[Default]), UsedName(reg2dp_weight_height_ext,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_rls_slices,[Default]), UsedName(initializeInParent,[Default]), UsedName(reg2dp_skip_weight_rls,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(cdma2sc_wt_updt,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cdma2sc_dat_slices,[Default]), UsedName(reg2dp_dataout_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(sg2dl_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cdma2sc_wt_entries,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_sg has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_sg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_BDMA_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_BDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_BDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_BDMA_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_BDMA_reg;init;,[Default]), UsedName(nvdla_bdma_cfg_dst_line_0_stride,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla_bdma_cfg_src_surf_0_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(nvdla_bdma_cfg_launch0_0_grp0_launch_trigger,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(nvdla_bdma_cfg_surf_repeat_0_number,[Default]), UsedName(toNamed,[Default]), UsedName(nvdla_bdma_cfg_cmd_0_dst_ram_type,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla_bdma_status_grp0_write_stall_0_count,[Default]), UsedName(nvdla_bdma_cfg_launch1_0_grp1_launch,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nvdla_bdma_cfg_launch0_0_grp0_launch,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(nvdla_bdma_cfg_line_repeat_0_number,[Default]), UsedName(nvdla_bdma_status_0_grp1_busy,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(nvdla_bdma_cfg_dst_addr_high_0_v8,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(nvdla_bdma_cfg_line_0_size,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(nvdla_bdma_status_grp1_write_stall_0_count,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla_bdma_cfg_dst_addr_low_0_v32,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(nvdla_bdma_status_0_idle,[Default]), UsedName(getRef,[Default]), UsedName(nvdla_bdma_status_grp0_read_stall_0_count,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_BDMA_reg,[Default]), UsedName(ne,[Default]), UsedName(nvdla_bdma_cfg_src_addr_high_0_v8,[Default]), UsedName(nvdla_bdma_status_grp1_read_stall_0_count,[Default]), UsedName(io,[Default]), UsedName(nvdla_bdma_cfg_launch1_0_grp1_launch_trigger,[Default]), UsedName(nvdla_bdma_cfg_dst_surf_0_stride,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(nvdla_bdma_cfg_status_0_stall_count_en,[Default]), UsedName(nvdla_bdma_cfg_src_line_0_stride,[Default]), UsedName(nvdla_bdma_cfg_op_0_en,[Default]), UsedName(portsSize,[Default]), UsedName(nvdla_bdma_cfg_cmd_0_src_ram_type,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(nvdla_bdma_cfg_op_0_en_trigger,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla_bdma_cfg_src_addr_low_0_v32,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(nvdla_bdma_status_0_free_slot,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_bdma_status_0_grp0_busy,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_BDMA_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_BDMA_reg;init;,[Default]), UsedName(nvdla_bdma_cfg_dst_line_0_stride,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla_bdma_cfg_src_surf_0_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(nvdla_bdma_cfg_launch0_0_grp0_launch_trigger,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(nvdla_bdma_cfg_surf_repeat_0_number,[Default]), UsedName(toNamed,[Default]), UsedName(nvdla_bdma_cfg_cmd_0_dst_ram_type,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla_bdma_status_grp0_write_stall_0_count,[Default]), UsedName(nvdla_bdma_cfg_launch1_0_grp1_launch,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(nvdla_bdma_cfg_launch0_0_grp0_launch,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(nvdla_bdma_cfg_line_repeat_0_number,[Default]), UsedName(nvdla_bdma_status_0_grp1_busy,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(nvdla_bdma_cfg_dst_addr_high_0_v8,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(nvdla_bdma_cfg_line_0_size,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(nvdla_bdma_status_grp1_write_stall_0_count,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla_bdma_cfg_dst_addr_low_0_v32,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(nvdla_bdma_status_0_idle,[Default]), UsedName(getRef,[Default]), UsedName(nvdla_bdma_status_grp0_read_stall_0_count,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_BDMA_reg,[Default]), UsedName(ne,[Default]), UsedName(nvdla_bdma_cfg_src_addr_high_0_v8,[Default]), UsedName(nvdla_bdma_status_grp1_read_stall_0_count,[Default]), UsedName(io,[Default]), UsedName(nvdla_bdma_cfg_launch1_0_grp1_launch_trigger,[Default]), UsedName(nvdla_bdma_cfg_dst_surf_0_stride,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(nvdla_bdma_cfg_status_0_stall_count_en,[Default]), UsedName(nvdla_bdma_cfg_src_line_0_stride,[Default]), UsedName(nvdla_bdma_cfg_op_0_en,[Default]), UsedName(portsSize,[Default]), UsedName(nvdla_bdma_cfg_cmd_0_src_ram_type,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(nvdla_bdma_cfg_op_0_en_trigger,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla_bdma_cfg_src_addr_low_0_v32,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(nvdla_bdma_status_0_free_slot,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_bdma_status_0_grp0_busy,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_BDMA_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_packDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_packDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_RDMA_packDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_packDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_img...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_img)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_img)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_img,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_rsv_y_index,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_pixel_sign_override,[Default]), UsedName(reg2dp_datain_addr_high_1,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(cvif2img_dat_rd_rsp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(img2cvt_mn_wr_data,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(img2cvt_dat_wr_info_pd,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(img2sbuf_p0_wr_en,[Default]), UsedName(img_dat2mcif_rd_req_ready,[Default]), UsedName(pixel_planar0_lp_burst,[Default]), UsedName(sg2pack_data_entries,[Default]), UsedName(suggestName,[Default]), UsedName(sg2pack_mn_enable,[Default]), UsedName(pixel_planar1_sft,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(pixel_early_end,[Default]), UsedName(compileOptions,[Default]), UsedName(sg_is_done,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(sg2pack_sub_h_st,[Default]), UsedName(img2status_dat_slices,[Default]), UsedName(reg2dp_rsv_height,[Default]), UsedName(desiredName,[Default]), UsedName(pixel_planar1_lp_burst,[Default]), UsedName(img_dat2cvif_rd_req_ready,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(img2cvt_dat_wr_data,[Default]), UsedName(reg2dp_pixel_format,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(pixel_planar1_lp_vld,[Default]), UsedName(img2sbuf_p0_wr_addr,[Default]), UsedName(_onModuleClose,[Default]), UsedName(pixel_planar0_bundle_limit_1st,[Default]), UsedName(sg2pack_img_pvld,[Default]), UsedName(img_dat2mcif_rd_req_valid,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(img2cvt_dat_wr_en,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(pixel_planar1_rp_vld,[Default]), UsedName(slcg_img_gate_wg,[Default]), UsedName(u_sg,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(pixel_planar0_width_burst,[Default]), UsedName(reg2dp_mean_format,[Default]), UsedName(reg2dp_mean_bv,[Default]), UsedName(NV_NVDLA_CDMA_img,[Default]), UsedName(sg2pack_entry_end,[Default]), UsedName(instanceName,[Default]), UsedName(sg2pack_height_total,[Default]), UsedName(pixel_planar0_rp_burst,[Default]), UsedName(pixel_planar0_sft,[Default]), UsedName(getClass,[Default]), UsedName(img2sbuf_p0_rd_data,[Default]), UsedName(_id,[Default]), UsedName(dp2reg_img_rd_latency,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(img_dat2mcif_rd_req_pd,[Default]), UsedName(pixel_planar1_width_burst,[Default]), UsedName(sg2pack_img_pd,[Default]), UsedName(toString,[Default]), UsedName(pixel_planar0_bundle_limit,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(img2cvt_dat_wr_pad_mask,[Default]), UsedName(reg2dp_uv_line_stride,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img_dat2cvif_rd_req_valid,[Default]), UsedName(img2cvt_dat_wr_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(mcif2img_dat_rd_rsp_pd,[Default]), UsedName(pixel_bank,[Default]), UsedName(pixel_planar1_rp_burst,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_img;init;,[Default]), UsedName(img2cvt_dat_wr_sel,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(pixel_data_shrink,[Default]), UsedName(sg2pack_sub_h_mid,[Default]), UsedName(pixel_planar0_byte_sft,[Default]), UsedName(reg2dp_rsv_per_uv_line,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif2img_dat_rd_rsp_valid,[Default]), UsedName(pixel_packed_10b,[Default]), UsedName(circuitName,[Default]), UsedName(pixel_planar1_bundle_limit,[Default]), UsedName(pixel_planar0_lp_vld,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(reg2dp_mean_ax,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(sg2pack_img_prdy,[Default]), UsedName(mcif2img_dat_rd_rsp_ready,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_pixel_y_offset,[Default]), UsedName(u_ctrl,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(status2dma_valid_slices,[Default]), UsedName(io,[Default]), UsedName(sg2pack_entry_mid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(img2sbuf_p0_rd_en,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName(initializeInParent,[Default]), UsedName(slcg_img_gate_dc,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pixel_planar1_byte_sft,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(u_pack,[Default]), UsedName(reg2dp_rsv_per_line,[Default]), UsedName(img2status_state,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(img2sbuf_p0_wr_data,[Default]), UsedName(pixel_order,[Default]), UsedName(reg2dp_datain_addr_low_1,[Default]), UsedName(cvif2img_dat_rd_rsp_pd,[Default]), UsedName(reg2dp_mean_ry,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName(pixel_data_expand,[Default]), UsedName(pixel_planar1_bundle_limit_1st,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_pixel_mapping,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(img2sbuf_p0_rd_addr,[Default]), UsedName(pack_is_done,[Default]), UsedName(pixel_uint,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sg2pack_entry_st,[Default]), UsedName(dp2reg_img_rd_stall,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(sg2pack_sub_h_end,[Default]), UsedName(pixel_precision,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(reg2dp_pixel_x_offset,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(img_dat2cvif_rd_req_pd,[Default]), UsedName(pixel_planar0_rp_vld,[Default]), UsedName(IO,[Default]), UsedName(cvif2img_dat_rd_rsp_ready,[Default]), UsedName(layer_st,[Default]), UsedName(reg2dp_mean_gu,[Default]), UsedName(reg2dp_pad_left,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_img has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_rsv_y_index,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_pixel_sign_override,[Default]), UsedName(reg2dp_datain_addr_high_1,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(cvif2img_dat_rd_rsp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(img2cvt_mn_wr_data,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(img2cvt_dat_wr_info_pd,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(img2sbuf_p0_wr_en,[Default]), UsedName(img_dat2mcif_rd_req_ready,[Default]), UsedName(pixel_planar0_lp_burst,[Default]), UsedName(sg2pack_data_entries,[Default]), UsedName(suggestName,[Default]), UsedName(sg2pack_mn_enable,[Default]), UsedName(pixel_planar1_sft,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(pixel_early_end,[Default]), UsedName(compileOptions,[Default]), UsedName(sg_is_done,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(sg2pack_sub_h_st,[Default]), UsedName(img2status_dat_slices,[Default]), UsedName(reg2dp_rsv_height,[Default]), UsedName(desiredName,[Default]), UsedName(pixel_planar1_lp_burst,[Default]), UsedName(img_dat2cvif_rd_req_ready,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(img2cvt_dat_wr_data,[Default]), UsedName(reg2dp_pixel_format,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(pixel_planar1_lp_vld,[Default]), UsedName(img2sbuf_p0_wr_addr,[Default]), UsedName(_onModuleClose,[Default]), UsedName(pixel_planar0_bundle_limit_1st,[Default]), UsedName(sg2pack_img_pvld,[Default]), UsedName(img_dat2mcif_rd_req_valid,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(img2cvt_dat_wr_en,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(pixel_planar1_rp_vld,[Default]), UsedName(slcg_img_gate_wg,[Default]), UsedName(u_sg,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(pixel_planar0_width_burst,[Default]), UsedName(reg2dp_mean_format,[Default]), UsedName(reg2dp_mean_bv,[Default]), UsedName(NV_NVDLA_CDMA_img,[Default]), UsedName(sg2pack_entry_end,[Default]), UsedName(instanceName,[Default]), UsedName(sg2pack_height_total,[Default]), UsedName(pixel_planar0_rp_burst,[Default]), UsedName(pixel_planar0_sft,[Default]), UsedName(getClass,[Default]), UsedName(img2sbuf_p0_rd_data,[Default]), UsedName(_id,[Default]), UsedName(dp2reg_img_rd_latency,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(img_dat2mcif_rd_req_pd,[Default]), UsedName(pixel_planar1_width_burst,[Default]), UsedName(sg2pack_img_pd,[Default]), UsedName(toString,[Default]), UsedName(pixel_planar0_bundle_limit,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(img2cvt_dat_wr_pad_mask,[Default]), UsedName(reg2dp_uv_line_stride,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img_dat2cvif_rd_req_valid,[Default]), UsedName(img2cvt_dat_wr_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(mcif2img_dat_rd_rsp_pd,[Default]), UsedName(pixel_bank,[Default]), UsedName(pixel_planar1_rp_burst,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_img;init;,[Default]), UsedName(img2cvt_dat_wr_sel,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(pixel_data_shrink,[Default]), UsedName(sg2pack_sub_h_mid,[Default]), UsedName(pixel_planar0_byte_sft,[Default]), UsedName(reg2dp_rsv_per_uv_line,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif2img_dat_rd_rsp_valid,[Default]), UsedName(pixel_packed_10b,[Default]), UsedName(circuitName,[Default]), UsedName(pixel_planar1_bundle_limit,[Default]), UsedName(pixel_planar0_lp_vld,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(reg2dp_mean_ax,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(sg2pack_img_prdy,[Default]), UsedName(mcif2img_dat_rd_rsp_ready,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_pixel_y_offset,[Default]), UsedName(u_ctrl,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(status2dma_valid_slices,[Default]), UsedName(io,[Default]), UsedName(sg2pack_entry_mid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(img2sbuf_p0_rd_en,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName(initializeInParent,[Default]), UsedName(slcg_img_gate_dc,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pixel_planar1_byte_sft,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(u_pack,[Default]), UsedName(reg2dp_rsv_per_line,[Default]), UsedName(img2status_state,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(img2sbuf_p0_wr_data,[Default]), UsedName(pixel_order,[Default]), UsedName(reg2dp_datain_addr_low_1,[Default]), UsedName(cvif2img_dat_rd_rsp_pd,[Default]), UsedName(reg2dp_mean_ry,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName(pixel_data_expand,[Default]), UsedName(pixel_planar1_bundle_limit_1st,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_pixel_mapping,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(img2sbuf_p0_rd_addr,[Default]), UsedName(pack_is_done,[Default]), UsedName(pixel_uint,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sg2pack_entry_st,[Default]), UsedName(dp2reg_img_rd_stall,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(sg2pack_sub_h_end,[Default]), UsedName(pixel_precision,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(reg2dp_pixel_x_offset,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(img_dat2cvif_rd_req_pd,[Default]), UsedName(pixel_planar0_rp_vld,[Default]), UsedName(IO,[Default]), UsedName(cvif2img_dat_rd_rsp_ready,[Default]), UsedName(layer_st,[Default]), UsedName(reg2dp_mean_gu,[Default]), UsedName(reg2dp_pad_left,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_img)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_cmux...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_cmux)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_cmux)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_cmux,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(nvdla;NV_NVDLA_SDP_cmux;init;,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(op_en_load,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_SDP_cmux,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sdp_cmux2dp_ready,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(sdp_cmux2dp_valid,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sdp_cmux2dp_pd,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_cmux has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_cmux)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_DMAIF_rdreqDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_DMAIF_rdreqDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_DMAIF_rdreqDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_DMAIF_rdreqDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_DMAIF_rdreqDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_DMAIF_rdreqDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_DMAIF_rdreqDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_single_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_single_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_single_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_single_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(nvdla_csc_s_status_0_wren,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla_csc_s_status_0_out,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_CSC_single_reg,[Default]), UsedName(consumer,[Default]), UsedName(nvdla;NV_NVDLA_CSC_single_reg;init;,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla_csc_s_pointer_0_out,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_csc_s_pointer_0_wren,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_single_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(nvdla_csc_s_status_0_wren,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla_csc_s_status_0_out,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_CSC_single_reg,[Default]), UsedName(consumer,[Default]), UsedName(nvdla;NV_NVDLA_CSC_single_reg;init;,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla_csc_s_pointer_0_out,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_csc_s_pointer_0_wren,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_single_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_dualDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_dualDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_dualDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_reluDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_reluDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_reluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_nanDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_nanDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_nanDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_nanDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_CDP_DP_nanDriver,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_nanDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_nanDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_wtDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_wtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_wtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_wtDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_CDMA_wtDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_wtDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_wtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_idx_topDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_idx_topDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_relu...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_relu)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_relu)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_relu,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(trt_out_pvld,[Default]), UsedName(trt_out_prdy,[Default]), UsedName(trt_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_relu;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(relu_out_pvld,[Default]), UsedName(forceName,[Default]), UsedName(relu_data_out,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_relu,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(relu_out_prdy,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cfg_relu_bypass,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_relu has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(trt_out_pvld,[Default]), UsedName(trt_out_prdy,[Default]), UsedName(trt_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_relu;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(relu_out_pvld,[Default]), UsedName(forceName,[Default]), UsedName(relu_data_out,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_relu,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(relu_out_prdy,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(cfg_relu_bypass,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_relu)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_glb...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_glb)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_glb)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_glb,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(bdma2glb_done_intr_pd,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cacc2glb_done_intr_pd,[Default]), UsedName(##,[Default]), UsedName(rubik2glb_done_intr_pd,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(csb2glb_req_pd,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla_falcon_clk,[Default]), UsedName(sdp2glb_done_intr_pd,[Default]), UsedName(cdma_dat2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cdp2glb_done_intr_pd,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(csb2glb_req_pvld,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(csb2glb_req_prdy,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_glb,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(pdp2glb_done_intr_pd,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(cdma_wt2glb_done_intr_pd,[Default]), UsedName(glb2csb_resp_valid,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(core_intr,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(nvdla;NV_NVDLA_glb;init;,[Default]), UsedName(u_csb,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(u_ic,[Default]), UsedName(glb2csb_resp_pd,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_glb has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_glb)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_CORE_unit1dDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_CORE_unit1dDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_CORE_unit1dDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_CORE_unit1dDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_PDP_CORE_unit1dDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_CORE_unit1dDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_CORE_unit1dDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_wl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_wl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_wl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_wl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(nvdla;NV_NVDLA_CSC_wl;init;,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(NV_NVDLA_CSC_wl,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_wl has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_wl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_coreDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_coreDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_SDP_coreDriver,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_coreDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_coreDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_DMAIF_rdrspDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_DMAIF_rdrspDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_DMAIF_rdrspDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_DMAIF_rdrspDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_DMAIF_rdrspDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_DMAIF_rdrspDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_DMAIF_rdrspDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_activeDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_activeDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_activeDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_activeDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CMAC_CORE_activeDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_activeDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_activeDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_CVT_cell...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_CVT_cell)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_CVT_cell)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_CVT_cell,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(chn_alu_in_rsc_z,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(chn_data_out_rsc_z,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(_id,[Default]), UsedName(NV_NVDLA_CDMA_CVT_cell,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(chn_alu_in_rsc_lz,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_out_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_CVT_cell;init;,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(hashCode,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(chn_alu_in_rsc_vz,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_CVT_cell has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(chn_alu_in_rsc_z,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(chn_data_in_rsc_vz,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(chn_data_out_rsc_z,[Default]), UsedName(chn_data_in_rsc_lz,[Default]), UsedName(_id,[Default]), UsedName(NV_NVDLA_CDMA_CVT_cell,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(chn_alu_in_rsc_lz,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(cfg_out_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_CVT_cell;init;,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(chn_data_out_rsc_vz,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cfg_mul_in_rsc_z,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(chn_data_in_rsc_z,[Default]), UsedName(hashCode,[Default]), UsedName(chn_data_out_rsc_lz,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(chn_alu_in_rsc_vz,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_CVT_cell)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_inp_top...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_inp_top)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_inp_top)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_inp_top,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(chn_inp_in_pd,[Default]), UsedName(_id,[Default]), UsedName(chn_inp_out_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_inp_top;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_inp_top,[Default]), UsedName(generateComponent,[Default]), UsedName(chn_inp_out_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_inp_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(chn_inp_in_pvld,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(chn_inp_out_prdy,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_inp_top has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(chn_inp_in_pd,[Default]), UsedName(_id,[Default]), UsedName(chn_inp_out_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_inp_top;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_inp_top,[Default]), UsedName(generateComponent,[Default]), UsedName(chn_inp_out_pvld,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(chn_inp_in_prdy,[Default]), UsedName(circuitName,[Default]), UsedName(chn_inp_in_pvld,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(chn_inp_out_prdy,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_inp_top)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_ig...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_ig,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dma_rd_req_vld,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_ig,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(dma_rd_req_ram_type,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(dp2reg_mrdma_stall,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(dma_rd_req_rdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(ig2cq_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(dma_rd_req_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(ig2cq_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(ig2cq_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_SDP_MRDMA_ig;init;,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_ig has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dma_rd_req_vld,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_ig,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(dma_rd_req_ram_type,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(dp2reg_mrdma_stall,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(dma_rd_req_rdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(ig2cq_pd,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(dma_rd_req_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(ig2cq_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(ig2cq_pvld,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_SDP_MRDMA_ig;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_ig)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_fifo_flop_basedDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_fifo_flop_basedDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_fifo_flop_basedDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_wdmaDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_wdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_wdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_wdmaDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_wdmaDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_wdmaDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_wdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_gateDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_gateDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_gateDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_gateDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_RDMA_gateDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_gateDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_RDMA_gateDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_gateDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_REG_single...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_REG_single,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(lut_lo_start,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(lut_lo_slope_oflow_scale,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(lut_le_end,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(lut_access_type,[Default]), UsedName(reg_offset,[Default]), UsedName(lut_lo_slope_uflow_scale,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(lut_le_function,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(lut_le_slope_oflow_shift,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_le_slope_uflow_scale,[Default]), UsedName(lut_le_index_offset,[Default]), UsedName(lut_addr,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(lut_data,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(lut_le_start,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(lut_table_id,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_SDP_REG_single,[Default]), UsedName(==,[Default]), UsedName(lut_lo_end,[Default]), UsedName(ne,[Default]), UsedName(lut_oflow_priority,[Default]), UsedName(io,[Default]), UsedName(lut_uflow_priority,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(lut_le_slope_oflow_scale,[Default]), UsedName(lut_le_slope_uflow_shift,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(nvdla;NV_NVDLA_SDP_REG_single;init;,[Default]), UsedName(lut_addr_trigger,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(lut_le_index_select,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(lut_data_trigger,[Default]), UsedName(lut_lo_slope_oflow_shift,[Default]), UsedName(hashCode,[Default]), UsedName(lut_hybrid_priority,[Default]), UsedName(clock,[Default]), UsedName(lut_lo_slope_uflow_shift,[Default]), UsedName(getPublicFields,[Default]), UsedName(lut_lo_index_select,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_REG_single has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(lut_lo_start,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(lut_lo_slope_oflow_scale,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(lut_le_end,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(lut_access_type,[Default]), UsedName(reg_offset,[Default]), UsedName(lut_lo_slope_uflow_scale,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(lut_le_function,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(lut_le_slope_oflow_shift,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_le_slope_uflow_scale,[Default]), UsedName(lut_le_index_offset,[Default]), UsedName(lut_addr,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(lut_data,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(lut_le_start,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(lut_table_id,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_SDP_REG_single,[Default]), UsedName(==,[Default]), UsedName(lut_lo_end,[Default]), UsedName(ne,[Default]), UsedName(lut_oflow_priority,[Default]), UsedName(io,[Default]), UsedName(lut_uflow_priority,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(lut_le_slope_oflow_scale,[Default]), UsedName(lut_le_slope_uflow_shift,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(nvdla;NV_NVDLA_SDP_REG_single;init;,[Default]), UsedName(lut_addr_trigger,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(lut_le_index_select,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(lut_data_trigger,[Default]), UsedName(lut_lo_slope_oflow_shift,[Default]), UsedName(hashCode,[Default]), UsedName(lut_hybrid_priority,[Default]), UsedName(clock,[Default]), UsedName(lut_lo_slope_uflow_shift,[Default]), UsedName(getPublicFields,[Default]), UsedName(lut_lo_index_select,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_idx...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_idx)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_idx)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_idx,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(lut_out_frac,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(lut_out_x,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_lut_hybrid_priority,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(lut_in_prdy,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_lut_uflow_priority,[Default]), UsedName(cfg_lut_le_index_offset,[Default]), UsedName(instanceName,[Default]), UsedName(cfg_lut_le_index_select,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_lut_lo_start,[Default]), UsedName(cfg_lut_lo_index_select,[Default]), UsedName(toString,[Default]), UsedName(cfg_lut_le_function,[Default]), UsedName(lut_data_in,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(lut_out_uflow,[Default]), UsedName(lut_out_le_hit,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cfg_lut_oflow_priority,[Default]), UsedName(lut_out_ram_sel,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(lut_out_oflow,[Default]), UsedName(annotate,[Default]), UsedName(lut_in_pvld,[Default]), UsedName(lut_out_lo_hit,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(lut_out_prdy,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_idx;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(lut_out_pvld,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_idx,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_lut_le_start,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(lut_out_ram_addr,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_idx has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(lut_out_frac,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(lut_out_x,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_lut_hybrid_priority,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(lut_in_prdy,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_lut_uflow_priority,[Default]), UsedName(cfg_lut_le_index_offset,[Default]), UsedName(instanceName,[Default]), UsedName(cfg_lut_le_index_select,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_lut_lo_start,[Default]), UsedName(cfg_lut_lo_index_select,[Default]), UsedName(toString,[Default]), UsedName(cfg_lut_le_function,[Default]), UsedName(lut_data_in,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(lut_out_uflow,[Default]), UsedName(lut_out_le_hit,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cfg_lut_oflow_priority,[Default]), UsedName(lut_out_ram_sel,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(lut_out_oflow,[Default]), UsedName(annotate,[Default]), UsedName(lut_in_pvld,[Default]), UsedName(lut_out_lo_hit,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(lut_out_prdy,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_idx;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(lut_out_pvld,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_idx,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_lut_le_start,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(lut_out_ram_addr,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_idx)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_glbDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_glbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_glbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_glbDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_glbDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_glbDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_glbDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_core...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_core)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_core)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_core,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(u_active,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(sc2mac_dat_data,[Default]), UsedName(mac2accu_data,[Default]), UsedName(mac2accu_pvld,[Default]), UsedName(in_wt_pvld,[Default]), UsedName(dat_pre_stripe_st,[Default]), UsedName(suggestName,[Default]), UsedName(in_wt_sel,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(wt_actv_nz,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(u_rt_out,[Default]), UsedName(dat_actv_nz,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(in_dat_pvld,[Default]), UsedName(out_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_CMAC_core,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dat_pre_stripe_end,[Default]), UsedName(forceName,[Default]), UsedName(in_wt_mask,[Default]), UsedName(dat_actv_pvld,[Default]), UsedName(instanceName,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_core;init;,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(out_data,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(sc2mac_wt_sel,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(wt_actv_data,[Default]), UsedName(reset,[Default]), UsedName(sc2mac_wt_data,[Default]), UsedName(in_dat_data,[Default]), UsedName(sc2mac_dat_pvld,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2mac_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(u_slcg_op,[Default]), UsedName(mac2accu_mask,[Default]), UsedName(mac2accu_pd,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(u_rt_in,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(nvdla_op_gated_clk,[Default]), UsedName(wt_actv_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(in_dat_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(out_mask,[Default]), UsedName(==,[Default]), UsedName(out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(u_mac,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(in_dat_stripe_end,[Default]), UsedName(in_dat_mask,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(in_wt_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(sc2mac_dat_mask,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sc2mac_wt_pvld,[Default]), UsedName(in_dat_stripe_st,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(mac2accu_mode,[Default]), UsedName(getPublicFields,[Default]), UsedName(sc2mac_wt_mask,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(dat_actv_data,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_core has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_core)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_expnDriver,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_expnDriver,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_lut_expnDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_CMAC_CORE_rt_inDriver,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_inDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_single_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_single_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_single_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_single_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(nvdla_cdma_s_status_0_wren,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(nvdla_cdma_s_status_0_out,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(arb_weight,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(nvdla_cdma_s_cbuf_flush_status_0_wren,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(nvdla_cdma_s_arbiter_0_out,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(NV_NVDLA_CDMA_single_reg,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(nvdla_cdma_s_pointer_0_wren,[Default]), UsedName(getRef,[Default]), UsedName(nvdla_cdma_s_cbuf_flush_status_0_out,[Default]), UsedName(nvdla_cdma_s_arbiter_0_wren,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(arb_wmb,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_single_reg;init;,[Default]), UsedName(portsSize,[Default]), UsedName(flush_done,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla_cdma_s_pointer_0_out,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_single_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(nvdla_cdma_s_status_0_wren,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(nvdla_cdma_s_status_0_out,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(arb_weight,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(nvdla_cdma_s_cbuf_flush_status_0_wren,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(nvdla_cdma_s_arbiter_0_out,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(NV_NVDLA_CDMA_single_reg,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(nvdla_cdma_s_pointer_0_wren,[Default]), UsedName(getRef,[Default]), UsedName(nvdla_cdma_s_cbuf_flush_status_0_out,[Default]), UsedName(nvdla_cdma_s_arbiter_0_wren,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(arb_wmb,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_single_reg;init;,[Default]), UsedName(portsSize,[Default]), UsedName(flush_done,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla_cdma_s_pointer_0_out,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_single_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_shared_buffer...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_shared_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_shared_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_shared_buffer,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(dc2sbuf_p0_wr_en,[Default]), UsedName(img2sbuf_p0_wr_en,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(dc2sbuf_p1_wr_data,[Default]), UsedName(desiredName,[Default]), UsedName(dc2sbuf_p0_wr_data,[Default]), UsedName(img2sbuf_p1_rd_data,[Default]), UsedName(toNamed,[Default]), UsedName(img2sbuf_p0_wr_addr,[Default]), UsedName(_onModuleClose,[Default]), UsedName(img2sbuf_p1_wr_data,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dc2sbuf_p1_rd_en,[Default]), UsedName(forceName,[Default]), UsedName(dc2sbuf_p0_rd_data,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(img2sbuf_p0_rd_data,[Default]), UsedName(_id,[Default]), UsedName(img2sbuf_p1_wr_en,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dc2sbuf_p1_wr_en,[Default]), UsedName(dc2sbuf_p1_wr_addr,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_shared_buffer;init;,[Default]), UsedName(dc2sbuf_p0_rd_addr,[Default]), UsedName(img2sbuf_p1_rd_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dc2sbuf_p1_rd_addr,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(img2sbuf_p1_rd_addr,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(img2sbuf_p1_wr_addr,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(img2sbuf_p0_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(img2sbuf_p0_wr_data,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dc2sbuf_p1_rd_data,[Default]), UsedName(img2sbuf_p0_rd_addr,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(dc2sbuf_p0_rd_en,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(NV_NVDLA_CDMA_shared_buffer,[Default]), UsedName(dc2sbuf_p0_wr_addr,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_shared_buffer has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(dc2sbuf_p0_wr_en,[Default]), UsedName(img2sbuf_p0_wr_en,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(dc2sbuf_p1_wr_data,[Default]), UsedName(desiredName,[Default]), UsedName(dc2sbuf_p0_wr_data,[Default]), UsedName(img2sbuf_p1_rd_data,[Default]), UsedName(toNamed,[Default]), UsedName(img2sbuf_p0_wr_addr,[Default]), UsedName(_onModuleClose,[Default]), UsedName(img2sbuf_p1_wr_data,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dc2sbuf_p1_rd_en,[Default]), UsedName(forceName,[Default]), UsedName(dc2sbuf_p0_rd_data,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(img2sbuf_p0_rd_data,[Default]), UsedName(_id,[Default]), UsedName(img2sbuf_p1_wr_en,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dc2sbuf_p1_wr_en,[Default]), UsedName(dc2sbuf_p1_wr_addr,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_shared_buffer;init;,[Default]), UsedName(dc2sbuf_p0_rd_addr,[Default]), UsedName(img2sbuf_p1_rd_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dc2sbuf_p1_rd_addr,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(img2sbuf_p1_rd_addr,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(img2sbuf_p1_wr_addr,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(img2sbuf_p0_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(img2sbuf_p0_wr_data,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dc2sbuf_p1_rd_data,[Default]), UsedName(img2sbuf_p0_rd_addr,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(dc2sbuf_p0_rd_en,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(NV_NVDLA_CDMA_shared_buffer,[Default]), UsedName(dc2sbuf_p0_wr_addr,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_shared_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_egDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_egDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_egDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_egDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_RDMA_egDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_egDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_egDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_EG_ro...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_EG_ro)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_EG_ro)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_EG_ro,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_RDMA_EG_ro,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(sdp_rdma2dp_pd,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(rod_wr_rdy,[Default]), UsedName(_onModuleClose,[Default]), UsedName(layer_end,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_EG_ro;init;,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(rod_wr_pd,[Default]), UsedName(toString,[Default]), UsedName(cfg_mode_per_element,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(roc_wr_vld,[Default]), UsedName(rod_wr_mask,[Default]), UsedName(sdp_rdma2dp_valid,[Default]), UsedName(sdp_rdma2dp_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(cfg_dp_size_1byte,[Default]), UsedName(roc_wr_pd,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(roc_wr_rdy,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(rod_wr_vld,[Default]), UsedName(cfg_dp_8,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_EG_ro has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_EG_ro)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_EG_cmdDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_EG_cmdDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmdDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_dc...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_dc)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_dc)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_dc,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_dc;init;,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(NV_NVDLA_CDMA_dc,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_dc has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_dc;init;,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(NV_NVDLA_CDMA_dc,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_dc)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_CORE_Y_lutDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_Y_lutDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_sdpDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_sdpDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_sdpDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_sdpDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NV_NVDLA_sdpDriver,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_sdpDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_sdpDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_RDMA_REG_single...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_RDMA_REG_single,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(producer_out,[Default]), UsedName(nvdla_pdp_rdma_s_pointer_0_wren,[Default]), UsedName(##,[Default]), UsedName(nvdla_pdp_rdma_s_status_0_wren,[Default]), UsedName(NV_NVDLA_PDP_RDMA_REG_single,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(nvdla;NV_NVDLA_PDP_RDMA_REG_single;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(nvdla_pdp_rdma_s_status_0_out,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla_pdp_rdma_s_pointer_0_out,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_RDMA_REG_single has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(producer_out,[Default]), UsedName(nvdla_pdp_rdma_s_pointer_0_wren,[Default]), UsedName(##,[Default]), UsedName(nvdla_pdp_rdma_s_status_0_wren,[Default]), UsedName(NV_NVDLA_PDP_RDMA_REG_single,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(nvdla;NV_NVDLA_PDP_RDMA_REG_single;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(nvdla_pdp_rdma_s_status_0_out,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla_pdp_rdma_s_pointer_0_out,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_erdmaDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_erdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_erdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_erdmaDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_erdmaDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_erdmaDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_erdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_inpDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_inpDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_inpDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.csbMasterConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.csbMasterConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.csbMasterConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.csbMasterConfiguration,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(FPGA,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(nvdla;csbMasterConfiguration;init;,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(csbMasterConfiguration,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.csbMasterConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(FPGA,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(nvdla;csbMasterConfiguration;init;,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(csbMasterConfiguration,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.csbMasterConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_gate...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_gate)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_gate)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_gate,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk_slcg_2_en,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(bcore_slcg_en,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla_core_clk_slcg_2,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(ncore_slcg_en,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(NV_NVDLA_SDP_CORE_gate,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(nvdla_gated_ecore_clk,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_gate;init;,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(ecore_slcg_en,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla_gated_bcore_clk,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(nvdla_gated_ncore_clk,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(nvdla_core_clk_slcg_1_en,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla_core_clk_slcg_0,[Default]), UsedName(hashCode,[Default]), UsedName(nvdla_core_clk_slcg_1,[Default]), UsedName(clock,[Default]), UsedName(nvdla_core_clk_slcg_0_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_gate has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk_slcg_2_en,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(bcore_slcg_en,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla_core_clk_slcg_2,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(ncore_slcg_en,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(NV_NVDLA_SDP_CORE_gate,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(nvdla_gated_ecore_clk,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_SDP_CORE_gate;init;,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(ecore_slcg_en,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla_gated_bcore_clk,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(nvdla_gated_ncore_clk,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(nvdla_core_clk_slcg_1_en,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nvdla_core_clk_slcg_0,[Default]), UsedName(hashCode,[Default]), UsedName(nvdla_core_clk_slcg_1,[Default]), UsedName(clock,[Default]), UsedName(nvdla_core_clk_slcg_0_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_gate)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_REG_single...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_REG_single,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_REG_single;init;,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_single,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_REG_single has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_REG_single;init;,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_single,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_DMAIF_wrDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_DMAIF_wrDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_DMAIF_wrDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_DMAIF_wrDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_DMAIF_wrDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_DMAIF_wrDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_DMAIF_wrDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_rt_out;rt_outImpl;init;,[Default]), UsedName(rt_outImpl,[Default]), UsedName(out_rt_mask_d,[Default]), UsedName(out_rt_data_d,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(out_rt_pvld_d,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_done_d,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(out_rt_pd_d,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_rt_out;rt_outImpl;init;,[Default]), UsedName(rt_outImpl,[Default]), UsedName(out_rt_mask_d,[Default]), UsedName(out_rt_data_d,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(out_rt_pvld_d,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(dp2reg_done_d,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(out_rt_pd_d,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_out.rt_outImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_slcgDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_slcgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_slcgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_slcgDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CDP_slcgDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_slcgDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CDP_slcgDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_slcgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_relu...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_relu)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_relu)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_relu,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_relu;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(data_in_sign,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(data_out,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(data_in,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_SDP_HLS_relu,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_relu has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_relu;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(data_in_sign,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(data_out,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(data_in,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_SDP_HLS_relu,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_relu)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cq2eg_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cmd2dat_dma_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_EG_cmd,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cmd2dat_spt_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cmd2dat_spt_prdy,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(eg_done,[Default]), UsedName(cmd2dat_spt_pvld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(cq2eg_pvld,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cq2eg_prdy,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cmd2dat_dma_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(nvdla;NV_NVDLA_SDP_MRDMA_EG_cmd;init;,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(cmd2dat_dma_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cq2eg_pd,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cmd2dat_dma_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(NV_NVDLA_SDP_MRDMA_EG_cmd,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cmd2dat_spt_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cmd2dat_spt_prdy,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(eg_done,[Default]), UsedName(cmd2dat_spt_pvld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(cq2eg_pvld,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cq2eg_prdy,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(cmd2dat_dma_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(nvdla;NV_NVDLA_SDP_MRDMA_EG_cmd;init;,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(cmd2dat_dma_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_MRDMA_EG_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_RDMA_REG_dual...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_RDMA_REG_dual,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla;NV_NVDLA_PDP_RDMA_REG_dual;init;,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cube_in_width,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(src_surface_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(cube_in_height,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(partial_width_in_first,[Default]), UsedName(perf_read_stall,[Default]), UsedName(dma_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(input_data,[Default]), UsedName(toString,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(src_ram_type,[Default]), UsedName(isInstanceOf,[Default]), UsedName(pad_width,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(partial_width_in_last,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_PDP_RDMA_REG_dual,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(kernel_width,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(cube_in_channel,[Default]), UsedName(==,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(kernel_stride_width,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(partial_width_in_mid,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(split_num,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_RDMA_REG_dual has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla;NV_NVDLA_PDP_RDMA_REG_dual;init;,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cube_in_width,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(src_surface_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(cube_in_height,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(partial_width_in_first,[Default]), UsedName(perf_read_stall,[Default]), UsedName(dma_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(input_data,[Default]), UsedName(toString,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(src_ram_type,[Default]), UsedName(isInstanceOf,[Default]), UsedName(pad_width,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(partial_width_in_last,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_PDP_RDMA_REG_dual,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(kernel_width,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(cube_in_channel,[Default]), UsedName(==,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(kernel_stride_width,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(partial_width_in_mid,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(split_num,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_mulDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_mulDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_CDP_DP_mulDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_mulDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_delivery_ctrl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_delivery_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_delivery_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_delivery_ctrl,ModifiedNames(changes = UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(suggestName,[Default]), UsedName(dlv_mask,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_dataout_addr,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(dbuf_wr_data,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(wait_for_op_en,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(NV_NVDLA_CACC_delivery_ctrl,[Default]), UsedName(dp2reg_done,[Default]), UsedName(dbuf_wr_addr,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(dlv_data,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dbuf_rd_layer_end,[Default]), UsedName(dbuf_rd_addr,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dlv_valid,[Default]), UsedName(_closed,[Default]), UsedName(dlv_pd,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_dataout_channel,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_dataout_height,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(dbuf_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbuf_wr_en,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_dataout_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla;NV_NVDLA_CACC_delivery_ctrl;init;,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(dbuf_rd_ready,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_delivery_ctrl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(suggestName,[Default]), UsedName(dlv_mask,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(reg2dp_dataout_addr,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(dbuf_wr_data,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(wait_for_op_en,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(NV_NVDLA_CACC_delivery_ctrl,[Default]), UsedName(dp2reg_done,[Default]), UsedName(dbuf_wr_addr,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(dlv_data,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dbuf_rd_layer_end,[Default]), UsedName(dbuf_rd_addr,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dlv_valid,[Default]), UsedName(_closed,[Default]), UsedName(dlv_pd,[Default]), UsedName(circuitName,[Default]), UsedName(reg2dp_dataout_channel,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_dataout_height,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(dbuf_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbuf_wr_en,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_dataout_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla;NV_NVDLA_CACC_delivery_ctrl;init;,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(dbuf_rd_ready,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_delivery_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_status...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_status)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_status)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_status,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dc2status_done,[Default]), UsedName(name,[Default]), UsedName(entries_reg_en,[Default]), UsedName(dat_done_intr_w,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(dc2status_dat_entries,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(status2dma_wr_idx_inc,[Default]), UsedName(update_all,[Default]), UsedName(dc2status_dat_slices,[Default]), UsedName(suggestName,[Default]), UsedName(entries_add,[Default]), UsedName(cdma_dat2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_status;init;,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(img2status_dat_slices,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(img2status_done,[Default]), UsedName(sc2cdma_dat_updt,[Default]), UsedName(dat_done_intr,[Default]), UsedName(sc2cdma_dat_slices,[Default]), UsedName(status2dma_free_entries_w,[Default]), UsedName(_onModuleClose,[Default]), UsedName(status2dma_wr_idx_inc_wrap,[Default]), UsedName(layer_end,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(status2dma_valid_entries_w,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(slices_add,[Default]), UsedName(status2dma_valid_slices_w,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(status2dma_free_entries_out,[Default]), UsedName(parentModName,[Default]), UsedName(wt2status_done,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(wt_done_intr_w,[Default]), UsedName(forceName,[Default]), UsedName(cdma2sc_dat_pending_ack,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(dc2status_dat_updt,[Default]), UsedName(_id,[Default]), UsedName(status2dma_wr_idx_overflow,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(dp2reg_done,[Default]), UsedName(status2dma_valid_slices_out,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(pending_ack,[Default]), UsedName(wt_done_intr,[Default]), UsedName(entries_sub,[Default]), UsedName(pending_req,[Default]), UsedName(dat2status_done,[Default]), UsedName(real_bank_reg_en,[Default]), UsedName(dc2status_pend,[Default]), UsedName(pending_ack_w,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(status2dma_fsm_switch_w,[Default]), UsedName(dat2status_done_d1,[Default]), UsedName(wt2status_done_d1,[Default]), UsedName(cdma2sc_dat_entries,[Default]), UsedName(circuitName,[Default]), UsedName(status2dma_wr_idx_w,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(dat_entries_d,[Default]), UsedName(cdma_wt2glb_done_intr_pd,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(update_dma,[Default]), UsedName(cdma2sc_dat_updt,[Default]), UsedName(==,[Default]), UsedName(img2status_pend,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(layer_end_w,[Default]), UsedName(status2dma_valid_slices,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(real_bank,[Default]), UsedName(dat_updt_d,[Default]), UsedName(img2status_state,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(wt2status_state,[Default]), UsedName(status2dma_valid_entries,[Default]), UsedName($asInstanceOf,[Default]), UsedName(status2dma_wr_idx_out,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cdma2sc_dat_slices,[Default]), UsedName(sc2cdma_dat_entries,[Default]), UsedName(status2dma_fsm_switch_out,[Default]), UsedName(dp2reg_consumer,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(NV_NVDLA_CDMA_status,[Default]), UsedName(dc2status_state,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(slices_sub,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(real_bank_w,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(dat_slices_d,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_status has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dc2status_done,[Default]), UsedName(name,[Default]), UsedName(entries_reg_en,[Default]), UsedName(dat_done_intr_w,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(dc2status_dat_entries,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(status2dma_wr_idx_inc,[Default]), UsedName(update_all,[Default]), UsedName(dc2status_dat_slices,[Default]), UsedName(suggestName,[Default]), UsedName(entries_add,[Default]), UsedName(cdma_dat2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_status;init;,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(img2status_dat_slices,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(img2status_done,[Default]), UsedName(sc2cdma_dat_updt,[Default]), UsedName(dat_done_intr,[Default]), UsedName(sc2cdma_dat_slices,[Default]), UsedName(status2dma_free_entries_w,[Default]), UsedName(_onModuleClose,[Default]), UsedName(status2dma_wr_idx_inc_wrap,[Default]), UsedName(layer_end,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(status2dma_valid_entries_w,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(slices_add,[Default]), UsedName(status2dma_valid_slices_w,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(status2dma_free_entries_out,[Default]), UsedName(parentModName,[Default]), UsedName(wt2status_done,[Default]), UsedName(getModulePorts,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(wt_done_intr_w,[Default]), UsedName(forceName,[Default]), UsedName(cdma2sc_dat_pending_ack,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(dc2status_dat_updt,[Default]), UsedName(_id,[Default]), UsedName(status2dma_wr_idx_overflow,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(dp2reg_done,[Default]), UsedName(status2dma_valid_slices_out,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(pending_ack,[Default]), UsedName(wt_done_intr,[Default]), UsedName(entries_sub,[Default]), UsedName(pending_req,[Default]), UsedName(dat2status_done,[Default]), UsedName(real_bank_reg_en,[Default]), UsedName(dc2status_pend,[Default]), UsedName(pending_ack_w,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(status2dma_fsm_switch_w,[Default]), UsedName(dat2status_done_d1,[Default]), UsedName(wt2status_done_d1,[Default]), UsedName(cdma2sc_dat_entries,[Default]), UsedName(circuitName,[Default]), UsedName(status2dma_wr_idx_w,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(dat_entries_d,[Default]), UsedName(cdma_wt2glb_done_intr_pd,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(update_dma,[Default]), UsedName(cdma2sc_dat_updt,[Default]), UsedName(==,[Default]), UsedName(img2status_pend,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(layer_end_w,[Default]), UsedName(status2dma_valid_slices,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(real_bank,[Default]), UsedName(dat_updt_d,[Default]), UsedName(img2status_state,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(wt2status_state,[Default]), UsedName(status2dma_valid_entries,[Default]), UsedName($asInstanceOf,[Default]), UsedName(status2dma_wr_idx_out,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cdma2sc_dat_slices,[Default]), UsedName(sc2cdma_dat_entries,[Default]), UsedName(status2dma_fsm_switch_out,[Default]), UsedName(dp2reg_consumer,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(NV_NVDLA_CDMA_status,[Default]), UsedName(dc2status_state,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(slices_sub,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(real_bank_w,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(dat_slices_d,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_status)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_CDMA_WT_8ATMM_fifoDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_WT_8ATMM_fifoDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_regDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_regDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_regDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_regDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_regDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_fifo...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_fifo,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla;NV_NVDLA_SDP_fifo;init;,[Default]), UsedName(name,[Default]), UsedName(wr_rdy,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(rd_vld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(NV_NVDLA_SDP_fifo,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(wr_vld,[Default]), UsedName(generateComponent,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(rd_rdy,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_fifo has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla;NV_NVDLA_SDP_fifo;init;,[Default]), UsedName(name,[Default]), UsedName(wr_rdy,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(rd_vld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(NV_NVDLA_SDP_fifo,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(rd_data,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(wr_vld,[Default]), UsedName(generateComponent,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(rd_rdy,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_fifo)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_RDMA_regDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_RDMA_regDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_CDP_RDMA_regDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_RDMA_regDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_CDP_RDMA_regDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_RDMA_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_trt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_trt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_trt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_trt,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(bypass_trt_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(trt_out_pvld,[Default]), UsedName(trt_out_prdy,[Default]), UsedName(mul_data_out,[Default]), UsedName(trt_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_trt;init;,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_trt,[Default]), UsedName(cfg_mul_shift_value,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(mul_out_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mul_out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_trt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(bypass_trt_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(trt_out_pvld,[Default]), UsedName(trt_out_prdy,[Default]), UsedName(mul_data_out,[Default]), UsedName(trt_data_out,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_X_int_trt;init;,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_trt,[Default]), UsedName(cfg_mul_shift_value,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(mul_out_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(mul_out_pvld,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_trt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_C_intDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_C_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_C_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_C_intDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_HLS_C_intDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_C_intDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(NV_NVDLA_SDP_HLS_C_intDriver,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_C_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cacc...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cacc)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cacc)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cacc,ModifiedNames(changes = UsedName(mac_b2accu_mask,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cacc2glb_done_intr_pd,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla;NV_NVDLA_cacc;init;,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(mac_b2accu_mode,[Default]), UsedName(toNamed,[Default]), UsedName(csb2cacc_req_pd,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(mac_b2accu_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mac_b2accu_pvld,[Default]), UsedName(mac_a2accu_pvld,[Default]), UsedName(mac_a2accu_pd,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(NV_NVDLA_cacc,[Default]), UsedName(cacc2csb_resp_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(csb2cacc_req_prdy,[Default]), UsedName(mac_a2accu_mask,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mac_a2accu_data,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(mac_a2accu_mode,[Default]), UsedName(circuitName,[Default]), UsedName(cacc2csb_resp_pd,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(mac_b2accu_pd,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(csb2cacc_req_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cacc has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(mac_b2accu_mask,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cacc2glb_done_intr_pd,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nvdla;NV_NVDLA_cacc;init;,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(mac_b2accu_mode,[Default]), UsedName(toNamed,[Default]), UsedName(csb2cacc_req_pd,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(mac_b2accu_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mac_b2accu_pvld,[Default]), UsedName(mac_a2accu_pvld,[Default]), UsedName(mac_a2accu_pd,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(NV_NVDLA_cacc,[Default]), UsedName(cacc2csb_resp_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(csb2cacc_req_prdy,[Default]), UsedName(mac_a2accu_mask,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mac_a2accu_data,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(mac_a2accu_mode,[Default]), UsedName(circuitName,[Default]), UsedName(cacc2csb_resp_pd,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(mac_b2accu_pd,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(csb2cacc_req_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cacc)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_dma_muxDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_dma_muxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_dma_muxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_dma_muxDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(NV_NVDLA_CDMA_dma_muxDriver,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_dma_muxDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_dma_muxDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_statusDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_statusDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_statusDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_statusDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_CDMA_statusDriver,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_statusDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_statusDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_wtIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_wtIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_wtIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_wtIO,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(width,[Default]), UsedName(direction_=,[Default]), UsedName(direction,[Default]), UsedName(##,[Default]), UsedName(cdma2buf_wt_wr_addr,[Default]), UsedName(cvif2cdma_wt_rd_rsp_pd,[Default]), UsedName(allElements,[Default]), UsedName(toBits,[Default]), UsedName(dp2reg_wt_rd_latency,[Default]), UsedName(suggestName,[Default]), UsedName(cdma2sc_wt_kernels,[Default]), UsedName(reg2dp_weight_format,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cvif2cdma_wt_rd_rsp_ready,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cloneType,[Default]), UsedName(dp2reg_wt_flush_done,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(do_asTypeOf,[Default]), UsedName(hasBinding,[Default]), UsedName(asTypeOf,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_weight_reuse,[Default]), UsedName(reg2dp_wmb_addr_high,[Default]), UsedName(bindingOpt,[Default]), UsedName(setRef,[Default]), UsedName(mcif2cdma_wt_rd_rsp_pd,[Default]), UsedName(forceName,[Default]), UsedName(typeEquivalent,[Default]), UsedName(connectFromBits,[Default]), UsedName(instanceName,[Default]), UsedName(topBinding,[Default]), UsedName(cdma2buf_wt_wr_data,[Default]), UsedName(lref,[Default]), UsedName(getClass,[Default]), UsedName(getWidth,[Default]), UsedName(reg2dp_weight_addr_high,[Default]), UsedName(ref,[Default]), UsedName(_id,[Default]), UsedName(toPrintable,[Default]), UsedName(reg2dp_arb_wmb,[Default]), UsedName(legacyConnect,[Default]), UsedName(dp2reg_wt_rd_stall,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(reg2dp_wmb_bytes,[Default]), UsedName(elements,[Default]), UsedName(cdma_wt2cvif_rd_req_valid,[Default]), UsedName(connect,[Default]), UsedName(sc2cdma_wmb_entries,[Default]), UsedName(toString,[Default]), UsedName(cdma_wt2cvif_rd_req_ready,[Default]), UsedName(reg2dp_weight_kernel,[Default]), UsedName(cdma_wt2mcif_rd_req_pd,[Default]), UsedName(asUInt,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_weight_bank,[Default]), UsedName(mcif2cdma_wt_rd_rsp_ready,[Default]), UsedName(binding_=,[Default]), UsedName(sc2cdma_wt_updt,[Default]), UsedName(toPrintableHelper,[Default]), UsedName(getElements,[Default]), UsedName(NV_NVDLA_CDMA_wtIO,[Default]), UsedName(do_asUInt,[Default]), UsedName(cdma_wt2mcif_rd_req_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(cdma_wt2cvif_rd_req_pd,[Default]), UsedName(badConnect,[Default]), UsedName(circuitName,[Default]), UsedName(className,[Default]), UsedName(dp2reg_inf_weight_num,[Default]), UsedName(cdma2sc_wt_pending_ack,[Default]), UsedName(sc2cdma_wt_kernels,[Default]), UsedName(pathName,[Default]), UsedName(ignoreSeq,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(litValue,[Default]), UsedName(isWidthKnown,[Default]), UsedName(isLit,[Default]), UsedName(sc2cdma_wt_pending_req,[Default]), UsedName(cloneTypeFull,[Default]), UsedName(cdma2sc_wmb_entries,[Default]), UsedName(cdma_wt2mcif_rd_req_valid,[Default]), UsedName(<>,[Default]), UsedName(reg2dp_wgs_addr_low,[Default]), UsedName(dp2reg_nan_weight_num,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_arb_weight,[Default]), UsedName(reg2dp_byte_per_kernel,[Default]), UsedName(specifiedDirection_=,[Default]), UsedName(reg2dp_weight_bytes,[Default]), UsedName(bind,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(:=,[Default]), UsedName(reg2dp_skip_weight_rls,[Default]), UsedName($init$,[Default]), UsedName(reg2dp_wmb_addr_low,[Default]), UsedName(bind$default$2,[Default]), UsedName(cdma2buf_wt_wr_en,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(cdma2buf_wt_wr_sel,[Default]), UsedName(bulkConnect,[Default]), UsedName(cdma2sc_wt_updt,[Default]), UsedName(reg2dp_wgs_addr_high,[Default]), UsedName(cvif2cdma_wt_rd_rsp_valid,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(wt2status_state,[Default]), UsedName(mcif2cdma_wt_rd_rsp_valid,[Default]), UsedName(specifiedDirection,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_wtIO;init;,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(_assignCompatibilityExplicitDirection,[Default]), UsedName(flatten,[Default]), UsedName(reg2dp_weight_ram_type,[Default]), UsedName(litArg,[Default]), UsedName(hashCode,[Default]), UsedName(widthOption,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(reg2dp_weight_addr_low,[Default]), UsedName(getPublicFields,[Default]), UsedName(compileOptions,[Implicit]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(binding,[Default]), UsedName(cdma2sc_wt_entries,[Default]), UsedName(sc2cdma_wt_entries,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_wtIO has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(compileOptions,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_wtIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_mrdma...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_mrdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_mrdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_mrdma,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(mrdma_slcg_op_en,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(NV_NVDLA_SDP_mrdma,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(mrdma_disable,[Default]), UsedName(dp2reg_mrdma_stall,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(nvdla;NV_NVDLA_SDP_mrdma;init;,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_mrdma has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_perf_nan_inf_count_en,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(mrdma_slcg_op_en,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(NV_NVDLA_SDP_mrdma,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(mrdma_disable,[Default]), UsedName(dp2reg_mrdma_stall,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(sdp_mrdma2cmux_ready,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(sdp_mrdma2cmux_valid,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(nvdla;NV_NVDLA_SDP_mrdma;init;,[Default]), UsedName(dp2reg_status_inf_input_num,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(sdp_mrdma2cmux_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(dp2reg_status_nan_input_num,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_mrdma)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_imgDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_imgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_imgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_imgDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_CDMA_imgDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_imgDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_imgDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_dlIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_dlIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_dlIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_dlIO,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla;NV_NVDLA_CSC_dlIO;init;,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(sc2buf_dat_rd_en,[Default]), UsedName(width,[Default]), UsedName(sc2mac_dat_b_data,[Default]), UsedName(direction_=,[Default]), UsedName(direction,[Default]), UsedName(##,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(allElements,[Default]), UsedName(toBits,[Default]), UsedName(suggestName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(sc2cdma_dat_updt,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(sc2cdma_dat_slices,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_datain_width_ext,[Default]), UsedName(cloneType,[Default]), UsedName(sc2buf_dat_rd_next1_en,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(do_asTypeOf,[Default]), UsedName(reg2dp_datain_channel_ext,[Default]), UsedName(hasBinding,[Default]), UsedName(asTypeOf,[Default]), UsedName(parentModName,[Default]), UsedName(sg2dl_pd,[Default]), UsedName(bindingOpt,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(sg2dl_reuse_rls,[Default]), UsedName(forceName,[Default]), UsedName(typeEquivalent,[Default]), UsedName(sc2mac_dat_a_pd,[Default]), UsedName(sc2mac_dat_a_data,[Default]), UsedName(reg2dp_y_extension,[Default]), UsedName(connectFromBits,[Default]), UsedName(instanceName,[Default]), UsedName(topBinding,[Default]), UsedName(lref,[Default]), UsedName(getClass,[Default]), UsedName(getWidth,[Default]), UsedName(ref,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_pad_value,[Default]), UsedName(toPrintable,[Default]), UsedName(legacyConnect,[Default]), UsedName(sc2buf_dat_rd_data,[Default]), UsedName(elements,[Default]), UsedName(connect,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reg2dp_x_dilation_ext,[Default]), UsedName(asUInt,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2buf_dat_rd_addr,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_pad_top,[Default]), UsedName(binding_=,[Default]), UsedName(toPrintableHelper,[Default]), UsedName(getElements,[Default]), UsedName(slcg_wg_en,[Default]), UsedName(do_asUInt,[Default]), UsedName(reg2dp_datain_height_ext,[Default]), UsedName(sc2buf_dat_rd_valid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(badConnect,[Default]), UsedName(cdma2sc_dat_entries,[Default]), UsedName(circuitName,[Default]), UsedName(className,[Default]), UsedName(sc2mac_dat_a_mask,[Default]), UsedName(NV_NVDLA_CSC_dlIO,[Default]), UsedName(pathName,[Default]), UsedName(ignoreSeq,[Default]), UsedName(reg2dp_conv_y_stride_ext,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(litValue,[Default]), UsedName(isWidthKnown,[Default]), UsedName(reg2dp_weight_channel_ext,[Default]), UsedName(isLit,[Default]), UsedName(sc_state,[Default]), UsedName(cloneTypeFull,[Default]), UsedName(<>,[Default]), UsedName(cdma2sc_dat_updt,[Default]), UsedName(==,[Default]), UsedName(sc2mac_dat_b_pvld,[Default]), UsedName(sc2mac_dat_b_pd,[Default]), UsedName(ne,[Default]), UsedName(specifiedDirection_=,[Default]), UsedName(bind,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_rls_slices,[Default]), UsedName(:=,[Default]), UsedName(sc2buf_dat_rd_next1_addr,[Default]), UsedName($init$,[Default]), UsedName(bind$default$2,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(bulkConnect,[Default]), UsedName(sc2buf_dat_rd_shift,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName(specifiedDirection,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cdma2sc_dat_slices,[Default]), UsedName(sc2mac_dat_b_mask,[Default]), UsedName(_assignCompatibilityExplicitDirection,[Default]), UsedName(sc2cdma_dat_entries,[Default]), UsedName(reg2dp_dataout_width,[Default]), UsedName(flatten,[Default]), UsedName(litArg,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_pra_truncate,[Default]), UsedName(widthOption,[Default]), UsedName(reg2dp_conv_x_stride_ext,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(compileOptions,[Implicit]), UsedName(sc2mac_dat_a_pvld,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(sg2dl_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_y_dilation_ext,[Default]), UsedName(binding,[Default]), UsedName(reg2dp_pad_left,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_dlIO has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(compileOptions,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_dlIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CFGROM_rom...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CFGROM_rom)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CFGROM_rom)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CFGROM_rom,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_CFGROM_rom;init;,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(NV_NVDLA_CFGROM_rom,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CFGROM_rom has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(nvdla;NV_NVDLA_CFGROM_rom;init;,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(NV_NVDLA_CFGROM_rom,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CFGROM_rom)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_RDMA_REG_single...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_RDMA_REG_single,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(NV_NVDLA_CDP_RDMA_REG_single,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(nvdla;NV_NVDLA_CDP_RDMA_REG_single;init;,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_RDMA_REG_single has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(NV_NVDLA_CDP_RDMA_REG_single,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(nvdla;NV_NVDLA_CDP_RDMA_REG_single;init;,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_RDMA_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_wlIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_wlIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_wlIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_wlIO,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(width,[Default]), UsedName(direction_=,[Default]), UsedName(direction,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_CSC_wlIO;init;,[Default]), UsedName(allElements,[Default]), UsedName(toBits,[Default]), UsedName(suggestName,[Default]), UsedName(cdma2sc_wt_kernels,[Default]), UsedName(reg2dp_weight_format,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(NV_NVDLA_CSC_wlIO,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cloneType,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(do_asTypeOf,[Default]), UsedName(hasBinding,[Default]), UsedName(sg2wl_reuse_rls,[Default]), UsedName(asTypeOf,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_weight_reuse,[Default]), UsedName(sc2mac_wt_b_data,[Default]), UsedName(bindingOpt,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(typeEquivalent,[Default]), UsedName(sc2mac_wt_a_data,[Default]), UsedName(reg2dp_y_extension,[Default]), UsedName(connectFromBits,[Default]), UsedName(instanceName,[Default]), UsedName(topBinding,[Default]), UsedName(lref,[Default]), UsedName(getClass,[Default]), UsedName(getWidth,[Default]), UsedName(sc2mac_wt_a_pvld,[Default]), UsedName(ref,[Default]), UsedName(_id,[Default]), UsedName(toPrintable,[Default]), UsedName(legacyConnect,[Default]), UsedName(sg2wl_pvld,[Default]), UsedName(sc2buf_wt_rd_addr,[Default]), UsedName(reg2dp_wmb_bytes,[Default]), UsedName(sc2mac_wt_a_mask,[Default]), UsedName(elements,[Default]), UsedName(connect,[Default]), UsedName(sc2cdma_wmb_entries,[Default]), UsedName(toString,[Default]), UsedName(asUInt,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_weight_bank,[Default]), UsedName(sc2mac_wt_b_mask,[Default]), UsedName(binding_=,[Default]), UsedName(sc2cdma_wt_updt,[Default]), UsedName(toPrintableHelper,[Default]), UsedName(getElements,[Default]), UsedName(reg2dp_in_precision,[Default]), UsedName(sc2buf_wt_rd_data,[Default]), UsedName(do_asUInt,[Default]), UsedName(addPostnameHook,[Default]), UsedName(badConnect,[Default]), UsedName(circuitName,[Default]), UsedName(className,[Default]), UsedName(sc2cdma_wt_kernels,[Default]), UsedName(pathName,[Default]), UsedName(ignoreSeq,[Default]), UsedName(finalize,[Default]), UsedName(sg2wl_pd,[Default]), UsedName(sc2mac_wt_a_sel,[Default]), UsedName(getRef,[Default]), UsedName(litValue,[Default]), UsedName(isWidthKnown,[Default]), UsedName(isLit,[Default]), UsedName(sc2cdma_wt_pending_req,[Default]), UsedName(sc_state,[Default]), UsedName(cloneTypeFull,[Default]), UsedName(cdma2sc_wmb_entries,[Default]), UsedName(sc2buf_wt_rd_valid,[Default]), UsedName(<>,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(specifiedDirection_=,[Default]), UsedName(reg2dp_weight_bytes,[Default]), UsedName(bind,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(:=,[Default]), UsedName(reg2dp_skip_weight_rls,[Default]), UsedName($init$,[Default]), UsedName(bind$default$2,[Default]), UsedName(sc2mac_wt_b_sel,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(bulkConnect,[Default]), UsedName(cdma2sc_wt_updt,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(specifiedDirection,[Default]), UsedName(sc2mac_wt_b_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(_assignCompatibilityExplicitDirection,[Default]), UsedName(flatten,[Default]), UsedName(litArg,[Default]), UsedName(hashCode,[Default]), UsedName(sc2buf_wt_rd_en,[Default]), UsedName(widthOption,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(compileOptions,[Implicit]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(binding,[Default]), UsedName(cdma2sc_wt_entries,[Default]), UsedName(sc2cdma_wt_entries,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_wlIO has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(compileOptions,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_wlIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_DMAIF_wr...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_DMAIF_wr)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_DMAIF_wr)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_DMAIF_wr,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(mcif_wr_req_valid,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(mcif_wr_req_pd,[Default]), UsedName(cvif_wr_req_valid,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(mcif_wr_rsp_complete,[Default]), UsedName(cvif_wr_req_ready,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName(cvif_wr_rsp_complete,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(NV_NVDLA_DMAIF_wr,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dmaif_wr_rsp_complete,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_DMAIF_wr;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(dmaif_wr_req_prdy,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif_wr_req_ready,[Default]), UsedName(circuitName,[Default]), UsedName(dmaif_wr_req_pvld,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(cvif_wr_req_pd,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(DMABW,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dmaif_wr_req_pd,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_DMAIF_wr has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(mcif_wr_req_valid,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(mcif_wr_req_pd,[Default]), UsedName(cvif_wr_req_valid,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(mcif_wr_rsp_complete,[Default]), UsedName(cvif_wr_req_ready,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName(cvif_wr_rsp_complete,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(NV_NVDLA_DMAIF_wr,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dmaif_wr_rsp_complete,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_DMAIF_wr;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(dmaif_wr_req_prdy,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif_wr_req_ready,[Default]), UsedName(circuitName,[Default]), UsedName(dmaif_wr_req_pvld,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(cvif_wr_req_pd,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(DMABW,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(dmaif_wr_req_pd,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_DMAIF_wr)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_MUL_unit...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_MUL_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_MUL_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_MUL_unit,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(mul_rdy,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(mul_unit_rdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(pINB_BW,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_MUL_unit;init;,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_CDP_DP_MUL_unit,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(mul_unit_vld,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(mul_ina_pd,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(mul_inb_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(mul_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(mul_unit_pd,[Default]), UsedName(pINA_BW,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_MUL_unit has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_MUL_unit)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_aluDriver,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_aluDriver,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_aluDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_macDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_macDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_macDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_macDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_CMAC_CORE_macDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_macDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_macDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.cdpConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.cdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.cdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.cdpConfiguration,ModifiedNames(changes = UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_PDP_ONFLY_INPUT_BW,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(PDP_NUM,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_CDP_ICVTO_BWPE,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_PDP_BWPE,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(NVDLA_PDP_MEM_RD_RSP,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(NVDLA_CDP_MEM_ADDR_BW,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_PDP_DMAIF_BW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(NVDLA_HLS_ADD17_LATENCY,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(SDP_THROUGHPUT,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(NVDLA_PDP_MEM_MASK_NUM,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(nvdla;cdpConfiguration;init;,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(PDPBW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(cdpConfiguration,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_RD_REQ,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NVDLA_CDP_DMAIF_BW,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_MASK_BIT,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(LARGE_FIFO_RAM,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SMALL_FIFO_RAM,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(NVDLA_PDP_MEM_WR_REQ,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(NVDLA_CDP_BWPE,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.cdpConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(CSC_HALF_ENTRY_HEX,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_PDP_ONFLY_INPUT_BW,[Default]), UsedName(CDMA_STATUS_LATENCY,[Default]), UsedName(DMAIF,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(CBUF_RAM_PER_BANK,[Default]), UsedName(CBUF_BANK_SLICE_min,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(PDP_NUM,[Default]), UsedName(CBUF_ENTRY_WIDTH,[Default]), UsedName(CDMA_SBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(CSC_ENTRY_MINUS1_HEX,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(CBUF_WR_BANK_ADDR_BITS,[Default]), UsedName(SS,[Default]), UsedName(NVDLA_CDP_ICVTO_BWPE,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(BN_DIN_DW,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(CSC_ATOMK_HF,[Default]), UsedName(CSC_WMB_ELEMENTS,[Default]), UsedName(CSC_WL_PIPELINE_ADDITION,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(CACC_ABUF_DEPTH,[Default]), UsedName(CBUF_RD_DATA_SHIFT_WIDTH,[Default]), UsedName(CBUF_RAM_DEPTH_BITS,[Default]), UsedName(CSC_TWICE_ENTRY_BITS,[Default]), UsedName(LUT_TABLE_LE_DEPTH,[Default]), UsedName(NVDLA_HLS_CDMA_CVT_LATENCY,[Default]), UsedName(FPGA,[Default]), UsedName(CACC_DWIDTH_DIV_SWIDTH,[Default]), UsedName(CSC_DL_PRA_LATENCY,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(NVDLA_CDMA_MEM_WR_REQ,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_CDMA_MEM_MASK_BIT,[Default]), UsedName(BNUM,[Default]), UsedName(CBUF_ADDR_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(DP_IN_DW,[Default]), UsedName(RT_CSC2CMAC_A_LATENCY,[Default]), UsedName(DP_DOUT_DW,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_WRITE_LATENCY,[Default]), UsedName(TW,[Default]), UsedName(CACC_SDP_DATA_WIDTH,[Default]), UsedName(AM_DW,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(CDMA_CBUF_WR_LATENCY,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(CSC_ENTRY_HEX,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(LOG2_ATOMC,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(CACC_DBUF_DEPTH,[Default]), UsedName(NVDLA_CBUF_READ_LATENCY,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(EW_OC_DW,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_PDP_BWPE,[Default]), UsedName(ATMM,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(LOG2_ATOMK,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(CV_OUT_DW,[Default]), UsedName(MN_BW,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CACC_ABUF_AWIDTH,[Default]), UsedName(EW_IDX_OUT_DW,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(CACC_D_RAM_WRITE_LATENCY,[Default]), UsedName(CSC_SG_PEND_FLUSH,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(SBUF_WINOGRAD,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_WL_LATENCY,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(CSC_ATOMC,[Default]), UsedName(EW_DIN_DW,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(BANK_DEPTH_BITS,[Default]), UsedName(ATMM8,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(CSC_MIN_STRIPE,[Default]), UsedName(CDMA_SBUF_NUMBER,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(CSC_WT_ELEMENTS,[Default]), UsedName(NVDLA_PDP_MEM_RD_RSP,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(CV_IN_DW,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(CBUF_BANK_DEPTH_BITS,[Default]), UsedName(CSC_IMAGE_MAX_STRIDE_BYTE,[Default]), UsedName(CDMA_CVT_CELL_LATENCY,[Default]), UsedName(NVDLA_CDP_MEM_ADDR_BW,[Default]), UsedName(AM_DW2,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CDMA_MEM_RD_RSP,[Default]), UsedName(BS_DOUT_DW,[Default]), UsedName(EW_DOUT_DW,[Default]), UsedName(DP_OUT_DW,[Default]), UsedName(NVDLA_PDP_DMAIF_BW,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(CDMA_ADDR_ALIGN,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(NVDLA_HLS_ADD17_LATENCY,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(CSC_DL_PIPELINE_ADDITION,[Default]), UsedName(CACC_CELL_PARTIAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HEX,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(CSC_BPE,[Default]), UsedName(BS_IN_DW,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(CSC_ENTRY_HEX_MUL2,[Default]), UsedName(CACC_DBUF_AWIDTH,[Default]), UsedName(CSC_HALF_ENTRY_BITS,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(CBUF_WR_PORT_NUMBER,[Default]), UsedName(CSC_SG_DONE_FLUSH,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(SDP_THROUGHPUT,[Default]), UsedName(CACC_ABUF_WIDTH,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(CACC_FINAL_WIDTH,[Default]), UsedName(BN_IN_DW,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(DP_DIN_DW,[Default]), UsedName(NVDLA_CC_CREDIT_SIZE,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(EW_IN_DW,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(CDMA_SBUF_WR_LATENCY,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(LOG2_BANK_NUM,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(EW_OUT_DW,[Default]), UsedName(NVDLA_PDP_MEM_MASK_NUM,[Default]), UsedName(CBUF_WR_PORT_WIDTH,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(AM_AW2,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CACC_D_MISC_CFG_0_PROC_PRECISION_INT8,[Default]), UsedName(CBUF_BANK_RAM_CASE,[Default]), UsedName(NVDLA_CDMA_MEM_RD_REQ,[Default]), UsedName(ATMM_NUM,[Default]), UsedName(CSC_IMG_STRIPE,[Default]), UsedName(CACC_PARSUM_WIDTH,[Default]), UsedName(NVDLA_VMOD_CBUF_READ_LATENCY,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(AM_AW,[Default]), UsedName(ATMKBW,[Default]), UsedName(nvdla;cdpConfiguration;init;,[Default]), UsedName(BS_OP_DW,[Default]), UsedName(PDPBW,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(CSC_QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(CBUF_BANK_SLICE_max,[Default]), UsedName(CSC_ENTRY_BITS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(NVDLA_CDMA_BPE,[Default]), UsedName(CSC_BATCH_STRIPE,[Default]), UsedName(finalize,[Default]), UsedName(SDP_WR_CMD_DW,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(CSC_QUAT_ENTRY_HEX,[Default]), UsedName(CSC_ATOMC_QUAT,[Default]), UsedName(cdpConfiguration,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(CDMA_CVT_LATENCY,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(CSC_ATOMK_HEX,[Default]), UsedName(EW_INP_OUT_DW,[Default]), UsedName(EW_OP_DW,[Default]), UsedName(CACC_ATOMK,[Default]), UsedName(RT_CSC2CMAC_B_LATENCY,[Default]), UsedName(CBUF_WR_BANK_SEL_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_RD_REQ,[Default]), UsedName(CSC_ATOMK,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(BS_OUT_DW,[Default]), UsedName(==,[Default]), UsedName(CBUF_RD_PORT_WIDTH,[Default]), UsedName(ne,[Default]), UsedName(NVDLA_CDP_DMAIF_BW,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(CACC_DBUF_WIDTH,[Default]), UsedName(NVDLA_PDP_MEM_MASK_BIT,[Default]), UsedName(LOG2_CBUF_BANK_DEPTH,[Default]), UsedName(CBUF_BANK_FETCH_BITS,[Default]), UsedName(BN_DOUT_DW,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(BN_OP_DW,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(CACC_SDP_WIDTH,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(CSC_ENTRIES_NUM_WIDTH,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_CDMA_DMAIF_BW,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(ATMC,[Default]), UsedName(CACC_IN_WIDTH,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(LUT_TABLE_MAX_DEPTH,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName(CSC_ATOMK_MUL4_HEX,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(EW_CORE_OUT_DW,[Default]), UsedName(LARGE_FIFO_RAM,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(CDMA_SBUF_SDATA_BITS,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(CBUF_BANK_SIZE,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(BN_OUT_DW,[Default]), UsedName(NVDLA_MACCELL_NUMBER,[Default]), UsedName(CSC_ATOMK_MUL2_HEX,[Default]), UsedName(LUT_TABLE_LO_DEPTH,[Default]), UsedName(CACC_CELL_FINAL_LATENCY,[Default]), UsedName(CSC_ATOMC_HALF,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(EW_LUT_OUT_DW,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(ATMMBW,[Default]), UsedName(SDP_MAX_THROUGHPUT,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(CBUF_RAM_WIDTH,[Default]), UsedName(CSC_3QUAT_ENTRY_BITS,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(CBUF_ENTRY_BYTE,[Default]), UsedName(CACC_ATOMK_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(CBUF_RAM_DEPTH,[Default]), UsedName(SMALL_FIFO_RAM,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(CBUF_ENTRY_BITS,[Default]), UsedName(NVDLA_PDP_MEM_WR_REQ,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(NVDLA_CDP_BWPE,[Default]), UsedName(CDMA_SBUF_RD_LATENCY,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(NVDLA_HLS_CSC_PRA_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(CACC_CHANNEL_BITS,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.cdpConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_CALC_int8...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_CALC_int8)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_CALC_int8)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_CALC_int8,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(in_op,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(out_final_data,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(in_valid,[Default]), UsedName(_onModuleClose,[Default]), UsedName(NV_NVDLA_CACC_CALC_int8,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(in_data,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(in_sel,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(in_op_valid,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(out_final_valid,[Default]), UsedName(out_partial_valid,[Default]), UsedName(nvdla;NV_NVDLA_CACC_CALC_int8;init;,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(out_partial_data,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(out_final_sat,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_CALC_int8 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(in_op,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(out_final_data,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(in_valid,[Default]), UsedName(_onModuleClose,[Default]), UsedName(NV_NVDLA_CACC_CALC_int8,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(in_data,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(in_sel,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(in_op_valid,[Default]), UsedName(cfg_truncate,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(out_final_valid,[Default]), UsedName(out_partial_valid,[Default]), UsedName(nvdla;NV_NVDLA_CACC_CALC_int8;init;,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(out_partial_data,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(out_final_sat,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_CALC_int8)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_Y_int_core...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_core)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_core)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_Y_int_core,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(cfg_mul_truncate,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_core;init;,[Default]), UsedName(circuitName,[Default]), UsedName(chn_alu_op,[Default]), UsedName(chn_data_in,[Default]), UsedName(pathName,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_core,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(chn_data_out,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_Y_int_core has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cfg_alu_src,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(chn_mul_op,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cfg_alu_op,[Default]), UsedName(toNamed,[Default]), UsedName(cfg_mul_src,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cfg_mul_bypass,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cfg_mul_op,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(cfg_alu_algo,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(chn_mul_op_pvld,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(cfg_mul_truncate,[Default]), UsedName(_closed,[Default]), UsedName(chn_out_pvld,[Default]), UsedName(chn_in_prdy,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_Y_int_core;init;,[Default]), UsedName(circuitName,[Default]), UsedName(chn_alu_op,[Default]), UsedName(chn_data_in,[Default]), UsedName(pathName,[Default]), UsedName(NV_NVDLA_SDP_HLS_Y_int_core,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(chn_mul_op_prdy,[Default]), UsedName(chn_alu_op_pvld,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(chn_alu_op_prdy,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(chn_out_prdy,[Default]), UsedName(chn_in_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(cfg_mul_prelu,[Default]), UsedName($asInstanceOf,[Default]), UsedName(cfg_alu_bypass,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(chn_data_out,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_Y_int_core)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_dl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_dl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_dl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_dl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_CSC_dl;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_CSC_dl,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_dl has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_dl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_sync2dataDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_SDP_HLS_sync2dataDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_sync2dataDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_DMAIF_rdreq...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_DMAIF_rdreq)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_DMAIF_rdreq)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_DMAIF_rdreq,ModifiedNames(changes = UsedName(cvif_rd_req_ready,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dmaif_rd_req_vld,[Default]), UsedName(NV_NVDLA_DMAIF_rdreq,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cvif_rd_req_valid,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(toString,[Default]), UsedName(mcif_rd_req_valid,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mcif_rd_req_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(dmaif_rd_req_rdy,[Default]), UsedName(==,[Default]), UsedName(mcif_rd_req_ready,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cvif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(DMABW,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_DMAIF_rdreq;init;,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(dmaif_rd_req_pd,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_DMAIF_rdreq has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(cvif_rd_req_ready,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dmaif_rd_req_vld,[Default]), UsedName(NV_NVDLA_DMAIF_rdreq,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cvif_rd_req_valid,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_src_ram_type,[Default]), UsedName(toString,[Default]), UsedName(mcif_rd_req_valid,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(mcif_rd_req_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(dmaif_rd_req_rdy,[Default]), UsedName(==,[Default]), UsedName(mcif_rd_req_ready,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(cvif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(DMABW,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_DMAIF_rdreq;init;,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(dmaif_rd_req_pd,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_DMAIF_rdreq)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_mul...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_mul,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(sync2mul_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(mul2ocvt_pd,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mul2ocvt_prdy,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_mul;init;,[Default]), UsedName(isInstanceOf,[Default]), UsedName(pINB_BW,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sync2mul_pd,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sync2mul_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_CDP_DP_mul,[Default]), UsedName(mul2ocvt_pvld,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(reg2dp_mul_bypass,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(pINA_BW,[Default]), UsedName(intp2mul_prdy,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(intp2mul_pvld,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(intp2mul_pd,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_mul has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_mul)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cbuf...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cbuf)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cbuf)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cbuf,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(sc2buf_dat_rd_en,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_cbuf,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cbufImpl,[Default]), UsedName(sc2buf_dat_rd_next1_en,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(cdma2buf_wr_addr,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(sc2buf_wt_rd_addr,[Default]), UsedName(sc2buf_dat_rd_data,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2buf_dat_rd_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(internal_clock,[Default]), UsedName(cdma2buf_wr_data,[Default]), UsedName(sc2buf_wt_rd_data,[Default]), UsedName(sc2buf_dat_rd_valid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(cbuf,[Default]), UsedName(sc2buf_wt_rd_valid,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(cdma2buf_wr_sel,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(sc2buf_dat_rd_next1_addr,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sc2buf_dat_rd_shift,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(nvdla;NV_NVDLA_cbuf;init;,[Default]), UsedName(hashCode,[Default]), UsedName(sc2buf_wt_rd_en,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cdma2buf_wr_en,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cbuf has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cbuf)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_a...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_a)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_a)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_a,ModifiedNames(changes = UsedName(mac_b2accu_mask,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cacc2glb_done_intr_pd,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(NV_NVDLA_partition_a,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(mac_b2accu_mode,[Default]), UsedName(toNamed,[Default]), UsedName(csb2cacc_req_pd,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(u_global_clk_ovr_on_sync,[Default]), UsedName(parentModName,[Default]), UsedName(mac_b2accu_data,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(nvdla_clk_ovr_on,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(mac_b2accu_pvld,[Default]), UsedName(mac_a2accu_pvld,[Default]), UsedName(mac_a2accu_pd,[Default]), UsedName(global_clk_ovr_on,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(cacc2csb_resp_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(csb2cacc_req_prdy,[Default]), UsedName(mac_a2accu_mask,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(test_mode,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mac_a2accu_data,[Default]), UsedName(nvdla;NV_NVDLA_partition_a;init;,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(mac_a2accu_mode,[Default]), UsedName(circuitName,[Default]), UsedName(u_partition_a_reset,[Default]), UsedName(u_NV_NVDLA_cacc,[Default]), UsedName(cacc2csb_resp_pd,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(mac_b2accu_pd,[Default]), UsedName(ne,[Default]), UsedName(dla_reset_rstn,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(u_dla_clk_ovr_on_sync,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(csb2cacc_req_pvld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(direct_reset_,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_a has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_a)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_brdma...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_brdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_brdma)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_brdma,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(dp2reg_brdma_stall,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(reg2dp_bs_line_stride,[Default]), UsedName(sdp_b2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(name,[Default]), UsedName(reg2dp_brdma_data_use,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_brdma_data_size,[Default]), UsedName(sdp_brdma2dp_mul_valid,[Default]), UsedName(sdp_brdma2dp_mul_ready,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(nvdla;NV_NVDLA_SDP_brdma;init;,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(sdp_b2cvif_rd_req_valid,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(brdma_slcg_op_en,[Default]), UsedName(cvif2sdp_b_rd_rsp_pd,[Default]), UsedName(getCommands,[Default]), UsedName(sdp_b2mcif_rd_req_ready,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp_b2cvif_rd_req_pd,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(cvif2sdp_b_rd_rsp_valid,[Default]), UsedName(sdp_b2mcif_rd_req_valid,[Default]), UsedName(reg2dp_bs_base_addr_high,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bs_base_addr_low,[Default]), UsedName(mcif2sdp_b_rd_rsp_ready,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(sdp_brdma2dp_mul_pd,[Default]), UsedName(mcif2sdp_b_rd_rsp_valid,[Default]), UsedName(cvif2sdp_b_rd_rsp_ready,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(reg2dp_brdma_ram_type,[Default]), UsedName(toString,[Default]), UsedName(sdp_brdma2dp_alu_valid,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_b2cvif_rd_req_ready,[Default]), UsedName(sdp_brdma2dp_alu_ready,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sdp_brdma2dp_alu_pd,[Default]), UsedName(mcif2sdp_b_rd_rsp_pd,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_SDP_brdma,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(reg2dp_brdma_data_mode,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_b2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2mcif_rd_req_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_bs_surface_stride,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(brdma_disable,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_brdma has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(dp2reg_brdma_stall,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(reg2dp_bs_line_stride,[Default]), UsedName(sdp_b2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(name,[Default]), UsedName(reg2dp_brdma_data_use,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_brdma_data_size,[Default]), UsedName(sdp_brdma2dp_mul_valid,[Default]), UsedName(sdp_brdma2dp_mul_ready,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(nvdla;NV_NVDLA_SDP_brdma;init;,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(sdp_b2cvif_rd_req_valid,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(brdma_slcg_op_en,[Default]), UsedName(cvif2sdp_b_rd_rsp_pd,[Default]), UsedName(getCommands,[Default]), UsedName(sdp_b2mcif_rd_req_ready,[Default]), UsedName(parentModName,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp_b2cvif_rd_req_pd,[Default]), UsedName(reg2dp_perf_dma_en,[Default]), UsedName(forceName,[Default]), UsedName(cvif2sdp_b_rd_rsp_valid,[Default]), UsedName(sdp_b2mcif_rd_req_valid,[Default]), UsedName(reg2dp_bs_base_addr_high,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_bs_base_addr_low,[Default]), UsedName(mcif2sdp_b_rd_rsp_ready,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(sdp_brdma2dp_mul_pd,[Default]), UsedName(mcif2sdp_b_rd_rsp_valid,[Default]), UsedName(cvif2sdp_b_rd_rsp_ready,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(dp2reg_done,[Default]), UsedName(reg2dp_brdma_ram_type,[Default]), UsedName(toString,[Default]), UsedName(sdp_brdma2dp_alu_valid,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_b2cvif_rd_req_ready,[Default]), UsedName(sdp_brdma2dp_alu_ready,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sdp_brdma2dp_alu_pd,[Default]), UsedName(mcif2sdp_b_rd_rsp_pd,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_SDP_brdma,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(reg2dp_brdma_data_mode,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_b2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2mcif_rd_req_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_bs_surface_stride,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(brdma_disable,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_brdma)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cscDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cscDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cscDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cscDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_cscDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cscDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cscDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_wt...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_wt)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_wt)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_wt,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_wt;init;,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_CDMA_wt,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_wt has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_wt;init;,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NV_NVDLA_CDMA_wt,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_wt)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_dcIO...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_dcIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_dcIO)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_dcIO,ModifiedNames(changes = UsedName(reg2dp_line_packed,[Default]), UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(cvif2dc_dat_rd_rsp_valid,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(width,[Default]), UsedName(reg2dp_surf_packed,[Default]), UsedName(direction_=,[Default]), UsedName(dc_dat2cvif_rd_req_pd,[Default]), UsedName(direction,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(dc2status_dat_entries,[Default]), UsedName(dc_dat2mcif_rd_req_ready,[Default]), UsedName(reg2dp_datain_format,[Default]), UsedName(dp2reg_dc_rd_stall,[Default]), UsedName(dc2sbuf_p0_wr_en,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(dc2status_dat_slices,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(dc_dat2mcif_rd_req_pd,[Default]), UsedName(allElements,[Default]), UsedName(dc2cvt_dat_wr_data,[Default]), UsedName(toBits,[Default]), UsedName(suggestName,[Default]), UsedName(dc2sbuf_p0_wr_data,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(reg2dp_batches,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cloneType,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(do_asTypeOf,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(hasBinding,[Default]), UsedName(asTypeOf,[Default]), UsedName(parentModName,[Default]), UsedName(bindingOpt,[Default]), UsedName(sc2cdma_dat_pending_req,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(typeEquivalent,[Default]), UsedName(connectFromBits,[Default]), UsedName(dc2sbuf_p0_rd_data,[Default]), UsedName(instanceName,[Default]), UsedName(topBinding,[Default]), UsedName(lref,[Default]), UsedName(getClass,[Default]), UsedName(getWidth,[Default]), UsedName(dc2status_dat_updt,[Default]), UsedName(ref,[Default]), UsedName(reg2dp_surf_stride,[Default]), UsedName(_id,[Default]), UsedName(toPrintable,[Default]), UsedName(legacyConnect,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(dc2cvt_dat_wr_info_pd,[Default]), UsedName(elements,[Default]), UsedName(connect,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(asUInt,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(binding_=,[Default]), UsedName(toPrintableHelper,[Default]), UsedName(getElements,[Default]), UsedName(do_asUInt,[Default]), UsedName(dc2sbuf_p0_rd_addr,[Default]), UsedName(mcif2dc_dat_rd_rsp_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(cvif2dc_dat_rd_rsp_ready,[Default]), UsedName(badConnect,[Default]), UsedName(slcg_dc_gate_wg,[Default]), UsedName(circuitName,[Default]), UsedName(className,[Default]), UsedName(dc2cvt_dat_wr_en,[Default]), UsedName(mcif2dc_dat_rd_rsp_ready,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_batch_stride,[Default]), UsedName(NV_NVDLA_CDMA_dcIO,[Default]), UsedName(ignoreSeq,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(litValue,[Default]), UsedName(isWidthKnown,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(isLit,[Default]), UsedName(cloneTypeFull,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_dcIO;init;,[Default]), UsedName(<>,[Default]), UsedName(==,[Default]), UsedName(dc_dat2mcif_rd_req_valid,[Default]), UsedName(ne,[Default]), UsedName(specifiedDirection_=,[Default]), UsedName(status2dma_valid_slices,[Default]), UsedName(dc_dat2cvif_rd_req_ready,[Default]), UsedName(bind,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(:=,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName($init$,[Default]), UsedName(slcg_dc_gate_img,[Default]), UsedName(bind$default$2,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(reg2dp_data_bank,[Default]), UsedName(bulkConnect,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cvif2dc_dat_rd_rsp_pd,[Default]), UsedName(parentPathName,[Default]), UsedName(dc2cvt_dat_wr_sel,[Default]), UsedName(reg2dp_skip_data_rls,[Default]), UsedName(dc2cvt_dat_wr_addr,[Default]), UsedName(specifiedDirection,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_data_reuse,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(_assignCompatibilityExplicitDirection,[Default]), UsedName(reg2dp_grains,[Default]), UsedName(mcif2dc_dat_rd_rsp_valid,[Default]), UsedName(flatten,[Default]), UsedName(litArg,[Default]), UsedName(dc2status_state,[Default]), UsedName(hashCode,[Default]), UsedName(dc2sbuf_p0_rd_en,[Default]), UsedName(dp2reg_dc_rd_latency,[Default]), UsedName(widthOption,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(compileOptions,[Implicit]), UsedName(dc2sbuf_p0_wr_addr,[Default]), UsedName(dc_dat2cvif_rd_req_valid,[Default]), UsedName(nvdla_core_ng_clk,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(binding,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_dcIO has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(compileOptions,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_dcIO)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_dual_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_dual_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dataout_channel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(line_packed,[Default]), UsedName(surf_packed,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(clip_truncate,[Default]), UsedName(forceName,[Default]), UsedName(dataout_addr,[Default]), UsedName(instanceName,[Default]), UsedName(batches,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(line_stride,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(proc_precision,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(sat_count,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(dataout_height,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_CACC_dual_reg,[Default]), UsedName(portsSize,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla;NV_NVDLA_CACC_dual_reg;init;,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(surf_stride,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(dataout_width,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_dual_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(dataout_channel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(line_packed,[Default]), UsedName(surf_packed,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(clip_truncate,[Default]), UsedName(forceName,[Default]), UsedName(dataout_addr,[Default]), UsedName(instanceName,[Default]), UsedName(batches,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(line_stride,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(proc_precision,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(sat_count,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(dataout_height,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_CACC_dual_reg,[Default]), UsedName(portsSize,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(nvdla;NV_NVDLA_CACC_dual_reg;init;,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(surf_stride,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(dataout_width,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_nan...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_nan)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_nan)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_nan,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(nan_preproc_prdy,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(nvdla;NV_NVDLA_PDP_nan;init;,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(dp2reg_nan_input_num,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nan_preproc_pvld,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(dp2reg_inf_input_num,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(nan_preproc_pd,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(pdp_rdma2dp_ready,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(NV_NVDLA_PDP_nan,[Default]), UsedName(getPublicFields,[Default]), UsedName(pdp_rdma2dp_pd,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(pdp_rdma2dp_valid,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_nan has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_nan)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cbuf.cbufImpl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cbuf.cbufImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cbuf.cbufImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cbuf.cbufImpl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(l2group_wt_rd_data,[Default]), UsedName(cdma2buf_wr_data_d1,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_cbuf;cbufImpl;init;,[Default]), UsedName(bank_wr_ram_en_d0,[Default]), UsedName(bank_wr_data_d1,[Default]), UsedName(sc2buf_dat_rd_shift_5T,[Default]), UsedName(bank_ram_wr_addr_d2,[Default]), UsedName(bank_ram_wr_data_d1,[Default]), UsedName(cbufImpl,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(bank_ram_wr_en_d1,[Default]), UsedName(u_cbuf_ram_bank_ram,[Default]), UsedName(getClass,[Default]), UsedName(bank_ram_wt_rd_addr,[Default]), UsedName(toString,[Default]), UsedName(cdma2buf_wr_data_with_en,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bank_ram_wr_data_d2,[Default]), UsedName(equals,[Default]), UsedName(bank_ram_rd_data,[Default]), UsedName(bank_ram_wt_rd_en,[Default]), UsedName(bank_ram_rd_en_d1,[Default]), UsedName(bank_wr_en_d1,[Default]), UsedName(finalize,[Default]), UsedName(bank_ram_wt_rd_valid,[Default]), UsedName(cdma2buf_wr_addr_with_en,[Default]), UsedName(bank_ram_data_rd_valid,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(bank_data_rd_data,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(bank_ram_wr_en_d2,[Default]), UsedName(bank_ram_data_rd_en_d1,[Default]), UsedName(bank_ram_rd_addr_d1,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(bank_ram_data_rd_addr,[Default]), UsedName(bank_ram_wr_addr_d1,[Default]), UsedName(l4group_wt_rd_data,[Default]), UsedName(bank_wt_rd_data,[Default]), UsedName(hashCode,[Default]), UsedName(bank_ram_data_rd_en,[Default]), UsedName(cdma2buf_wr_addr_d1,[Default]), UsedName(bank_ram_wr_en_d0,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(bank_wr_addr_d1,[Default]), UsedName(l3group_wt_rd_data,[Default]), UsedName(l1group_wt_rd_data,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cbuf.cbufImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(l2group_wt_rd_data,[Default]), UsedName(cdma2buf_wr_data_d1,[Default]), UsedName(##,[Default]), UsedName(nvdla;NV_NVDLA_cbuf;cbufImpl;init;,[Default]), UsedName(bank_wr_ram_en_d0,[Default]), UsedName(bank_wr_data_d1,[Default]), UsedName(sc2buf_dat_rd_shift_5T,[Default]), UsedName(bank_ram_wr_addr_d2,[Default]), UsedName(bank_ram_wr_data_d1,[Default]), UsedName(cbufImpl,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(bank_ram_wr_en_d1,[Default]), UsedName(u_cbuf_ram_bank_ram,[Default]), UsedName(getClass,[Default]), UsedName(bank_ram_wt_rd_addr,[Default]), UsedName(toString,[Default]), UsedName(cdma2buf_wr_data_with_en,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bank_ram_wr_data_d2,[Default]), UsedName(equals,[Default]), UsedName(bank_ram_rd_data,[Default]), UsedName(bank_ram_wt_rd_en,[Default]), UsedName(bank_ram_rd_en_d1,[Default]), UsedName(bank_wr_en_d1,[Default]), UsedName(finalize,[Default]), UsedName(bank_ram_wt_rd_valid,[Default]), UsedName(cdma2buf_wr_addr_with_en,[Default]), UsedName(bank_ram_data_rd_valid,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(bank_data_rd_data,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(bank_ram_wr_en_d2,[Default]), UsedName(bank_ram_data_rd_en_d1,[Default]), UsedName(bank_ram_rd_addr_d1,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(bank_ram_data_rd_addr,[Default]), UsedName(bank_ram_wr_addr_d1,[Default]), UsedName(l4group_wt_rd_data,[Default]), UsedName(bank_wt_rd_data,[Default]), UsedName(hashCode,[Default]), UsedName(bank_ram_data_rd_en,[Default]), UsedName(cdma2buf_wr_addr_d1,[Default]), UsedName(bank_ram_wr_en_d0,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(bank_wr_addr_d1,[Default]), UsedName(l3group_wt_rd_data,[Default]), UsedName(l1group_wt_rd_data,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cbuf.cbufImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(in_rt_wt_pvld_d,[Default]), UsedName(rt_inImpl,[Default]), UsedName(in_rt_dat_data_d,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(in_rt_dat_pvld_d,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(in_rt_wt_mask_d,[Default]), UsedName(finalize,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_rt_in;rt_inImpl;init;,[Default]), UsedName(in_rt_dat_pd_d,[Default]), UsedName(in_rt_wt_sel_d,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(in_rt_wt_data_d,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(in_rt_dat_mask_d,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(in_rt_wt_pvld_d,[Default]), UsedName(rt_inImpl,[Default]), UsedName(in_rt_dat_data_d,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(in_rt_dat_pvld_d,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(in_rt_wt_mask_d,[Default]), UsedName(finalize,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_rt_in;rt_inImpl;init;,[Default]), UsedName(in_rt_dat_pd_d,[Default]), UsedName(in_rt_wt_sel_d,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(in_rt_wt_data_d,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(in_rt_dat_mask_d,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_in.rt_inImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_REG_dual...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_REG_dual,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_REG_dual;init;,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(proc_precision,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(NV_NVDLA_CMAC_REG_dual,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_REG_dual has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_REG_dual;init;,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(proc_precision,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(NV_NVDLA_CMAC_REG_dual,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_CORE_packDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_CORE_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_CORE_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_CORE_packDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_SDP_CORE_packDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_CORE_packDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_SDP_CORE_packDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_CORE_packDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_lut_expn...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_lut_expn)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_lut_expn)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_lut_expn,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(idx_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_lut_start,[Default]), UsedName(suggestName,[Default]), UsedName(idx_out_pvld,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_lut_expn;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(idx_in_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(idx_in_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_uflow_out,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(idx_out_prdy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_expn,[Default]), UsedName(lut_frac_out,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(lut_index_out,[Default]), UsedName(cfg_lut_offset,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(lut_oflow_out,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_lut_expn has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(idx_data_in,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cfg_lut_start,[Default]), UsedName(suggestName,[Default]), UsedName(idx_out_pvld,[Default]), UsedName(nvdla;NV_NVDLA_SDP_HLS_lut_expn;init;,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(idx_in_prdy,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(idx_in_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(lut_uflow_out,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(idx_out_prdy,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(NV_NVDLA_SDP_HLS_lut_expn,[Default]), UsedName(lut_frac_out,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(lut_index_out,[Default]), UsedName(cfg_lut_offset,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(lut_oflow_out,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_lut_expn)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_cmd...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_cmd,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(reg2dp_batch_number,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(cmd2dat_dma_prdy,[Default]), UsedName(reg2dp_ew_alu_bypass,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(cmd2dat_spt_pd,[Default]), UsedName(reg2dp_ew_bypass,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cmd2dat_spt_prdy,[Default]), UsedName(reg2dp_ew_alu_algo,[Default]), UsedName(getCommands,[Default]), UsedName(reg2dp_output_dst,[Default]), UsedName(parentModName,[Default]), UsedName(cmd2dat_spt_pvld,[Default]), UsedName(reg2dp_channel,[Default]), UsedName(getModulePorts,[Default]), UsedName(op_load,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_dst_batch_stride,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_winograd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(NV_NVDLA_SDP_WDMA_cmd,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_out_precision,[Default]), UsedName(nvdla;NV_NVDLA_SDP_WDMA_cmd;init;,[Default]), UsedName(cmd2dat_dma_pvld,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(cmd2dat_dma_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(reg2dp_height,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_width,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_cmd has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_cmd)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_RDMA_dmaifDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_dmaifDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_mulDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_mulDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_mulDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_NVDLA_CMAC_CORE_rt_outDriver,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_outDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_regDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_regDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_PDP_regDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_regDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_PDP_regDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_regDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.cmacConfiguration...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.cmacConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.cmacConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.cmacConfiguration,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(FPGA,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(cmacConfiguration,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(nvdla;cmacConfiguration;init;,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]))) invalidates 1 classes due to The nvdla.cmacConfiguration has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NVDLA_MEM_ADDRESS_WIDTH,[Default]), UsedName(SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(FEATURE_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_WINOGRAD_ENABLE,[Default]), UsedName(##,[Default]), UsedName(NVDLA_SDP_BN_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_CBUF_WIDTH_LOG2,[Default]), UsedName(RUBIK_ENABLE,[Default]), UsedName(NVDLA_SDP_MAX_THROUGHPUT,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(PRIMARY_MEMIF_WIDTH,[Default]), UsedName(PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_WIDTH,[Default]), UsedName(NVDLA_CBUF_BANK_DEPTH_LOG2,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH,[Default]), UsedName(SDP_EW_THROUGHPUT,[Default]), UsedName(MEMORY_ATOMIC_SIZE,[Default]), UsedName(NV_FPGA_UNIT,[Default]), UsedName(FPGA,[Default]), UsedName(NVDLA_SDP2PDP_WIDTH,[Default]), UsedName(CMAC_DATA_LATENCY,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(MEM_ADDRESS_WIDTH,[Default]), UsedName(NVDLA_DMA_WR_SIZE,[Default]), UsedName(NVDLA_SDP_BN_ENABLE,[Default]), UsedName(PRIMARY_MEMIF_LATENCY,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER,[Default]), UsedName(cmacConfiguration,[Default]), UsedName(NVDLA_CBUF_WIDTH_MUL2_LOG2,[Default]), UsedName(NVDLA_SDP_LUT_ENABLE,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_ENABLE,[Default]), UsedName(nvdla;cmacConfiguration;init;,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NVDLA_BDMA_ENABLE,[Default]), UsedName(NVDLA_RETIMING_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_SIZE,[Default]), UsedName(SDP_BN_ENABLE,[Default]), UsedName(XSDB_SLV_DIS,[Default]), UsedName(NVDLA_BPE,[Default]), UsedName(PDP_SINGLE_LBUF_WIDTH,[Default]), UsedName(CMAC_OUT_RETIMING,[Default]), UsedName(NVDLA_CDMA_GRAIN_MAX_BIT,[Default]), UsedName(CDP_ENABLE,[Default]), UsedName(useFPGA,[Default]), UsedName(SDP_BS_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_ENABLE,[Default]), UsedName(NVDLA_CC_ATOMC_DIV_ATOMK,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_CDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_DMA_WR_CMD,[Default]), UsedName(getClass,[Default]), UsedName(MAC_ATOMIC_K_SIZE,[Default]), UsedName(NVDLA_BATCH_ENABLE,[Default]), UsedName(CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_VMOD_DMA_LAT_FIFO_DEPTH_MAX,[Default]), UsedName(NVDLA_SDP_BS_THROUGHPUT,[Default]), UsedName(SYNTHESIS,[Default]), UsedName(RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE,[Default]), UsedName(RETIMING_ENABLE,[Default]), UsedName(BDMA_ENABLE,[Default]), UsedName(NVDLA_MAX_BATCH_SIZE,[Default]), UsedName(NVDLA_DMA_RD_REQ,[Default]), UsedName(NVDLA_CBUF_BANK_NUMBER_LOG2,[Default]), UsedName(toString,[Default]), UsedName(NVDLA_CBUF_DEPTH_LOG2,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE_LOG2,[Default]), UsedName(SDP_BN_THROUGHPUT,[Default]), UsedName(RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_FEATURE_DATA_TYPE_INT8,[Default]), UsedName(SDP_EW_ENABLE,[Default]), UsedName(RT_CMAC_B2CACC_LATENCY,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NVDLA_CBUF_ENTRY_WIDTH,[Default]), UsedName(equals,[Default]), UsedName(NVDLA_VMOD_SDP_BRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_CDP_ENABLE,[Default]), UsedName(NVDLA_DMA_WR_REQ,[Default]), UsedName(NVDLA_WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(CMAC_IN_RT_LATENCY,[Default]), UsedName(NVDLA_WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_CACC_SDP_SINGLE_THROUGHPUT,[Default]), UsedName(NVDLA_VMOD_PRIMARY_BANDWIDTH,[Default]), UsedName(WEIGHT_COMPRESSION_ENABLE,[Default]), UsedName(NVDLA_MEMORY_ATOMIC_LOG2,[Default]), UsedName(VLIB_BYPASS_POWER_CG,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_DIV2,[Default]), UsedName(NVDLA_PDP_ENABLE,[Default]), UsedName(PDP_THROUGHPUT,[Default]), UsedName(NVDLA_PDP_THROUGHPUT,[Default]), UsedName(NVDLA_MEMIF_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(NVDLA_MAC_ATOMIC_K_SIZE_LOG2,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH_LOG2,[Default]), UsedName(NVDLA_VMOD_SDP_ERDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CDP_THROUGHPUT,[Default]), UsedName(NUM_DMA_WRITE_CLIENTS,[Default]), UsedName(NVDLA_RUBIK_ENABLE,[Default]), UsedName(finalize,[Default]), UsedName(NVDLA_RUBIK_CONTRACT_ENABLE,[Default]), UsedName(NVDLA_CBUF_BANK_WIDTH,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_WIDTH,[Default]), UsedName(MAC_ATOMIC_C_SIZE,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_LATENCY,[Default]), UsedName(PDP_ENABLE,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(NV_FPGA_FIFOGEN,[Default]), UsedName(CMAC_INPUT_NUM,[Default]), UsedName(SECONDARY_MEMIF_WIDTH,[Default]), UsedName(NVDLA_DMA_RD_RSP,[Default]), UsedName(WINOGRAD_ENABLE,[Default]), UsedName(MAX_BATCH_SIZE,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(WEIGHT_DATA_TYPE_INT8,[Default]), UsedName(NVDLA_BPE_LOG2,[Default]), UsedName(NVDLA_PRIMARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(DESIGNWARE_NOEXIST,[Default]), UsedName(NVDLA_VMOD_PDP_RDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_OUTPUT_THROUGHPUT_USE,[Default]), UsedName(NVDLA_RUBIK_RESHAPE_ENABLE,[Default]), UsedName(NVDLA_MAC_ATOMIC_C_SIZE,[Default]), UsedName(RT_CMAC_A2CACC_LATENCY,[Default]), UsedName(BATCH_ENABLE,[Default]), UsedName(NVDLA_NUM_DMA_READ_CLIENTS,[Default]), UsedName(NV_FPGA_SYSTEM,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE,[Default]), UsedName(asInstanceOf,[Default]), UsedName(NVDLA_MCIF_BURST_SIZE_LOG2,[Default]), UsedName(CMAC_ATOMC,[Default]), UsedName($asInstanceOf,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PDP_SINGLE_LBUF_DEPTH,[Default]), UsedName(NVDLA_VMOD_SDP_NRDMA_OUTPUT_THROUGHPUT,[Default]), UsedName(SECONDARY_MEMIF_LATENCY,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_end_FIELD,[Default]), UsedName(PKT_nvdla_stripe_info_stripe_st_FIELD,[Default]), UsedName(CMAC_SLCG_NUM,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_WIDTH_LOG2,[Default]), UsedName(NUM_DMA_READ_CLIENTS,[Default]), UsedName(MAC_PD_LATENCY,[Default]), UsedName(NVDLA_SDP_BS_ENABLE,[Default]), UsedName(NVDLA_DMA_MASK_BIT,[Default]), UsedName(NVDLA_MAC_RESULT_WIDTH,[Default]), UsedName(CMAC_OUT_RT_LATENCY,[Default]), UsedName(SDP_BS_THROUGHPUT,[Default]), UsedName(hashCode,[Default]), UsedName(CMAC_BPE,[Default]), UsedName(NVDLA_CACC_SDP_WIDTH,[Default]), UsedName(NVDLA_VMOD_SDP_MRDMA_LATENCY_FIFO_DEPTH,[Default]), UsedName(CMAC_ACTV_LATENCY,[Default]), UsedName(SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]), UsedName(NVDLA_SDP_EW_ENABLE,[Default]), UsedName(CMAC_ATOMK,[Default]), UsedName(wait,[Default]), UsedName(CMAC_RESULT_WIDTH,[Default]), UsedName(notifyAll,[Default]), UsedName(NVDLA_SDP_EW_THROUGHPUT_LOG2,[Default]), UsedName(CBUF_BANK_DEPTH,[Default]), UsedName(NVDLA_DMA_RD_SIZE,[Default]), UsedName(NVDLA_CDP_THROUGHPUT,[Default]), UsedName(CMAC_ATOMK_HALF,[Default]), UsedName(CBUF_BANK_NUMBER,[Default]), UsedName(PKT_nvdla_stripe_info_layer_end_FIELD,[Default]), UsedName(NVDLA_SECONDARY_MEMIF_MAX_BURST_LENGTH,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.cmacConfiguration)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_regfileDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_regfileDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_regfileDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_regfileDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(NV_NVDLA_CSC_regfileDriver,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_regfileDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_regfileDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(NV_NVDLA_CDMA_IMG_ctrlDriver,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_ctrlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_delivery_buffer...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_delivery_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_delivery_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_delivery_buffer,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cacc2glb_done_intr_pd,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(dbuf_wr_data,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dbuf_wr_addr,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dbuf_rd_layer_end,[Default]), UsedName(dbuf_rd_addr,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_CACC_delivery_buffer,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(dbuf_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbuf_wr_en,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dbuf_rd_ready,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_CACC_delivery_buffer;init;,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_delivery_buffer has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(cacc2glb_done_intr_pd,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(dbuf_wr_data,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dbuf_wr_addr,[Default]), UsedName(accu2sc_credit_vld,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(dbuf_rd_layer_end,[Default]), UsedName(dbuf_rd_addr,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(NV_NVDLA_CACC_delivery_buffer,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(dbuf_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(dbuf_wr_en,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(accu2sc_credit_size,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dbuf_rd_ready,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(nvdla;NV_NVDLA_CACC_delivery_buffer;init;,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_delivery_buffer)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_pack...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_pack,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(img2cvt_mn_wr_data,[Default]), UsedName(img2cvt_dat_wr_info_pd,[Default]), UsedName(NV_NVDLA_CDMA_IMG_pack,[Default]), UsedName(sg2pack_data_entries,[Default]), UsedName(suggestName,[Default]), UsedName(sg2pack_mn_enable,[Default]), UsedName(pixel_planar1_sft,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(pixel_early_end,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(sg2pack_sub_h_st,[Default]), UsedName(img2status_dat_slices,[Default]), UsedName(desiredName,[Default]), UsedName(img2cvt_dat_wr_data,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(sg2pack_img_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_en,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_mean_bv,[Default]), UsedName(sg2pack_entry_end,[Default]), UsedName(instanceName,[Default]), UsedName(sg2pack_height_total,[Default]), UsedName(pixel_planar0_sft,[Default]), UsedName(getClass,[Default]), UsedName(img2sbuf_p0_rd_data,[Default]), UsedName(_id,[Default]), UsedName(sg2pack_img_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(img2cvt_dat_wr_pad_mask,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(pixel_bank,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_pack;init;,[Default]), UsedName(img2cvt_dat_wr_sel,[Default]), UsedName(pixel_data_shrink,[Default]), UsedName(sg2pack_sub_h_mid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(pixel_packed_10b,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_mean_ax,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(sg2pack_img_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(io,[Default]), UsedName(sg2pack_entry_mid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(img2sbuf_p0_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_mean_ry,[Default]), UsedName(parentPathName,[Default]), UsedName(pixel_data_expand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(img2sbuf_p0_rd_addr,[Default]), UsedName(pack_is_done,[Default]), UsedName(pixel_uint,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sg2pack_entry_st,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(sg2pack_sub_h_end,[Default]), UsedName(pixel_precision,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(layer_st,[Default]), UsedName(reg2dp_mean_gu,[Default]), UsedName(reg2dp_pad_left,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_pack has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(status2dma_wr_idx,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(img2cvt_mn_wr_data,[Default]), UsedName(img2cvt_dat_wr_info_pd,[Default]), UsedName(NV_NVDLA_CDMA_IMG_pack,[Default]), UsedName(sg2pack_data_entries,[Default]), UsedName(suggestName,[Default]), UsedName(sg2pack_mn_enable,[Default]), UsedName(pixel_planar1_sft,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(pixel_early_end,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(sg2pack_sub_h_st,[Default]), UsedName(img2status_dat_slices,[Default]), UsedName(desiredName,[Default]), UsedName(img2cvt_dat_wr_data,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(sg2pack_img_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_en,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(reg2dp_mean_bv,[Default]), UsedName(sg2pack_entry_end,[Default]), UsedName(instanceName,[Default]), UsedName(sg2pack_height_total,[Default]), UsedName(pixel_planar0_sft,[Default]), UsedName(getClass,[Default]), UsedName(img2sbuf_p0_rd_data,[Default]), UsedName(_id,[Default]), UsedName(sg2pack_img_pd,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(img2cvt_dat_wr_pad_mask,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img2cvt_dat_wr_addr,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(pixel_bank,[Default]), UsedName(generateComponent,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_pack;init;,[Default]), UsedName(img2cvt_dat_wr_sel,[Default]), UsedName(pixel_data_shrink,[Default]), UsedName(sg2pack_sub_h_mid,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(pixel_packed_10b,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(reg2dp_mean_ax,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_datain_width,[Default]), UsedName(sg2pack_img_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(io,[Default]), UsedName(sg2pack_entry_mid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(img2sbuf_p0_rd_en,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_datain_channel,[Default]), UsedName(asInstanceOf,[Default]), UsedName(reg2dp_mean_ry,[Default]), UsedName(parentPathName,[Default]), UsedName(pixel_data_expand,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(img2sbuf_p0_rd_addr,[Default]), UsedName(pack_is_done,[Default]), UsedName(pixel_uint,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sg2pack_entry_st,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(sg2pack_sub_h_end,[Default]), UsedName(pixel_precision,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]), UsedName(layer_st,[Default]), UsedName(reg2dp_mean_gu,[Default]), UsedName(reg2dp_pad_left,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_pack)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CSC_WL_decDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CSC_WL_decDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CSC_WL_decDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CSC_WL_decDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_CSC_WL_decDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CSC_WL_decDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CSC_WL_decDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(reg2dp_proc_precision,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(_onModuleClose,[Default]), UsedName(csb2cmac_a_req_pd,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(csb2cmac_a_req_pvld,[Default]), UsedName(_id,[Default]), UsedName(cmac_a2csb_resp_valid,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(cmac_a2csb_resp_pd,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(NV_NVDLA_CMAC_reg,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(csb2cmac_a_req_prdy,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_reg;init;,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_reg has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_cdmaDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_cdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_cdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_cdmaDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(NV_NVDLA_cdmaDriver,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_cdmaDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_cdmaDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_GLB_CSB_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_GLB_CSB_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_GLB_CSB_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_GLB_CSB_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(sdp_done_set0_trigger,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(pdp_done_mask1,[Default]), UsedName(cdma_dat_done_set0,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(sdp_done_set1,[Default]), UsedName(getPorts,[Default]), UsedName(pdp_done_status0,[Default]), UsedName(rubik_done_status1,[Default]), UsedName(reg_offset,[Default]), UsedName(sdp_done_status0,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(bdma_done_mask1,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cdma_dat_done_mask0,[Default]), UsedName(toNamed,[Default]), UsedName(cdp_done_status1,[Default]), UsedName(nvdla;NV_NVDLA_GLB_CSB_reg;init;,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cacc_done_mask0,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(NV_NVDLA_GLB_CSB_reg,[Default]), UsedName(parentModName,[Default]), UsedName(cdp_done_set0,[Default]), UsedName(cdp_done_mask0,[Default]), UsedName(rubik_done_mask0,[Default]), UsedName(getModulePorts,[Default]), UsedName(bdma_done_mask0,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cdma_dat_done_status1,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(pdp_done_mask0,[Default]), UsedName(cacc_done_mask1,[Default]), UsedName(_id,[Default]), UsedName(cdma_wt_done_mask1,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(cacc_done_set0,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bdma_done_set0,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cdma_dat_done_set1,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_done_mask1,[Default]), UsedName(cdp_done_set1,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(pdp_done_set0,[Default]), UsedName(cacc_done_status1,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(bdma_done_status0,[Default]), UsedName(rubik_done_mask1,[Default]), UsedName(pathName,[Default]), UsedName(cdma_dat_done_mask1,[Default]), UsedName(cdma_wt_done_mask0,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(cacc_done_status0,[Default]), UsedName(sdp_done_status1,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp_done_mask0,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pdp_done_set1,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(sdp_done_status0_trigger,[Default]), UsedName(portsSize,[Default]), UsedName(cdp_done_mask1,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cdp_done_status0,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cdma_wt_done_set0,[Default]), UsedName(rubik_done_status0,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(cdma_wt_done_set1,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(rubik_done_set1,[Default]), UsedName(cdma_wt_done_status0,[Default]), UsedName(bdma_done_status1,[Default]), UsedName(pdp_done_status1,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cdma_wt_done_status1,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(sdp_done_set0,[Default]), UsedName(cdma_dat_done_status0,[Default]), UsedName(cacc_done_set1,[Default]), UsedName(bdma_done_set1,[Default]), UsedName(rubik_done_set0,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_GLB_CSB_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(sdp_done_set0_trigger,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(pdp_done_mask1,[Default]), UsedName(cdma_dat_done_set0,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(sdp_done_set1,[Default]), UsedName(getPorts,[Default]), UsedName(pdp_done_status0,[Default]), UsedName(rubik_done_status1,[Default]), UsedName(reg_offset,[Default]), UsedName(sdp_done_status0,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(bdma_done_mask1,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cdma_dat_done_mask0,[Default]), UsedName(toNamed,[Default]), UsedName(cdp_done_status1,[Default]), UsedName(nvdla;NV_NVDLA_GLB_CSB_reg;init;,[Default]), UsedName(_onModuleClose,[Default]), UsedName(cacc_done_mask0,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(NV_NVDLA_GLB_CSB_reg,[Default]), UsedName(parentModName,[Default]), UsedName(cdp_done_set0,[Default]), UsedName(cdp_done_mask0,[Default]), UsedName(rubik_done_mask0,[Default]), UsedName(getModulePorts,[Default]), UsedName(bdma_done_mask0,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(cdma_dat_done_status1,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(pdp_done_mask0,[Default]), UsedName(cacc_done_mask1,[Default]), UsedName(_id,[Default]), UsedName(cdma_wt_done_mask1,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(cacc_done_set0,[Default]), UsedName(isInstanceOf,[Default]), UsedName(bdma_done_set0,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(cdma_dat_done_set1,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp_done_mask1,[Default]), UsedName(cdp_done_set1,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(pdp_done_set0,[Default]), UsedName(cacc_done_status1,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(bdma_done_status0,[Default]), UsedName(rubik_done_mask1,[Default]), UsedName(pathName,[Default]), UsedName(cdma_dat_done_mask1,[Default]), UsedName(cdma_wt_done_mask0,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(cacc_done_status0,[Default]), UsedName(sdp_done_status1,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp_done_mask0,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pdp_done_set1,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(sdp_done_status0_trigger,[Default]), UsedName(portsSize,[Default]), UsedName(cdp_done_mask1,[Default]), UsedName(asInstanceOf,[Default]), UsedName(cdp_done_status0,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(cdma_wt_done_set0,[Default]), UsedName(rubik_done_status0,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(cdma_wt_done_set1,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(rubik_done_set1,[Default]), UsedName(cdma_wt_done_status0,[Default]), UsedName(bdma_done_status1,[Default]), UsedName(pdp_done_status1,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(cdma_wt_done_status1,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(sdp_done_set0,[Default]), UsedName(cdma_dat_done_status0,[Default]), UsedName(cacc_done_set1,[Default]), UsedName(bdma_done_set1,[Default]), UsedName(rubik_done_set0,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_GLB_CSB_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_REG_dual...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_REG_dual,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nrdma_ram_type,[Default]), UsedName(in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(nrdma_stall,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_dual,[Default]), UsedName(brdma_ram_type,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(erdma_stall,[Default]), UsedName(bs_base_addr_high,[Default]), UsedName(erdma_data_use,[Default]), UsedName(src_surface_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(nrdma_data_use,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(perf_nan_inf_count_en,[Default]), UsedName(mrdma_stall,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(ew_batch_stride,[Default]), UsedName(toNamed,[Default]), UsedName(erdma_ram_type,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nrdma_data_mode,[Default]), UsedName(erdma_data_size,[Default]), UsedName(ew_base_addr_low,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(bn_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(perf_dma_en,[Default]), UsedName(reg_wr_en,[Default]), UsedName(bn_batch_stride,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(bn_base_addr_low,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(channel,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(ew_base_addr_high,[Default]), UsedName(brdma_data_mode,[Default]), UsedName(_id,[Default]), UsedName(erdma_disable,[Default]), UsedName(bn_base_addr_high,[Default]), UsedName(bs_line_stride,[Default]), UsedName(brdma_stall,[Default]), UsedName(brdma_data_size,[Default]), UsedName(bn_surface_stride,[Default]), UsedName(toString,[Default]), UsedName(status_inf_input_num,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(src_ram_type,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(erdma_data_mode,[Default]), UsedName(generateComponent,[Default]), UsedName(bs_batch_stride,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(ew_line_stride,[Default]), UsedName(nrdma_disable,[Default]), UsedName(pathName,[Default]), UsedName(proc_precision,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_REG_dual;init;,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(bs_base_addr_low,[Default]), UsedName(==,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(status_nan_input_num,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(brdma_data_use,[Default]), UsedName(asInstanceOf,[Default]), UsedName(bs_surface_stride,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ew_surface_stride,[Default]), UsedName(height,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(nrdma_data_size,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(width_a,[Default]), UsedName(winograd,[Default]), UsedName(out_precision,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(brdma_disable,[Default]), UsedName(getPublicFields,[Default]), UsedName(batch_number,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_REG_dual has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nrdma_ram_type,[Default]), UsedName(in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(nrdma_stall,[Default]), UsedName(NV_NVDLA_SDP_RDMA_REG_dual,[Default]), UsedName(brdma_ram_type,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(src_base_addr_low,[Default]), UsedName(erdma_stall,[Default]), UsedName(bs_base_addr_high,[Default]), UsedName(erdma_data_use,[Default]), UsedName(src_surface_stride,[Default]), UsedName(reg_offset,[Default]), UsedName(nrdma_data_use,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(perf_nan_inf_count_en,[Default]), UsedName(mrdma_stall,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(ew_batch_stride,[Default]), UsedName(toNamed,[Default]), UsedName(erdma_ram_type,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nrdma_data_mode,[Default]), UsedName(erdma_data_size,[Default]), UsedName(ew_base_addr_low,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(src_line_stride,[Default]), UsedName(bn_line_stride,[Default]), UsedName(portsContains,[Default]), UsedName(perf_dma_en,[Default]), UsedName(reg_wr_en,[Default]), UsedName(bn_batch_stride,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(bn_base_addr_low,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(channel,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(ew_base_addr_high,[Default]), UsedName(brdma_data_mode,[Default]), UsedName(_id,[Default]), UsedName(erdma_disable,[Default]), UsedName(bn_base_addr_high,[Default]), UsedName(bs_line_stride,[Default]), UsedName(brdma_stall,[Default]), UsedName(brdma_data_size,[Default]), UsedName(bn_surface_stride,[Default]), UsedName(toString,[Default]), UsedName(status_inf_input_num,[Default]), UsedName(src_base_addr_high,[Default]), UsedName(reset,[Default]), UsedName(src_ram_type,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(erdma_data_mode,[Default]), UsedName(generateComponent,[Default]), UsedName(bs_batch_stride,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(ew_line_stride,[Default]), UsedName(nrdma_disable,[Default]), UsedName(pathName,[Default]), UsedName(proc_precision,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_REG_dual;init;,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(bs_base_addr_low,[Default]), UsedName(==,[Default]), UsedName(flying_mode,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(status_nan_input_num,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(brdma_data_use,[Default]), UsedName(asInstanceOf,[Default]), UsedName(bs_surface_stride,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(ew_surface_stride,[Default]), UsedName(height,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(nrdma_data_size,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(width_a,[Default]), UsedName(winograd,[Default]), UsedName(out_precision,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(brdma_disable,[Default]), UsedName(getPublicFields,[Default]), UsedName(batch_number,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_REG_dual)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(wt_pre_data,[Default]), UsedName(wt_actv_pvld_w,[Default]), UsedName(wt_sd_data,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(dat_actv_nz_reg,[Default]), UsedName(getClass,[Default]), UsedName(dat_pre_nz,[Default]), UsedName(wt_actv_nz_out,[Default]), UsedName(toString,[Default]), UsedName(wt_sd_nz,[Default]), UsedName(wt_actv_data_out,[Default]), UsedName(wt_sd_pvld_w,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_active;activeImpl;init;,[Default]), UsedName(dat_actv_pvld_reg,[Default]), UsedName(wt_actv_pvld_out,[Default]), UsedName(dat_pre_pvld,[Default]), UsedName(wt_pre_nz,[Default]), UsedName(dat_pre_stripe_end_out,[Default]), UsedName(dat_actv_stripe_end,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(wt_sd_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(wt_actv_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(activeImpl,[Default]), UsedName(dat_pre_stripe_st_out,[Default]), UsedName(dat_pre_data,[Default]), UsedName(wt_pre_sel,[Default]), UsedName(dat_actv_data_reg,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(##,[Default]), UsedName(wt_pre_data,[Default]), UsedName(wt_actv_pvld_w,[Default]), UsedName(wt_sd_data,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(dat_actv_nz_reg,[Default]), UsedName(getClass,[Default]), UsedName(dat_pre_nz,[Default]), UsedName(wt_actv_nz_out,[Default]), UsedName(toString,[Default]), UsedName(wt_sd_nz,[Default]), UsedName(wt_actv_data_out,[Default]), UsedName(wt_sd_pvld_w,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_active;activeImpl;init;,[Default]), UsedName(dat_actv_pvld_reg,[Default]), UsedName(wt_actv_pvld_out,[Default]), UsedName(dat_pre_pvld,[Default]), UsedName(wt_pre_nz,[Default]), UsedName(dat_pre_stripe_end_out,[Default]), UsedName(dat_actv_stripe_end,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(wt_sd_pvld,[Default]), UsedName(asInstanceOf,[Default]), UsedName(wt_actv_vld,[Default]), UsedName($asInstanceOf,[Default]), UsedName(activeImpl,[Default]), UsedName(dat_pre_stripe_st_out,[Default]), UsedName(dat_pre_data,[Default]), UsedName(wt_pre_sel,[Default]), UsedName(dat_actv_data_reg,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_active.activeImpl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(NV_NVDLA_CDP_DP_LUT_ctrlDriver,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_LUT_ctrlDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(di,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(we,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(dout,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(clk_mgated,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(ra,[Default]), UsedName(generateComponent,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(iwe,[Default]), UsedName(parentPathName,[Default]), UsedName(NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80 has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(name,[Default]), UsedName(nvdla;NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80;init;,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(di,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(we,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(dout,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(clk_mgated,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(ra,[Default]), UsedName(generateComponent,[Default]), UsedName(clk,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(iwe,[Default]), UsedName(parentPathName,[Default]), UsedName(NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_WDMA_CMD_fifo_flopram_rwsa_1x80)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CACC_REG_single...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CACC_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CACC_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CACC_REG_single,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(nvdla_csc_s_status_0_wren,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(NV_NVDLA_CACC_REG_single,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla_csc_s_status_0_out,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla;NV_NVDLA_CACC_REG_single;init;,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla_csc_s_pointer_0_out,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_csc_s_pointer_0_wren,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CACC_REG_single has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(producer,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg_offset,[Default]), UsedName(nvdla_csc_s_status_0_wren,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(NV_NVDLA_CACC_REG_single,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(status_0,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(nvdla_csc_s_status_0_out,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(status_1,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(consumer,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(nvdla;NV_NVDLA_CACC_REG_single;init;,[Default]), UsedName(reg_rd_data,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla_csc_s_pointer_0_out,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_csc_s_pointer_0_wren,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CACC_REG_single)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_unpackDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_unpackDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName(NV_NVDLA_SDP_RDMA_unpackDriver,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_unpackDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_unpackDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDP_DP_LUT_ctrl...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDP_DP_LUT_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDP_DP_LUT_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDP_DP_LUT_ctrl,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_sqsum_bypass,[Default]), UsedName(reg2dp_lut_le_index_offset,[Default]), UsedName(##,[Default]), UsedName(dp2lut_prdy,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(reg2dp_lut_le_function,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(dp2lut_Y_entry,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(nvdla;NV_NVDLA_CDP_DP_LUT_ctrl;init;,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(dp2lut_pvld,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(sum2sync_pvld,[Default]), UsedName(reg2dp_lut_lo_start_high,[Default]), UsedName(_id,[Default]), UsedName(sum2sync_prdy,[Default]), UsedName(sum2itp_pd,[Default]), UsedName(dp2lut_X_entry,[Default]), UsedName(dp2lut_Yinfo,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_lut_le_start_low,[Default]), UsedName(generateComponent,[Default]), UsedName(sum2itp_pvld,[Default]), UsedName(reg2dp_lut_le_index_select,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dp2lut_Xinfo,[Default]), UsedName(reg2dp_lut_lo_start_low,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_lut_le_start_high,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(NV_NVDLA_CDP_DP_LUT_ctrl,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sum2itp_prdy,[Default]), UsedName(hashCode,[Default]), UsedName(sum2sync_pd,[Default]), UsedName(reg2dp_lut_lo_index_select,[Default]), UsedName(clock,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDP_DP_LUT_ctrl has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDP_DP_LUT_ctrl)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_RDMA_dmaif...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_RDMA_dmaif)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_RDMA_dmaif)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_RDMA_dmaif,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dma_rd_req_vld,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(dma_rd_rsp_rdy,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(dma_rd_req_ram_type,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(forceName,[Default]), UsedName(dma_rd_req_rdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_id,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_SDP_RDMA_dmaif,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dma_rd_rsp_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dma_rd_cdt_lat_fifo_pop,[Default]), UsedName(circuitName,[Default]), UsedName(dma_rd_req_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_dmaif;init;,[Default]), UsedName(dma_rd_rsp_ram_type,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dma_rd_rsp_vld,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_RDMA_dmaif has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(dma_rd_req_vld,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(dma_rd_rsp_rdy,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(dma_rd_req_ram_type,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(forceName,[Default]), UsedName(dma_rd_req_rdy,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_id,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(toString,[Default]), UsedName(NV_NVDLA_SDP_RDMA_dmaif,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dma_rd_rsp_pd,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(dma_rd_cdt_lat_fifo_pop,[Default]), UsedName(circuitName,[Default]), UsedName(dma_rd_req_pd,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_SDP_RDMA_dmaif;init;,[Default]), UsedName(dma_rd_rsp_ram_type,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(dma_rd_rsp_vld,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_RDMA_dmaif)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_partition_aDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_partition_aDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_partition_aDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_partition_aDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(NV_NVDLA_partition_aDriver,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_partition_aDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_partition_aDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_cfg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_cfg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_cfg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_cfg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(_onModuleClose,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reg2dp_conv_mode,[Default]), UsedName(reset,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_cfg;init;,[Default]), UsedName(NV_NVDLA_CMAC_CORE_cfg,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(cfg_reg_en,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_cfg has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_cfg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CMAC_CORE_rt_in...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_in)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_in)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CMAC_CORE_rt_in,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(sc2mac_dat_data,[Default]), UsedName(in_wt_pvld,[Default]), UsedName(suggestName,[Default]), UsedName(in_wt_sel,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(NV_NVDLA_CMAC_CORE_rt_in,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(toNamed,[Default]), UsedName(rt_inImpl,[Default]), UsedName(_onModuleClose,[Default]), UsedName(in_dat_pvld,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(in_wt_mask,[Default]), UsedName(instanceName,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(toString,[Default]), UsedName(sc2mac_wt_sel,[Default]), UsedName(reset,[Default]), UsedName(sc2mac_wt_data,[Default]), UsedName(in_dat_data,[Default]), UsedName(sc2mac_dat_pvld,[Default]), UsedName(isInstanceOf,[Default]), UsedName(sc2mac_dat_pd,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(rt_in,[Default]), UsedName(generateComponent,[Default]), UsedName(internal_clock,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(circuitName,[Default]), UsedName(pathName,[Default]), UsedName(in_dat_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(in_dat_stripe_end,[Default]), UsedName(in_dat_mask,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(in_wt_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(sc2mac_dat_mask,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sc2mac_wt_pvld,[Default]), UsedName(in_dat_stripe_st,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(nvdla;NV_NVDLA_CMAC_CORE_rt_in;init;,[Default]), UsedName(getPublicFields,[Default]), UsedName(sc2mac_wt_mask,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CMAC_CORE_rt_in has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CMAC_CORE_rt_in)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_x2_intDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_x2_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_x2_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_x2_intDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(NV_NVDLA_SDP_HLS_x2_intDriver,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_x2_intDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_x2_intDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_PDP_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_PDP_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_PDP_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_PDP_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_recip_kernel_height,[Default]), UsedName(reg2dp_partial_width_in_mid,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_pad_value_2x,[Default]), UsedName(reg2dp_kernel_width,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(reg2dp_split_num,[Default]), UsedName(reg2dp_partial_width_in_first,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(dp2reg_nan_output_num,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(reg2dp_pad_value_5x,[Default]), UsedName(reg2dp_pad_value_7x,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_cube_out_height,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_kernel_stride_width,[Default]), UsedName(getCommands,[Default]), UsedName(dp2reg_nan_input_num,[Default]), UsedName(parentModName,[Default]), UsedName(dp2reg_d0_perf_write_stall,[Default]), UsedName(getModulePorts,[Default]), UsedName(reg2dp_kernel_stride_height,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_pooling_method,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(csb2pdp_req_pvld,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_partial_width_in_last,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(nvdla;NV_NVDLA_PDP_reg;init;,[Default]), UsedName(reg2dp_partial_width_out_mid,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_pad_value_1x,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_pad_top,[Default]), UsedName(reg2dp_pad_value_3x,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(dp2reg_d1_perf_write_stall,[Default]), UsedName(reg2dp_kernel_height,[Default]), UsedName(addPostnameHook,[Default]), UsedName(reg2dp_cube_in_height,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(csb2pdp_req_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(reg2dp_pad_value_4x,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_cube_out_channel,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(dp2reg_inf_input_num,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_PDP_reg,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_cube_out_width,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(pdp2csb_resp_pd,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(reg2dp_partial_width_out_last,[Default]), UsedName(reg2dp_partial_width_out_first,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_input_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_cube_in_channel,[Default]), UsedName(csb2pdp_req_pd,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_pad_value_6x,[Default]), UsedName(reg2dp_cube_in_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(reg2dp_recip_kernel_width,[Default]), UsedName(getPublicFields,[Default]), UsedName(pdp2csb_resp_valid,[Default]), UsedName(reg2dp_pad_bottom,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_pad_left,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_PDP_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_recip_kernel_height,[Default]), UsedName(reg2dp_partial_width_in_mid,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_pad_value_2x,[Default]), UsedName(reg2dp_kernel_width,[Default]), UsedName(reg2dp_src_surface_stride,[Default]), UsedName(reg2dp_split_num,[Default]), UsedName(reg2dp_partial_width_in_first,[Default]), UsedName(suggestName,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(dp2reg_nan_output_num,[Default]), UsedName(toNamed,[Default]), UsedName(slcg_op_en,[Default]), UsedName(reg2dp_pad_value_5x,[Default]), UsedName(reg2dp_pad_value_7x,[Default]), UsedName(_onModuleClose,[Default]), UsedName(reg2dp_dst_surface_stride,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(reg2dp_cube_out_height,[Default]), UsedName(portsContains,[Default]), UsedName(reg2dp_kernel_stride_width,[Default]), UsedName(getCommands,[Default]), UsedName(dp2reg_nan_input_num,[Default]), UsedName(parentModName,[Default]), UsedName(dp2reg_d0_perf_write_stall,[Default]), UsedName(getModulePorts,[Default]), UsedName(reg2dp_kernel_stride_height,[Default]), UsedName(setRef,[Default]), UsedName(reg2dp_pooling_method,[Default]), UsedName(reg2dp_dst_line_stride,[Default]), UsedName(forceName,[Default]), UsedName(csb2pdp_req_pvld,[Default]), UsedName(instanceName,[Default]), UsedName(reg2dp_interrupt_ptr,[Default]), UsedName(getClass,[Default]), UsedName(reg2dp_partial_width_in_last,[Default]), UsedName(_id,[Default]), UsedName(reg2dp_cya,[Default]), UsedName(nvdla;NV_NVDLA_PDP_reg;init;,[Default]), UsedName(reg2dp_partial_width_out_mid,[Default]), UsedName(dp2reg_done,[Default]), UsedName(toString,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_nan_to_zero,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(reg2dp_pad_value_1x,[Default]), UsedName(generateComponent,[Default]), UsedName(reg2dp_pad_top,[Default]), UsedName(reg2dp_pad_value_3x,[Default]), UsedName(reg2dp_dst_base_addr_high,[Default]), UsedName(dp2reg_d1_perf_write_stall,[Default]), UsedName(reg2dp_kernel_height,[Default]), UsedName(addPostnameHook,[Default]), UsedName(reg2dp_cube_in_height,[Default]), UsedName(_closed,[Default]), UsedName(reg2dp_src_line_stride,[Default]), UsedName(circuitName,[Default]), UsedName(csb2pdp_req_prdy,[Default]), UsedName(pathName,[Default]), UsedName(finalize,[Default]), UsedName(reg2dp_pad_value_4x,[Default]), UsedName(getRef,[Default]), UsedName(reg2dp_cube_out_channel,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_flying_mode,[Default]), UsedName(dp2reg_inf_input_num,[Default]), UsedName(==,[Default]), UsedName(NV_NVDLA_PDP_reg,[Default]), UsedName(ne,[Default]), UsedName(reg2dp_cube_out_width,[Default]), UsedName(io,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(initializeInParent,[Default]), UsedName(pdp2csb_resp_pd,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(reg2dp_src_base_addr_low,[Default]), UsedName(reg2dp_partial_width_out_last,[Default]), UsedName(reg2dp_partial_width_out_first,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(reg2dp_input_data,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_cube_in_channel,[Default]), UsedName(csb2pdp_req_pd,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(reg2dp_dst_base_addr_low,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(reg2dp_pad_value_6x,[Default]), UsedName(reg2dp_cube_in_width,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(reg2dp_src_base_addr_high,[Default]), UsedName(hashCode,[Default]), UsedName(reg2dp_pad_right,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(reg2dp_recip_kernel_width,[Default]), UsedName(getPublicFields,[Default]), UsedName(pdp2csb_resp_valid,[Default]), UsedName(reg2dp_pad_bottom,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(reg2dp_dst_ram_type,[Default]), UsedName(IO,[Default]), UsedName(reg2dp_pad_left,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_PDP_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(NV_NVDLA_SDP_WDMA_DAT_outDriver,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(conf,[Implicit]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_WDMA_DAT_outDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_trtDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(executionStart,[Default]), UsedName(##,[Default]), UsedName(NV_NVDLA_SDP_HLS_X_int_trtDriver,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(getClass,[Default]), UsedName(toString,[Default]), UsedName(main,[Default]), UsedName(args,[Default]), UsedName(isInstanceOf,[Default]), UsedName(equals,[Default]), UsedName(finalize,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(clone,[Default]), UsedName(delayedInit,[Default]), UsedName(notify,[Default]), UsedName($init$,[Default]), UsedName(asInstanceOf,[Default]), UsedName($asInstanceOf,[Default]), UsedName(hashCode,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_SDP_HLS_X_int_trtDriver)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_IMG_sg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_IMG_sg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_IMG_sg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_IMG_sg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_datain_addr_high_1,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(cvif2img_dat_rd_rsp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(img2sbuf_p0_wr_en,[Default]), UsedName(img_dat2mcif_rd_req_ready,[Default]), UsedName(pixel_planar0_lp_burst,[Default]), UsedName(sg2pack_data_entries,[Default]), UsedName(suggestName,[Default]), UsedName(sg2pack_mn_enable,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(sg_is_done,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(NV_NVDLA_CDMA_IMG_sg,[Default]), UsedName(sg2pack_sub_h_st,[Default]), UsedName(desiredName,[Default]), UsedName(pixel_planar1_lp_burst,[Default]), UsedName(img_dat2cvif_rd_req_ready,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(pixel_planar1_lp_vld,[Default]), UsedName(img2sbuf_p0_wr_addr,[Default]), UsedName(_onModuleClose,[Default]), UsedName(pixel_planar0_bundle_limit_1st,[Default]), UsedName(sg2pack_img_pvld,[Default]), UsedName(img_dat2mcif_rd_req_valid,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(pixel_planar1_rp_vld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(pixel_planar0_width_burst,[Default]), UsedName(reg2dp_mean_format,[Default]), UsedName(sg2pack_entry_end,[Default]), UsedName(instanceName,[Default]), UsedName(sg2pack_height_total,[Default]), UsedName(pixel_planar0_rp_burst,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dp2reg_img_rd_latency,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(img_dat2mcif_rd_req_pd,[Default]), UsedName(pixel_planar1_width_burst,[Default]), UsedName(sg2pack_img_pd,[Default]), UsedName(toString,[Default]), UsedName(pixel_planar0_bundle_limit,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_uv_line_stride,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img_dat2cvif_rd_req_valid,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(mcif2img_dat_rd_rsp_pd,[Default]), UsedName(pixel_planar1_rp_burst,[Default]), UsedName(generateComponent,[Default]), UsedName(sg2pack_sub_h_mid,[Default]), UsedName(pixel_planar0_byte_sft,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif2img_dat_rd_rsp_valid,[Default]), UsedName(circuitName,[Default]), UsedName(pixel_planar1_bundle_limit,[Default]), UsedName(pixel_planar0_lp_vld,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sg2pack_img_prdy,[Default]), UsedName(mcif2img_dat_rd_rsp_ready,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_pixel_y_offset,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(io,[Default]), UsedName(sg2pack_entry_mid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pixel_planar1_byte_sft,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(img2sbuf_p0_wr_data,[Default]), UsedName(pixel_order,[Default]), UsedName(reg2dp_datain_addr_low_1,[Default]), UsedName(cvif2img_dat_rd_rsp_pd,[Default]), UsedName(parentPathName,[Default]), UsedName(pixel_planar1_bundle_limit_1st,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_sg;init;,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sg2pack_entry_st,[Default]), UsedName(dp2reg_img_rd_stall,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(sg2pack_sub_h_end,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(img_dat2cvif_rd_req_pd,[Default]), UsedName(pixel_planar0_rp_vld,[Default]), UsedName(IO,[Default]), UsedName(cvif2img_dat_rd_rsp_ready,[Default]), UsedName(layer_st,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_IMG_sg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(reg2dp_datain_addr_high_1,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(cvif2img_dat_rd_rsp_valid,[Default]), UsedName(getPorts,[Default]), UsedName(reg2dp_datain_ram_type,[Default]), UsedName(reg2dp_line_stride,[Default]), UsedName(reg2dp_entries,[Default]), UsedName(img2sbuf_p0_wr_en,[Default]), UsedName(img_dat2mcif_rd_req_ready,[Default]), UsedName(pixel_planar0_lp_burst,[Default]), UsedName(sg2pack_data_entries,[Default]), UsedName(suggestName,[Default]), UsedName(sg2pack_mn_enable,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(sg_is_done,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(NV_NVDLA_CDMA_IMG_sg,[Default]), UsedName(sg2pack_sub_h_st,[Default]), UsedName(desiredName,[Default]), UsedName(pixel_planar1_lp_burst,[Default]), UsedName(img_dat2cvif_rd_req_ready,[Default]), UsedName(reg2dp_datain_addr_low_0,[Default]), UsedName(toNamed,[Default]), UsedName(pixel_planar1_lp_vld,[Default]), UsedName(img2sbuf_p0_wr_addr,[Default]), UsedName(_onModuleClose,[Default]), UsedName(pixel_planar0_bundle_limit_1st,[Default]), UsedName(sg2pack_img_pvld,[Default]), UsedName(img_dat2mcif_rd_req_valid,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(status2dma_free_entries,[Default]), UsedName(portsContains,[Default]), UsedName(getCommands,[Default]), UsedName(parentModName,[Default]), UsedName(pixel_planar1_rp_vld,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(pixel_planar0_width_burst,[Default]), UsedName(reg2dp_mean_format,[Default]), UsedName(sg2pack_entry_end,[Default]), UsedName(instanceName,[Default]), UsedName(sg2pack_height_total,[Default]), UsedName(pixel_planar0_rp_burst,[Default]), UsedName(getClass,[Default]), UsedName(_id,[Default]), UsedName(dp2reg_img_rd_latency,[Default]), UsedName(status2dma_fsm_switch,[Default]), UsedName(img_dat2mcif_rd_req_pd,[Default]), UsedName(pixel_planar1_width_burst,[Default]), UsedName(sg2pack_img_pd,[Default]), UsedName(toString,[Default]), UsedName(pixel_planar0_bundle_limit,[Default]), UsedName(reset,[Default]), UsedName(reg2dp_uv_line_stride,[Default]), UsedName(isInstanceOf,[Default]), UsedName(img_dat2cvif_rd_req_valid,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(mcif2img_dat_rd_rsp_pd,[Default]), UsedName(pixel_planar1_rp_burst,[Default]), UsedName(generateComponent,[Default]), UsedName(sg2pack_sub_h_mid,[Default]), UsedName(pixel_planar0_byte_sft,[Default]), UsedName(addPostnameHook,[Default]), UsedName(_closed,[Default]), UsedName(mcif2img_dat_rd_rsp_valid,[Default]), UsedName(circuitName,[Default]), UsedName(pixel_planar1_bundle_limit,[Default]), UsedName(pixel_planar0_lp_vld,[Default]), UsedName(pathName,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(getRef,[Default]), UsedName(sg2pack_img_prdy,[Default]), UsedName(mcif2img_dat_rd_rsp_ready,[Default]), UsedName(annotate,[Default]), UsedName(reg2dp_pixel_y_offset,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(img2status_dat_updt,[Default]), UsedName(io,[Default]), UsedName(sg2pack_entry_mid,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(pixel_planar,[Default]), UsedName(reg2dp_datain_addr_high_0,[Default]), UsedName(initializeInParent,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(pixel_planar1_byte_sft,[Default]), UsedName(reg2dp_datain_height,[Default]), UsedName(asInstanceOf,[Default]), UsedName(img2sbuf_p0_wr_data,[Default]), UsedName(pixel_order,[Default]), UsedName(reg2dp_datain_addr_low_1,[Default]), UsedName(cvif2img_dat_rd_rsp_pd,[Default]), UsedName(parentPathName,[Default]), UsedName(pixel_planar1_bundle_limit_1st,[Default]), UsedName($asInstanceOf,[Default]), UsedName(reg2dp_dma_en,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_IMG_sg;init;,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(sg2pack_entry_st,[Default]), UsedName(dp2reg_img_rd_stall,[Default]), UsedName(img2status_dat_entries,[Default]), UsedName(sg2pack_sub_h_end,[Default]), UsedName(hashCode,[Default]), UsedName(is_running,[Default]), UsedName(clock,[Default]), UsedName(reg2dp_op_en,[Default]), UsedName(getPublicFields,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(img_dat2cvif_rd_req_pd,[Default]), UsedName(pixel_planar0_rp_vld,[Default]), UsedName(IO,[Default]), UsedName(cvif2img_dat_rd_rsp_ready,[Default]), UsedName(layer_st,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_IMG_sg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_CDMA_dual_reg...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_CDMA_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_CDMA_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_CDMA_dual_reg,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(rsv_per_line,[Default]), UsedName(in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(uv_line_stride,[Default]), UsedName(pad_right,[Default]), UsedName(datain_channel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(rsv_per_uv_line,[Default]), UsedName(getPorts,[Default]), UsedName(line_packed,[Default]), UsedName(surf_packed,[Default]), UsedName(cvt_truncate,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(skip_data_rls,[Default]), UsedName(pad_bottom,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(pixel_format,[Default]), UsedName(desiredName,[Default]), UsedName(wmb_addr_low,[Default]), UsedName(inf_weight_num,[Default]), UsedName(byte_per_kernel,[Default]), UsedName(toNamed,[Default]), UsedName(pad_left,[Default]), UsedName(dma_en,[Default]), UsedName(mean_ax,[Default]), UsedName(weight_ram_type,[Default]), UsedName(_onModuleClose,[Default]), UsedName(skip_weight_rls,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(weight_addr_high,[Default]), UsedName(getCommands,[Default]), UsedName(wgs_addr_high,[Default]), UsedName(dat_rd_stall,[Default]), UsedName(parentModName,[Default]), UsedName(grains,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(weight_bytes,[Default]), UsedName(batches,[Default]), UsedName(datain_width,[Default]), UsedName(getClass,[Default]), UsedName(weight_format,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(pad_top,[Default]), UsedName(wgs_addr_low,[Default]), UsedName(wt_rd_latency,[Default]), UsedName(data_reuse,[Default]), UsedName(nan_data_num,[Default]), UsedName(datain_width_ext,[Default]), UsedName(toString,[Default]), UsedName(datain_height,[Default]), UsedName(reset,[Default]), UsedName(data_bank,[Default]), UsedName(wmb_bytes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(datain_format,[Default]), UsedName(pixel_y_offset,[Default]), UsedName(datain_addr_high_1,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dat_rd_latency,[Default]), UsedName(_closed,[Default]), UsedName(datain_addr_low_1,[Default]), UsedName(wmb_addr_high,[Default]), UsedName(datain_addr_high_0,[Default]), UsedName(line_stride,[Default]), UsedName(reg_rd_data,[Default]), UsedName(cvt_en,[Default]), UsedName(circuitName,[Default]), UsedName(rsv_height,[Default]), UsedName(pathName,[Default]), UsedName(pad_value,[Default]), UsedName(proc_precision,[Default]), UsedName(nan_to_zero,[Default]), UsedName(finalize,[Default]), UsedName(batch_stride,[Default]), UsedName(weight_bank,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(datain_ram_type,[Default]), UsedName(inf_data_num,[Default]), UsedName(pixel_x_offset,[Default]), UsedName(mean_bv,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_dual_reg;init;,[Default]), UsedName(io,[Default]), UsedName(weight_reuse,[Default]), UsedName(clone,[Default]), UsedName(weight_kernel,[Default]), UsedName(notify,[Default]), UsedName(cvt_offset,[Default]), UsedName(initializeInParent,[Default]), UsedName(pixel_mapping,[Default]), UsedName($init$,[Default]), UsedName(datain_addr_low_0,[Default]), UsedName(conv_y_stride,[Default]), UsedName(portsSize,[Default]), UsedName(mean_ry,[Default]), UsedName(datain_height_ext,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(wt_rd_stall,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(rsv_y_index,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(conv_x_stride,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nan_weight_num,[Default]), UsedName(entries,[Default]), UsedName(pixel_sign_override,[Default]), UsedName(surf_stride,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(cvt_scale,[Default]), UsedName(weight_addr_low,[Default]), UsedName(getPublicFields,[Default]), UsedName(mean_gu,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_CDMA_dual_reg,[Default]), UsedName(mean_format,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_CDMA_dual_reg has the following regular definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(rsv_per_line,[Default]), UsedName(in_precision,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(name,[Default]), UsedName(uv_line_stride,[Default]), UsedName(pad_right,[Default]), UsedName(datain_channel,[Default]), UsedName(##,[Default]), UsedName(addId,[Default]), UsedName(rsv_per_uv_line,[Default]), UsedName(getPorts,[Default]), UsedName(line_packed,[Default]), UsedName(surf_packed,[Default]), UsedName(cvt_truncate,[Default]), UsedName(reg_offset,[Default]), UsedName(suggestName,[Default]), UsedName(reg_wr_data,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(compileOptions,[Default]), UsedName(skip_data_rls,[Default]), UsedName(pad_bottom,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(pixel_format,[Default]), UsedName(desiredName,[Default]), UsedName(wmb_addr_low,[Default]), UsedName(inf_weight_num,[Default]), UsedName(byte_per_kernel,[Default]), UsedName(toNamed,[Default]), UsedName(pad_left,[Default]), UsedName(dma_en,[Default]), UsedName(mean_ax,[Default]), UsedName(weight_ram_type,[Default]), UsedName(_onModuleClose,[Default]), UsedName(skip_weight_rls,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(reg_wr_en,[Default]), UsedName(weight_addr_high,[Default]), UsedName(getCommands,[Default]), UsedName(wgs_addr_high,[Default]), UsedName(dat_rd_stall,[Default]), UsedName(parentModName,[Default]), UsedName(grains,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(forceName,[Default]), UsedName(instanceName,[Default]), UsedName(weight_bytes,[Default]), UsedName(batches,[Default]), UsedName(datain_width,[Default]), UsedName(getClass,[Default]), UsedName(weight_format,[Default]), UsedName(_id,[Default]), UsedName(cya,[Default]), UsedName(pad_top,[Default]), UsedName(wgs_addr_low,[Default]), UsedName(wt_rd_latency,[Default]), UsedName(data_reuse,[Default]), UsedName(nan_data_num,[Default]), UsedName(datain_width_ext,[Default]), UsedName(toString,[Default]), UsedName(datain_height,[Default]), UsedName(reset,[Default]), UsedName(data_bank,[Default]), UsedName(wmb_bytes,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(generateComponent,[Default]), UsedName(datain_format,[Default]), UsedName(pixel_y_offset,[Default]), UsedName(datain_addr_high_1,[Default]), UsedName(op_en,[Default]), UsedName(addPostnameHook,[Default]), UsedName(dat_rd_latency,[Default]), UsedName(_closed,[Default]), UsedName(datain_addr_low_1,[Default]), UsedName(wmb_addr_high,[Default]), UsedName(datain_addr_high_0,[Default]), UsedName(line_stride,[Default]), UsedName(reg_rd_data,[Default]), UsedName(cvt_en,[Default]), UsedName(circuitName,[Default]), UsedName(rsv_height,[Default]), UsedName(pathName,[Default]), UsedName(pad_value,[Default]), UsedName(proc_precision,[Default]), UsedName(nan_to_zero,[Default]), UsedName(finalize,[Default]), UsedName(batch_stride,[Default]), UsedName(weight_bank,[Default]), UsedName(getRef,[Default]), UsedName(annotate,[Default]), UsedName(op_en_trigger,[Default]), UsedName(datain_ram_type,[Default]), UsedName(inf_data_num,[Default]), UsedName(pixel_x_offset,[Default]), UsedName(mean_bv,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(nvdla;NV_NVDLA_CDMA_dual_reg;init;,[Default]), UsedName(io,[Default]), UsedName(weight_reuse,[Default]), UsedName(clone,[Default]), UsedName(weight_kernel,[Default]), UsedName(notify,[Default]), UsedName(cvt_offset,[Default]), UsedName(initializeInParent,[Default]), UsedName(pixel_mapping,[Default]), UsedName($init$,[Default]), UsedName(datain_addr_low_0,[Default]), UsedName(conv_y_stride,[Default]), UsedName(portsSize,[Default]), UsedName(mean_ry,[Default]), UsedName(datain_height_ext,[Default]), UsedName(conv_mode,[Default]), UsedName(asInstanceOf,[Default]), UsedName(parentPathName,[Default]), UsedName(wt_rd_stall,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(rsv_y_index,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(conv_x_stride,[Default]), UsedName(addCommand,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(nan_weight_num,[Default]), UsedName(entries,[Default]), UsedName(pixel_sign_override,[Default]), UsedName(surf_stride,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(cvt_scale,[Default]), UsedName(weight_addr_low,[Default]), UsedName(getPublicFields,[Default]), UsedName(mean_gu,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(NV_NVDLA_CDMA_dual_reg,[Default]), UsedName(mean_format,[Default]), UsedName(IO,[Default]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_CDMA_dual_reg)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidating (transitively) by inheritance from nvdla.NV_NVDLA_sdp...[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set(nvdla.NV_NVDLA_sdp)[0m
[0m[[0m[0mdebug[0m] [0m[0mInvalidated by transitive inheritance dependency: Set(nvdla.NV_NVDLA_sdp)[0m
[0m[[0m[0mdebug[0m] [0m[0mChange NamesChange(nvdla.NV_NVDLA_sdp,ModifiedNames(changes = UsedName(eq,[Default]), UsedName(synchronized,[Default]), UsedName(sdp_n2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(nvdla_core_clk,[Default]), UsedName(sdp_b2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(name,[Default]), UsedName(mcif2sdp_e_rd_rsp_pd,[Default]), UsedName(cacc2sdp_ready,[Default]), UsedName(##,[Default]), UsedName(cvif2sdp_rd_rsp_ready,[Default]), UsedName(csb2sdp_req_pd,[Default]), UsedName(addId,[Default]), UsedName(sdp_n2cvif_rd_req_pd,[Default]), UsedName(getPorts,[Default]), UsedName(sdp_n2cvif_rd_req_valid,[Default]), UsedName(sdp2cvif_wr_req_pd,[Default]), UsedName(sdp2csb_resp_pd,[Default]), UsedName(suggestName,[Default]), UsedName(sdp2mcif_wr_req_pd,[Default]), UsedName(sdp2glb_done_intr_pd,[Default]), UsedName(_compatIoPortBound,[Default]), UsedName(csb2sdp_rdma_req_prdy,[Default]), UsedName(compileOptions,[Default]), UsedName(_compatAutoWrapPorts,[Default]), UsedName(desiredName,[Default]), UsedName(cvif2sdp_rd_rsp_pd,[Default]), UsedName(sdp_e2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_valid,[Default]), UsedName(toNamed,[Default]), UsedName(cacc2sdp_pd,[Default]), UsedName(cvif2sdp_n_rd_rsp_valid,[Default]), UsedName(sdp_n2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(_onModuleClose,[Default]), UsedName(mcif2sdp_e_rd_rsp_ready,[Default]), UsedName(override_reset,[Default]), UsedName(!=,[Default]), UsedName($isInstanceOf,[Default]), UsedName(portsContains,[Default]), UsedName(cvif2sdp_b_rd_rsp_pd,[Default]), UsedName(getCommands,[Default]), UsedName(sdp_b2mcif_rd_req_ready,[Default]), UsedName(cvif2sdp_rd_rsp_valid,[Default]), UsedName(parentModName,[Default]), UsedName(mcif2sdp_rd_rsp_ready,[Default]), UsedName(NV_NVDLA_sdp,[Default]), UsedName(getModulePorts,[Default]), UsedName(setRef,[Default]), UsedName(sdp2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_pd,[Default]), UsedName(forceName,[Default]), UsedName(cvif2sdp_b_rd_rsp_valid,[Default]), UsedName(sdp_b2mcif_rd_req_valid,[Default]), UsedName(sdp_rdma2csb_resp_valid,[Default]), UsedName(instanceName,[Default]), UsedName(mcif2sdp_b_rd_rsp_ready,[Default]), UsedName(cvif2sdp_e_rd_rsp_pd,[Default]), UsedName(getClass,[Default]), UsedName(sdp2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(cvif2sdp_wr_rsp_complete,[Default]), UsedName(_id,[Default]), UsedName(sdp_n2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_b_rd_rsp_valid,[Default]), UsedName(cvif2sdp_b_rd_rsp_ready,[Default]), UsedName(sdp_e2cvif_rd_req_ready,[Default]), UsedName(sdp2cvif_rd_req_pd,[Default]), UsedName(toString,[Default]), UsedName(sdp2csb_resp_valid,[Default]), UsedName(reset,[Default]), UsedName(sdp2cvif_rd_req_ready,[Default]), UsedName(mcif2sdp_n_rd_rsp_pd,[Default]), UsedName(sdp2mcif_wr_req_valid,[Default]), UsedName(isInstanceOf,[Default]), UsedName(_namespace,[Default]), UsedName(equals,[Default]), UsedName(sdp2mcif_rd_req_pd,[Default]), UsedName(sdp2pdp_pd,[Default]), UsedName(generateComponent,[Default]), UsedName(sdp2mcif_rd_req_valid,[Default]), UsedName(mcif2sdp_n_rd_rsp_ready,[Default]), UsedName(mcif2sdp_rd_rsp_valid,[Default]), UsedName(sdp_e2mcif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2cvif_rd_req_ready,[Default]), UsedName(sdp2pdp_valid,[Default]), UsedName(tmc2slcg_disable_clock_gating,[Default]), UsedName(sdp_e2mcif_rd_req_valid,[Default]), UsedName(cvif2sdp_n_rd_rsp_ready,[Default]), UsedName(sdp2mcif_rd_req_ready,[Default]), UsedName(dla_clk_ovr_on_sync,[Default]), UsedName(sdp2mcif_wr_req_ready,[Default]), UsedName(addPostnameHook,[Default]), UsedName(sdp_e2cvif_rd_req_valid,[Default]), UsedName(sdp2cvif_wr_req_ready,[Default]), UsedName(_closed,[Default]), UsedName(sdp_e2cvif_rd_req_pd,[Default]), UsedName(global_clk_ovr_on_sync,[Default]), UsedName(cvif2sdp_e_rd_rsp_ready,[Default]), UsedName(circuitName,[Default]), UsedName(cvif2sdp_n_rd_rsp_pd,[Default]), UsedName(pathName,[Default]), UsedName(mcif2sdp_e_rd_rsp_valid,[Default]), UsedName(csb2sdp_rdma_req_pd,[Default]), UsedName(sdp_rdma2csb_resp_pd,[Default]), UsedName(pwrbus_ram_pd,[Default]), UsedName(finalize,[Default]), UsedName(sdp2cvif_rd_req_valid,[Default]), UsedName(getRef,[Default]), UsedName(mcif2sdp_b_rd_rsp_pd,[Default]), UsedName(annotate,[Default]), UsedName(sdp_e2mcif_rd_req_ready,[Default]), UsedName(cacc2sdp_valid,[Default]), UsedName(csb2sdp_rdma_req_pvld,[Default]), UsedName(==,[Default]), UsedName(ne,[Default]), UsedName(sdp2pdp_ready,[Default]), UsedName(mcif2sdp_rd_rsp_pd,[Default]), UsedName(sdp2cvif_wr_req_valid,[Default]), UsedName(io,[Default]), UsedName(sdp_n2cvif_rd_req_ready,[Default]), UsedName(clone,[Default]), UsedName(notify,[Default]), UsedName(sdp_e2mcif_rd_req_pd,[Default]), UsedName(sdp_n2mcif_rd_req_pd,[Default]), UsedName(initializeInParent,[Default]), UsedName(cvif2sdp_e_rd_rsp_valid,[Default]), UsedName($init$,[Default]), UsedName(portsSize,[Default]), UsedName(sdp_b2cvif_rd_cdt_lat_fifo_pop,[Default]), UsedName(sdp_b2mcif_rd_req_pd,[Default]), UsedName(asInstanceOf,[Default]), UsedName(nvdla;NV_NVDLA_sdp;init;,[Default]), UsedName(parentPathName,[Default]), UsedName($asInstanceOf,[Default]), UsedName(getIds,[Default]), UsedName(_component,[Default]), UsedName(nameIds,[Default]), UsedName(override_clock,[Default]), UsedName(addCommand,[Default]), UsedName(nvdla_core_rstn,[Default]), UsedName(_bindIoInPlace,[Default]), UsedName(conf,[Implicit]), UsedName(sdp_n2mcif_rd_req_ready,[Default]), UsedName(mcif2sdp_wr_rsp_complete,[Default]), UsedName(hashCode,[Default]), UsedName(clock,[Default]), UsedName(mcif2sdp_n_rd_rsp_valid,[Default]), UsedName(getPublicFields,[Default]), UsedName(csb2sdp_req_prdy,[Default]), UsedName(csb2sdp_req_pvld,[Default]), UsedName(_parent,[Default]), UsedName(wait,[Default]), UsedName(notifyAll,[Default]), UsedName(IO,[Default]))) invalidates 1 classes due to The nvdla.NV_NVDLA_sdp has the following implicit definitions changed:[0m
[0m[[0m[0mdebug[0m] [0m[0m	UsedName(conf,[Implicit]).[0m
[0m[[0m[0mdebug[0m] [0m[0m	> by transitive inheritance: Set(nvdla.NV_NVDLA_sdp)[0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m	> [0m
[0m[[0m[0mdebug[0m] [0m[0m        [0m
[0m[[0m[0mdebug[0m] [0m[0mNew invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mInitial set of included nodes: Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mPreviously invalidated, but (transitively) depend on new invalidations:[0m
[0m[[0m[0mdebug[0m] [0m[0m	Set()[0m
[0m[[0m[0mdebug[0m] [0m[0mAll newly invalidated classes after taking into account (previously) recompiled classes:Set()[0m
